<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭大大的博客</title>
  
  <subtitle>生活就像海洋，只有意志坚强的人才能到达彼岸</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gershonv.github.io/"/>
  <updated>2019-01-12T07:26:43.136Z</updated>
  <id>https://gershonv.github.io/</id>
  
  <author>
    <name>gershonv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sequelize - 多表 CURD</title>
    <link href="https://gershonv.github.io/2019/01/12/sequelize-curd2/"/>
    <id>https://gershonv.github.io/2019/01/12/sequelize-curd2/</id>
    <published>2019-01-12T04:58:33.000Z</published>
    <updated>2019-01-12T07:26:43.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  uuid: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    unique: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AccountModel = sequelize.define(<span class="string">'account'</span>, &#123;</span><br><span class="line">  email: &#123;</span><br><span class="line">    type: Sequelize.CHAR(<span class="number">60</span>),</span><br><span class="line">    allowNull: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  User的实例对象将拥有 getAccount、setAccount、createAccount 方法</span></span><br><span class="line">UserModel.hasOne(AccountModel)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Account的实例对象将拥有getUser、setUser、addUser 方法</span></span><br><span class="line">AccountModel.belongsTo(UserModel, &#123;</span><br><span class="line">  foreignKey: <span class="string">'userId'</span>,</span><br><span class="line">  targetKey: <span class="string">'uuid'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="增-createAccount"><a href="#增-createAccount" class="headerlink" title="增 - createAccount"></a>增 - createAccount</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">666</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">await</span> user.createAccount(&#123; <span class="attr">email</span>: <span class="string">'12306@qq.com'</span> &#125;) <span class="comment">// 增</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(account.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br></pre></td></tr></table></figure><p>使用对应的的 <code>userId</code> 作为外键在 <code>accounts</code> 表里插入一条数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> users;</span><br><span class="line">+----+------+---------------------+---------------------+</span><br><span class="line">| id | uuid | createdAt           | updatedAt           |</span><br><span class="line">+----+------+---------------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> |  <span class="number">666</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> |</span><br><span class="line">+----+------+---------------------+---------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> accounts;</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line">| id | email        | createdAt           | updatedAt           | userId |</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">12306</span>@qq.com | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">05</span>:<span class="number">38</span> |      <span class="number">1</span> |</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="改-setAccount"><a href="#改-setAccount" class="headerlink" title="改 - setAccount"></a>改 - setAccount</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> antherAccount = <span class="keyword">await</span> AccountModel.create(&#123; <span class="attr">email</span>: <span class="string">'aaa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">await</span> user.setAccount(antherAccount)</span><br></pre></td></tr></table></figure><ol><li>插入一条 <code>account</code> 数据，此时外键 <code>userId</code> 是空的，还没有关联 <code>user</code></li><li>找出当前 <code>user</code> 所关联的 <code>account</code> 并将其 <code>userId</code> 置为 <code>NULL</code>（为了保证一对一关系）</li><li>设置新的 <code>acount</code> 的外键 <code>userId</code> 为 <code>user</code> 的属性 <code>id</code>，生成关系</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> accounts;</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line">| id | email        | createdAt           | updatedAt           | userId |</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line">|  <span class="number">1</span> | <span class="number">12306</span>@qq.com | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">59</span> |   NULL |</span><br><span class="line">|  <span class="number">2</span> | aaa          | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">59</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">59</span> |      <span class="number">1</span> |</span><br><span class="line">+----+--------------+---------------------+---------------------+--------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="软删-setAccount-null"><a href="#软删-setAccount-null" class="headerlink" title="软删 - setAccount(null)"></a>软删 - setAccount(null)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">await</span> user.setAccount(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>这里的删除实际上只是“切断”关系，并不会真正的物理删除记录。<br>SQL 执行逻辑是：</p><ol><li>找出 <code>user</code> 所关联的 <code>account</code> 数据</li><li>将其外键 <code>userId</code> 设置为 <code>NULL</code>，完成关系的“切断”</li></ol><h3 id="查-getAccount"><a href="#查-getAccount" class="headerlink" title="查 - getAccount"></a>查 - getAccount</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">await</span> user.getAccount()</span><br><span class="line"><span class="built_in">console</span>.log(account.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>, &#123;</span><br><span class="line">  include: [AccountModel]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(user.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//   uuid: 666,</span></span><br><span class="line"><span class="comment">//   createdAt: 2019-01-11T05:23:05.000Z,</span></span><br><span class="line"><span class="comment">//   updatedAt: 2019-01-11T05:23:05.000Z,</span></span><br><span class="line"><span class="comment">//   account:</span></span><br><span class="line"><span class="comment">//    &#123; id: 2,</span></span><br><span class="line"><span class="comment">//      email: 'aaa',</span></span><br><span class="line"><span class="comment">//      createdAt: 2019-01-11T08:11:59.000Z,</span></span><br><span class="line"><span class="comment">//      updatedAt: 2019-01-11T08:11:59.000Z,</span></span><br><span class="line"><span class="comment">//      userId: 1 &#125; &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="string">`user`</span>.<span class="string">`id`</span>, <span class="string">`user`</span>.<span class="string">`uuid`</span>, <span class="string">`user`</span>.<span class="string">`createdAt`</span>, <span class="string">`user`</span>.<span class="string">`updatedAt`</span>,</span><br><span class="line"><span class="string">`account`</span>.<span class="string">`id`</span> AS <span class="string">`account.id`</span>, <span class="string">`account`</span>.<span class="string">`email`</span> AS <span class="string">`account.email`</span>, <span class="string">`account`</span>.<span class="string">`createdAt`</span> AS <span class="string">`account.createdAt`</span>,</span><br><span class="line"><span class="string">`account`</span>.<span class="string">`updatedAt`</span> AS <span class="string">`account.updatedAt`</span>, <span class="string">`account`</span>.<span class="string">`userId`</span> AS <span class="string">`account.userId`</span> FROM <span class="string">`users`</span> AS <span class="string">`user`</span></span><br><span class="line">LEFT OUTER JOIN <span class="string">`accounts`</span> AS <span class="string">`account`</span> ON <span class="string">`user`</span>.<span class="string">`id`</span> = <span class="string">`account`</span>.<span class="string">`userId`</span> WHERE <span class="string">`user`</span>.<span class="string">`id`</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+</span><br><span class="line">| id | uuid | createdAt           | updatedAt           | account.id | account.email | account.createdAt   | account.updatedAt   | account.userId |</span><br><span class="line">+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+</span><br><span class="line">|  <span class="number">1</span> |  <span class="number">666</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">05</span>:<span class="number">23</span>:<span class="number">05</span> |          <span class="number">9</span> | aaa           | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">59</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-11</span> <span class="number">08</span>:<span class="number">11</span>:<span class="number">59</span> |              <span class="number">1</span> |</span><br><span class="line">+----+------+---------------------+---------------------+------------+---------------+---------------------+---------------------+----------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>可以看到，我们对 2 个表进行了一个外联接，从而在取 <code>user</code> 的同时也获取到了 <code>account</code>。</p><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    uuid: &#123;</span><br><span class="line">      type: Sequelize.INTEGER,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      unique: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NoteModel = sequelize.define(<span class="string">'note'</span>, &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: Sequelize.CHAR(<span class="number">64</span>),</span><br><span class="line">    allowNull: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User的实例对象将拥有getNotes、setNotes、addNote、createNote、removeNote、hasNote方法</span></span><br><span class="line">UserModel.hasMany(NoteModel)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note的实例对象将拥有getUser、setUser、createUser方法</span></span><br><span class="line">NoteModel.belongsTo(UserModel)</span><br></pre></td></tr></table></figure><p>生成的 sql 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">    <span class="string">`uuid`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>, PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">  ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`notes`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`title`</span> <span class="built_in">CHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`userId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`users`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">SET</span></span><br><span class="line">        <span class="literal">NULL</span> ONUPDATE <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p>可以看到这种关系中，外键 <code>userId</code> 加在了多的一端（<code>notes</code> 表）。同时相关的模型也自动获得了一些方法。</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><h4 id="createNote"><a href="#createNote" class="headerlink" title="createNote"></a>createNote</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;) <span class="comment">// 增</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(note1.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br></pre></td></tr></table></figure><p>SQL 执行逻辑：</p><blockquote><p>使用 <code>user</code> 的主键 <code>id</code> 值作为外键直接在 <code>notes</code> 表里插入一条数据。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO <span class="string">`notes`</span> (<span class="string">`id`</span>,<span class="string">`title`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>,<span class="string">`userId`</span>)</span><br><span class="line">VALUES (DEFAULT,<span class="string">'aa'</span>,<span class="string">'2019-01-12 05:32:50'</span>,<span class="string">'2019-01-12 05:32:50'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="addNote"><a href="#addNote" class="headerlink" title="addNote"></a>addNote</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"><span class="keyword">await</span> user.addNote(note)</span><br></pre></td></tr></table></figure><p><code>SQL</code>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`users`</span> (<span class="string">`id`</span>,<span class="string">`uuid`</span>) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>,<span class="number">1234</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`notes`</span> (<span class="string">`id`</span>,<span class="string">`title`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>,<span class="string">'bb'</span>,<span class="string">'2019-01-12 05:40:34'</span>,<span class="string">'2019-01-12 05:40:34'</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`notes`</span> <span class="keyword">SET</span> <span class="string">`userId`</span>=<span class="number">1</span>,<span class="string">`updatedAt`</span>=<span class="string">'2019-01-12 05:40:34'</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> <span class="keyword">IN</span> (<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li>插入一条 <code>note</code> 数据，此时该条数据的外键 <code>userId</code> 为空</li><li>使用 <code>user</code> 的属性 <code>id</code> 值再更新该条 <code>note</code> 数据，设置好外键，完成关系建立</li></ol><h4 id="addNotes"><a href="#addNotes" class="headerlink" title="addNotes"></a>addNotes</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> user.addNotes([note1, note2])</span><br></pre></td></tr></table></figure><h3 id="改-setNotes"><a href="#改-setNotes" class="headerlink" title="改 - setNotes"></a>改 - setNotes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> note3 = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'cc'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note4 = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'dd'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> user.setNotes([note3, note4])</span><br></pre></td></tr></table></figure><ol><li>根据 <code>user</code> 的属性 id 查询所有相关的 <code>note</code> 数据</li><li>将 <code>note1</code>、<code>note2</code> 的外键 <code>userId</code> 置为 <code>NULL</code>，切断关系</li><li>将 <code>note3</code>、<code>note4</code> 的外键 <code>userId</code> 置为 <code>user</code> 的属性 <code>id</code>，完成关系建立</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> notes;</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line">| id | title | createdAt           | updatedAt           | userId |</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line">|  <span class="number">1</span> | aa    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> |   NULL |</span><br><span class="line">|  <span class="number">2</span> | bb    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> |   NULL |</span><br><span class="line">|  <span class="number">3</span> | cc    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> |      <span class="number">1</span> |</span><br><span class="line">|  <span class="number">4</span> | dd    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">05</span>:<span class="number">53</span>:<span class="number">11</span> |      <span class="number">1</span> |</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="软删"><a href="#软删" class="headerlink" title="软删"></a>软删</h3><h4 id="removeNote"><a href="#removeNote" class="headerlink" title="removeNote"></a>removeNote</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> user.removeNote(note1)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> notes;</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line">| id | title | createdAt           | updatedAt           | userId |</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line">|  <span class="number">1</span> | aa    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">05</span>:<span class="number">40</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">05</span>:<span class="number">40</span> |   NULL |</span><br><span class="line">|  <span class="number">2</span> | bb    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">05</span>:<span class="number">40</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">05</span>:<span class="number">40</span> |      <span class="number">1</span> |</span><br><span class="line">+----+-------+---------------------+---------------------+--------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="setNotes"><a href="#setNotes" class="headerlink" title="setNotes([])"></a>setNotes([])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"><span class="keyword">await</span> user.setNotes([])</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h4 id="getNotes"><a href="#getNotes" class="headerlink" title="getNotes"></a>getNotes</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = <span class="keyword">await</span> user.getNotes(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    title: &#123; <span class="attr">$like</span>: <span class="string">'%a%'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">notes.map(<span class="function"><span class="params">note</span> =&gt;</span> <span class="built_in">console</span>.log(note.title))</span><br></pre></td></tr></table></figure><h4 id="findAll"><a href="#findAll" class="headerlink" title="findAll"></a>findAll</h4><blockquote><p>场景 1： 查询所有满足条件的 <code>note</code>，同时获取 <code>note</code> 属于哪个 <code>user</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notes = <span class="keyword">await</span> NoteModel.findAll(&#123;</span><br><span class="line">  include: UserModel, <span class="comment">// or [UserModel, ...]</span></span><br><span class="line">  where: &#123;</span><br><span class="line">    title: &#123; <span class="attr">$like</span>: <span class="string">'%a%'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">notes.map(<span class="function"><span class="params">note</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(note.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//   title: 'aa',</span></span><br><span class="line"><span class="comment">//   createdAt: 2019-01-12T06:12:33.000Z,</span></span><br><span class="line"><span class="comment">//   updatedAt: 2019-01-12T06:12:33.000Z,</span></span><br><span class="line"><span class="comment">//   userId: 1,</span></span><br><span class="line"><span class="comment">//   user: &#123; id: 1, uuid: 1234 &#125; &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>场景 2 查询所有满足条件的 <code>note</code>，同时获取 <code>note</code> 属于哪个<code>user</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note1 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> note2 = <span class="keyword">await</span> user.createNote(&#123; <span class="attr">title</span>: <span class="string">'bb'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  include: [NoteModel], <span class="comment">// or [UserModel, ...]</span></span><br><span class="line">  where: &#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line">users.map(<span class="function"><span class="params">note</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(note.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//   uuid: 1234,</span></span><br><span class="line"><span class="comment">//   notes:</span></span><br><span class="line"><span class="comment">//    [ &#123; id: 1,</span></span><br><span class="line"><span class="comment">//        title: 'aa',</span></span><br><span class="line"><span class="comment">//        createdAt: 2019-01-12T06:17:39.000Z,</span></span><br><span class="line"><span class="comment">//        updatedAt: 2019-01-12T06:17:39.000Z,</span></span><br><span class="line"><span class="comment">//        userId: 1 &#125;,</span></span><br><span class="line"><span class="comment">//      &#123; id: 2,</span></span><br><span class="line"><span class="comment">//        title: 'bb',</span></span><br><span class="line"><span class="comment">//        createdAt: 2019-01-12T06:17:39.000Z,</span></span><br><span class="line"><span class="comment">//        updatedAt: 2019-01-12T06:17:39.000Z,</span></span><br><span class="line"><span class="comment">//        userId: 1 &#125; ] &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询创建时间在今天之前的所有user，同时获取他们note的标题中含有关键字css的所有note</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  include: [</span><br><span class="line">    &#123;</span><br><span class="line">      model: NoteModel,</span><br><span class="line">      where: &#123;</span><br><span class="line">        title: &#123; <span class="attr">$like</span>: <span class="string">'%aa%'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  where: &#123; <span class="attr">uuid</span>: <span class="number">1234</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NoteModel = sequelize.define(<span class="string">'note'</span>, &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: Sequelize.CHAR(<span class="number">64</span>),</span><br><span class="line">    allowNull: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TagModel = sequelize.define(<span class="string">'tag'</span>, &#123;</span><br><span class="line">  name: Sequelize.CHAR(<span class="number">64</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TaggingModel = sequelize.define(<span class="string">'tagging'</span>, &#123;</span><br><span class="line">  type: Sequelize.INTEGER</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note的实例拥有getTags、setTags、addTag、addTags、createTag、removeTag、hasTag方法</span></span><br><span class="line">NoteModel.belongsToMany(TagModel, &#123;</span><br><span class="line">  through: TaggingModel</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tag的实例拥有getNotes、setNotes、addNote、addNotes、createNote、removeNote、hasNote方法</span></span><br><span class="line">TagModel.belongsToMany(NoteModel, &#123;</span><br><span class="line">  through: TaggingModel</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>tagging</code> 表连接两个表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show columns <span class="keyword">from</span> taggings;</span><br><span class="line">+-----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-----------+----------+------+-----+---------+-------+</span><br><span class="line">| type      | int(<span class="number">11</span>)  | YES  |     | NULL    |       |</span><br><span class="line">| createdAt | datetime | NO   |     | NULL    |       |</span><br><span class="line">| updatedAt | datetime | NO   |     | NULL    |       |</span><br><span class="line">| noteId    | int(<span class="number">11</span>)  | NO   | PRI | NULL    |       |</span><br><span class="line">| tagId     | int(<span class="number">11</span>)  | NO   | PRI | NULL    |       |</span><br><span class="line">+-----------+----------+------+-----+---------+-------+</span><br><span class="line"><span class="number">5</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h3><h4 id="createTag"><a href="#createTag" class="headerlink" title="createTag"></a>createTag</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">await</span> note.createTag(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;, &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">0</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`notes`</span></span><br><span class="line">  (<span class="string">`id`</span>,<span class="string">`title`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>,<span class="string">'aa'</span>,<span class="string">'2019-01-12 06:38:09'</span>,<span class="string">'2019-01-12 06:38:09'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tags`</span></span><br><span class="line">  (<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>) <span class="keyword">VALUES</span> (<span class="keyword">DEFAULT</span>,<span class="string">'react.js'</span>,<span class="string">'2019-01-12 06:38:09'</span>,<span class="string">'2019-01-12 06:38:09'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`taggings`</span></span><br><span class="line">  (<span class="string">`type`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>,<span class="string">`noteId`</span>,<span class="string">`tagId`</span>) <span class="keyword">VALUES</span> (<span class="number">0</span>,<span class="string">'2019-01-12 06:51:10'</span>,<span class="string">'2019-01-12 06:51:10'</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><ol><li>在 <code>notes</code> 表插入记录</li><li>在 <code>tags</code> 表中插入记录</li><li>使用对应的值设置外键 <code>tagId</code> 和 <code>noteId</code> 以及关系模型本身需要的属性（<code>type: 0</code>）在关系表 tagging 中插入记录</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> notes;</span><br><span class="line">+----+-------+---------------------+---------------------+</span><br><span class="line">| id | title | createdAt           | updatedAt           |</span><br><span class="line">+----+-------+---------------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> | aa    | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">51</span>:<span class="number">10</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">51</span>:<span class="number">10</span> |</span><br><span class="line">+----+-------+---------------------+---------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> taggings;</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">| type | createdAt           | updatedAt           | noteId | tagId |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">|    <span class="number">0</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">51</span>:<span class="number">10</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">51</span>:<span class="number">10</span> |      <span class="number">1</span> |     <span class="number">1</span> |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> tags;</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line">| id | name     | createdAt           | updatedAt           |</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> | react.js | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">55</span>:<span class="number">00</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">06</span>:<span class="number">55</span>:<span class="number">00</span> |</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="addTag"><a href="#addTag" class="headerlink" title="addTag"></a>addTag</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">await</span> note.addTag(tag, &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><h4 id="addTags"><a href="#addTags" class="headerlink" title="addTags"></a>addTags</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><h3 id="改-setTags"><a href="#改-setTags" class="headerlink" title="改 - setTags"></a>改 - setTags</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tag3 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'angular.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag4 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'ant-desgin'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.setTags([tag3, tag4], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">2</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> taggings;</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">| type | createdAt           | updatedAt           | noteId | tagId |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">|    <span class="number">2</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> |      <span class="number">1</span> |     <span class="number">3</span> |</span><br><span class="line">|    <span class="number">2</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> |      <span class="number">1</span> |     <span class="number">4</span> |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> tags;</span><br><span class="line">+----+------------+---------------------+---------------------+</span><br><span class="line">| id | name       | createdAt           | updatedAt           |</span><br><span class="line">+----+------------+---------------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> | react.js   | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">51</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">51</span> |</span><br><span class="line">|  <span class="number">2</span> | vue.js     | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">51</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">51</span> |</span><br><span class="line">|  <span class="number">3</span> | angular.js | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> |</span><br><span class="line">|  <span class="number">4</span> | ant-desgin | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">02</span>:<span class="number">52</span> |</span><br><span class="line">+----+------------+---------------------+---------------------+</span><br><span class="line"><span class="number">4</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h4 id="removeTag"><a href="#removeTag" class="headerlink" title="removeTag"></a>removeTag</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.removeTag(tag2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE FROM `taggings` WHERE `noteId` = 1 AND `tagId` IN (2)</span></span><br></pre></td></tr></table></figure><p>–&gt; 软删:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * <span class="keyword">from</span> tags;</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line">| id | name     | createdAt           | updatedAt           |</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line">|  <span class="number">1</span> | react.js | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> |</span><br><span class="line">|  <span class="number">2</span> | vue.js   | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> |</span><br><span class="line">+----+----------+---------------------+---------------------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> taggings;</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">| type | createdAt           | updatedAt           | noteId | tagId |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line">|    <span class="number">1</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> | <span class="number">2019</span><span class="number">-01</span><span class="number">-12</span> <span class="number">07</span>:<span class="number">06</span>:<span class="number">18</span> |      <span class="number">1</span> |     <span class="number">1</span> |</span><br><span class="line">+------+---------------------+---------------------+--------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h4 id="setTags"><a href="#setTags" class="headerlink" title="setTags([])"></a>setTags([])</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.setTags([])</span><br></pre></td></tr></table></figure><h3 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h3><h4 id="getTags"><a href="#getTags" class="headerlink" title="getTags"></a>getTags</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = <span class="keyword">await</span> note.getTags(&#123;</span><br><span class="line">  <span class="comment">// 这里可以对tags进行where</span></span><br><span class="line">&#125;)</span><br><span class="line">notes.map(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(d.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//   name: 'react.js',</span></span><br><span class="line"><span class="comment">//   createdAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//   updatedAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//   tagging:</span></span><br><span class="line"><span class="comment">//    &#123; type: 1,</span></span><br><span class="line"><span class="comment">//      createdAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//      updatedAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//      noteId: 1,</span></span><br><span class="line"><span class="comment">//      tagId: 1 &#125; &#125;</span></span><br><span class="line"><span class="comment">// &#123; id: 2,</span></span><br><span class="line"><span class="comment">//   name: 'vue.js',</span></span><br><span class="line"><span class="comment">//   createdAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//   updatedAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//   tagging:</span></span><br><span class="line"><span class="comment">//    &#123; type: 1,</span></span><br><span class="line"><span class="comment">//      createdAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//      updatedAt: 2019-01-12T07:11:26.000Z,</span></span><br><span class="line"><span class="comment">//      noteId: 1,</span></span><br><span class="line"><span class="comment">//      tagId: 2 &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到这种查询，就是执行一个 <code>inner join</code>。</p><h4 id="findAll-1"><a href="#findAll-1" class="headerlink" title="findAll"></a>findAll</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> note = <span class="keyword">await</span> NoteModel.create(&#123; <span class="attr">title</span>: <span class="string">'aa'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag1 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'react.js'</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> tag2 = <span class="keyword">await</span> TagModel.create(&#123; <span class="attr">name</span>: <span class="string">'vue.js'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> note.addTags([tag1, tag2], &#123; <span class="attr">through</span>: &#123; <span class="attr">type</span>: <span class="number">1</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = <span class="keyword">await</span> NoteModel.findAll(&#123;</span><br><span class="line">  include: TagModel</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">notes.map(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(d.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; id: 1,</span></span><br><span class="line"><span class="comment">//   title: 'aa',</span></span><br><span class="line"><span class="comment">//   createdAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//   updatedAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//   tags:</span></span><br><span class="line"><span class="comment">//    [ &#123; id: 1,</span></span><br><span class="line"><span class="comment">//        name: 'react.js',</span></span><br><span class="line"><span class="comment">//        createdAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//        updatedAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//        tagging: [Object] &#125;,</span></span><br><span class="line"><span class="comment">//      &#123; id: 2,</span></span><br><span class="line"><span class="comment">//        name: 'vue.js',</span></span><br><span class="line"><span class="comment">//        createdAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//        updatedAt: 2019-01-12T07:14:43.000Z,</span></span><br><span class="line"><span class="comment">//        tagging: [Object] &#125; ] &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一对一&quot;&gt;&lt;a href=&quot;#一对一&quot; class=&quot;headerlink&quot; title=&quot;一对一&quot;&gt;&lt;/a&gt;一对一&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; UserModel = sequelize.define(&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  uuid: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: Sequelize.INTEGER,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allowNull: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    unique: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; AccountModel = sequelize.define(&lt;span class=&quot;string&quot;&gt;&#39;account&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  email: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: Sequelize.CHAR(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allowNull: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  User的实例对象将拥有 getAccount、setAccount、createAccount 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserModel.hasOne(AccountModel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Account的实例对象将拥有getUser、setUser、addUser 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AccountModel.belongsTo(UserModel, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  foreignKey: &lt;span class=&quot;string&quot;&gt;&#39;userId&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  targetKey: &lt;span class=&quot;string&quot;&gt;&#39;uuid&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - 单表 CURD</title>
    <link href="https://gershonv.github.io/2019/01/10/sequelize-curd/"/>
    <id>https://gershonv.github.io/2019/01/10/sequelize-curd/</id>
    <published>2019-01-10T14:45:06.000Z</published>
    <updated>2019-01-12T04:59:59.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><h3 id="create-创建保存新实例"><a href="#create-创建保存新实例" class="headerlink" title="create - 创建保存新实例"></a>create - 创建保存新实例</h3><blockquote><p>create(values, [options]) -&gt; Promise.<instance></instance></p></blockquote><p>构建一个新的模型实例，并进行保存。与 <code>build()</code>方法不同的是，此方法除创建新实例外，还会将其保存到对应数据库表中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接操作db</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.create(&#123;</span><br><span class="line">  name: <span class="string">'guodada'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  sex: <span class="number">1</span>,</span><br><span class="line">  score: <span class="number">99</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>values</td><td><code>Object</code></td><td>无</td></tr><tr><td>[options]</td><td><code>Object</code></td><td>无</td></tr><tr><td>[options.raw=false]</td><td><code>Boolean</code></td><td>设置为true时，值会忽略字段和虚拟设置器</td></tr><tr><td>[options.isNewRecord=true]</td><td><code>Boolean</code></td><td>无</td></tr><tr><td>[options.fields]</td><td><code>Array</code></td><td>如果设置后，只有列表中区别的列才会进行保存</td></tr><tr><td>[options.include]</td><td><code>Array</code></td><td>用于构建prefetched/included模型，参见 set</td></tr><tr><td>[options.onDuplicate]</td><td><code>String</code></td><td>无</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr><tr><td>[options.logging=false]</td><td><code>Function</code></td><td>一个用于打印查询时所执行sql的函数</td></tr><tr><td>[options.searchPath=DEFAULT]</td><td><code>String</code></td><td>指定schema的 search_path (仅 Postgres)</td></tr><tr><td>[options.benchmark=false]</td><td><code>Boolean</code></td><td>当打印SQL日志时同时输出查询执行时间（毫秒）</td></tr></tbody></table><h3 id="build-创建新实例"><a href="#build-创建新实例" class="headerlink" title="build - 创建新实例"></a>build - 创建新实例</h3><blockquote><p>build(values, [options]) -&gt; Instance</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build后对象只存在于内存中，调用save后才操作db</span></span><br><span class="line"><span class="keyword">const</span> user = UserModel.build(&#123;</span><br><span class="line">  name: <span class="string">'guodada'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  sex: <span class="number">1</span>,</span><br><span class="line">  score: <span class="number">99</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> user.save()</span><br><span class="line"><span class="built_in">console</span>.log(user.get(&#123; <span class="attr">plain</span>: <span class="literal">true</span> &#125;))</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>values</td><td>Object</td><td>无</td></tr><tr><td>[options]</td><td>Object</td><td>无</td></tr><tr><td>[options.raw=false]</td><td>Boolean</td><td>设置为true时，值会忽略字段和虚拟设置器</td></tr><tr><td>[options.isNewRecord=true]</td><td>Boolean</td><td>无</td></tr><tr><td>[options.include]</td><td>Array</td><td>用于构建<code>prefetched/included</code>模型，参见 set</td></tr></tbody></table><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><h3 id="update-更新记录"><a href="#update-更新记录" class="headerlink" title="update - 更新记录"></a>update - 更新记录</h3><blockquote><p>update(values, options) -&gt; Promise.&lt;Array.&lt;affectedCount, affectedRows&gt;&gt;</p></blockquote><p>更新所匹配的多个实例。promise 回调中会返回一个包含一个或两个元素的数组，第一个元素始终表示受影响的行数，<br>第二个元素表示实际影响的行（仅 Postgreoptions.returning 为 true 时受支持）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> UserModel.update(&#123; <span class="attr">name</span>: <span class="string">'guoxiaoxiao'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, &#123; <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>values</td><td><code>Object</code></td><td>无</td></tr><tr><td>options</td><td><code>Object</code></td><td>无</td></tr><tr><td>options.where</td><td><code>Object</code></td><td>筛选条件</td></tr><tr><td>[options.fields]</td><td><code>Array</code></td><td>要更新字段，默认为全部</td></tr><tr><td>[options.validate=true]</td><td><code>Boolean</code></td><td>更新每条记录前进行验证</td></tr><tr><td>[options.hooks=true]</td><td><code>Boolean</code></td><td>在执行更新前/后创建钩子</td></tr><tr><td>[options.individualHooks=false]</td><td><code>Boolean</code></td><td>在执行更新前/后为每个实例创建钩子</td></tr><tr><td>[options.sideEffects=true]</td><td><code>Boolean</code></td><td>是否更新任何虚拟设置</td></tr><tr><td>[options.returning=false]</td><td><code>Boolean</code></td><td>返回受影响的行 (仅适用于 postgres)</td></tr><tr><td>[options.limit]</td><td><code>Number</code></td><td>要更新的行数 (仅适用于 mysql 和 mariadb)</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr><tr><td>[options.silent=false]</td><td><code>Boolean</code></td><td>如果为true，updatedAt字段将不会更新</td></tr></tbody></table><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>详见 <a href="https://gershonv.github.io/2019/01/03/sequelize-query/">Sequelize - 使用 model 查询数据</a></p><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><h3 id="destroy-删除记录"><a href="#destroy-删除记录" class="headerlink" title="destroy - 删除记录"></a>destroy - 删除记录</h3><blockquote><p>destroy(options) -&gt; Promise.<integer></integer></p></blockquote><p>删除多个实例，或设置 <code>deletedAt</code> 的时间戳为当前时间（当启用 <code>paranoid</code> 时）</p><p>执行成功后返回被删除的行数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteRowsCount = <span class="keyword">await</span> UserModel.destroy(&#123;</span><br><span class="line">  where: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(deleteRowsCount) <span class="comment">// 执行成功后返回被删除的行数</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td>Object</td></tr><tr><td>[options.where]</td><td><code>Object</code></td><td>筛选条件</td></tr><tr><td>[options.hooks=true]</td><td><code>Boolean</code></td><td>在执行前/后创建钩子</td></tr><tr><td>[options.individualHooks=false]</td><td><code>Boolean</code></td><td>在执行前/后为每个实例创建钩子</td></tr><tr><td>[options.limit]</td><td><code>Number</code></td><td>要删除的行数</td></tr><tr><td>[options.force=false]</td><td><code>Boolean</code></td><td>删除而不是设置 deletedAt 为当前时间戳 (仅启用 paranoid 时适用)</td></tr><tr><td>[options.truncate=false]</td><td><code>Boolean</code></td><td>设置为true时，会使用TRUNCATE代替DELETE FROM，这时会忽略where和limit选项</td></tr><tr><td>[options.cascade=false]</td><td><code>Boolean</code></td><td>仅适用于连接查询时的TRUNCATE操作，截断所有外键匹配的表</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr></tbody></table><h2 id="findOrCreate-查找或创建"><a href="#findOrCreate-查找或创建" class="headerlink" title="findOrCreate - 查找或创建"></a>findOrCreate - 查找或创建</h2><blockquote><p>findOrCreate(options) -&gt; Promise.&lt;Instance, created&gt;</p></blockquote><p>查找一行记录，如果不存在则创建实例并保存到数据库中</p><p>在这个方法中，如果options对象中没有传入事务，那么会在内部自动创建一个新的事务，以防止在创建完成之前有新匹配查询进入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// findOrCreate 返回一个包含已找到或创建的对象的数组，找到或创建的对象和一个布尔值</span></span><br><span class="line">UserModel.findOrCreate(&#123;</span><br><span class="line">  defaults: &#123; <span class="attr">name</span>: <span class="string">'guoxiaoxiao'</span> &#125;,</span><br><span class="line">  where: &#123; <span class="attr">name</span>: <span class="string">'guoxiaoxiao'</span> &#125;</span><br><span class="line">&#125;).spread(<span class="function">(<span class="params">user, created</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user.name, created)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的例子中，".spread" 将数组分成2部分，并将它们作为参数传递给回调函数，在这种情况下将它们视为 "user" 和 "created" 。</span></span><br><span class="line"><span class="comment">// 所以“user”将是返回数组的索引0的对象，并且 "created" 将等于 "true"。）</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td><code>Object</code></td><td>无</td></tr><tr><td>options.where</td><td><code>Object</code></td><td>查询属性</td></tr><tr><td>[options.defaults]</td><td><code>Object</code></td><td>用于创建新实例的默认值</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr></tbody></table><h2 id="findCreateFind-查找或创建"><a href="#findCreateFind-查找或创建" class="headerlink" title="findCreateFind - 查找或创建"></a>findCreateFind - 查找或创建</h2><blockquote><p>findCreateFind(options) -&gt; Promise.&lt;Instance, created&gt;</p></blockquote><p>效率更高的 <code>findOrCreate</code>，不会在事务中执行。首先会尝试进行查询，如果为空则尝试创建，如果是唯一约束则尝试再次查找。</p><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>options</td><td><code>Object</code></td><td>无</td></tr><tr><td>options.where</td><td><code>Object</code></td><td>查询属性</td></tr><tr><td>[options.defaults]</td><td><code>Object</code></td><td>用于创建新实例的默认值</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr></tbody></table><p>ps: <code>findOrInitialize</code>  - 查找或初始化: 查找一行记录，如果不存在则创建（不保存）实例</p><h2 id="insertOrUpdate-更新或创建"><a href="#insertOrUpdate-更新或创建" class="headerlink" title="insertOrUpdate - 更新或创建"></a>insertOrUpdate - 更新或创建</h2><blockquote><p>upsert(values, [options]) -&gt; Promise.<created></created></p></blockquote><p>创建或更新一行。如果匹配到主键或唯一约束键时会进行更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isCreate = <span class="keyword">await</span> TaskModel.insertOrUpdate(&#123; <span class="attr">title</span>: <span class="string">'11'</span>, <span class="attr">content</span>: <span class="string">'adfadf'</span> &#125;)</span><br><span class="line"><span class="comment">// isCreate true 创建成功 false 修改成功~</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>values</td><td><code>Object</code></td><td>无</td></tr><tr><td>[options]</td><td><code>Object</code></td><td>无</td></tr><tr><td>[options.validate=true]</td><td><code>Boolean</code></td><td>插入前进行验证</td></tr><tr><td>[options.fields=Object.keys(this.attributes)]</td><td><code>Array</code></td><td>要插入/更新字段。默认全部</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr></tbody></table><h2 id="bulkCreate-创建多条记录"><a href="#bulkCreate-创建多条记录" class="headerlink" title="bulkCreate - 创建多条记录"></a>bulkCreate - 创建多条记录</h2><blockquote><p>bulkCreate(records, [options]) -&gt; Promise.&lt;Array.<instance>&gt;</instance></p></blockquote><p>批量创建并保存多个实例。</p><p>处理成功后，会在回调函数中返回一个包含多个实例的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> users = <span class="keyword">await</span> UserModel.bulkCreate([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'guo'</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'guo2'</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">sex</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'guo3'</span>, <span class="attr">age</span>: <span class="number">32</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>records</td><td><code>Array</code></td><td>要创建实例的对象（键/值 对）列表</td></tr><tr><td>[options]</td><td><code>Object</code></td><td>无</td></tr><tr><td>[options.fields]</td><td><code>Array</code></td><td>要插入的字段。默认全部</td></tr><tr><td>[options.validate=true]</td><td><code>Boolean</code></td><td>插入每条记录前进行验证</td></tr><tr><td>[options.hooks=true]</td><td><code>Boolean</code></td><td>在执行前/后创建钩子</td></tr><tr><td>[options.individualHooks=false]</td><td><code>Boolean</code></td><td>在执行前/后为每个实例创建钩子</td></tr><tr><td>[options.ignoreDuplicates=false]</td><td><code>Boolean</code></td><td>忽略重复主键（Postgres不支持）</td></tr><tr><td>[options.updateOnDuplicate]</td><td><code>Array</code></td><td>如果行键已存在是否更新（mysql &amp; mariadb支持）. 默认为更新</td></tr><tr><td>[options.transaction]</td><td><code>Transaction</code></td><td>在事务中执行查询</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Create&quot;&gt;&lt;a href=&quot;#Create&quot; class=&quot;headerlink&quot; title=&quot;Create&quot;&gt;&lt;/a&gt;Create&lt;/h2&gt;&lt;h3 id=&quot;create-创建保存新实例&quot;&gt;&lt;a href=&quot;#create-创建保存新实例&quot; class=&quot;headerlink&quot; title=&quot;create - 创建保存新实例&quot;&gt;&lt;/a&gt;create - 创建保存新实例&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;create(values, [options]) -&amp;gt; Promise.&lt;instance&gt;&lt;/instance&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建一个新的模型实例，并进行保存。与 &lt;code&gt;build()&lt;/code&gt;方法不同的是，此方法除创建新实例外，还会将其保存到对应数据库表中。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 直接操作db&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; UserModel.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;guodada&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  score: &lt;span class=&quot;number&quot;&gt;99&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - 使用 model 查询数据</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-query/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-query/</id>
    <published>2019-01-03T06:56:03.000Z</published>
    <updated>2019-01-10T15:51:16.343Z</updated>
    
    <content type="html"><![CDATA[<p><code>Sequelize</code> 中有两种查询：使用 <code>Model</code>（模型）中的方法查询和使用 <code>sequelize.query()</code> 进行基于 SQL 语句的原始查询。</p><a id="more"></a><p>下面是事先创建好的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line">+----+----------+------+------+-------+</span><br><span class="line">| id | name     | age  | sex  | score |</span><br><span class="line">+----+----------+------+------+-------+</span><br><span class="line">|  1 | guodada0 |   15 |    0 |    60 |</span><br><span class="line">|  2 | guodada1 |   16 |    1 |    80 |</span><br><span class="line">|  3 | guodada2 |   17 |    0 |    55 |</span><br><span class="line">|  4 | guodada3 |   18 |    1 |    87 |</span><br><span class="line">|  5 | guodada4 |   19 |    0 |    73 |</span><br><span class="line">|  6 | guodada5 |   20 |    1 |    22 |</span><br><span class="line">+----+----------+------+------+-------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>定义的 model</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    name: Sequelize.STRING,</span><br><span class="line">    age: Sequelize.INTEGER,</span><br><span class="line">    sex: Sequelize.INTEGER,</span><br><span class="line">    score: Sequelize.INTEGER</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="查询多项-findAll"><a href="#查询多项-findAll" class="headerlink" title="查询多项 (findAll)"></a>查询多项 (findAll)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAll() <span class="comment">// result 将是所有 UserModel 实例的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.all()</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h3 id="限制字段"><a href="#限制字段" class="headerlink" title="限制字段"></a>限制字段</h3><p>查询时，如果只需要查询模型的部分属性，可以在通过在查询选项中指定 <code>attributes</code> 实现。该选项是一个数组参数，在数组中指定要查询的属性即可，这些要查询的属性就表示要在数据库查询的字段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="字段重命名"><a href="#字段重命名" class="headerlink" title="字段重命名"></a>字段重命名</h3><p>查询属性（字段）可以通过传入一个嵌套数据进行重命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Model.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'foo'</span>, [<span class="string">'bar'</span>, <span class="string">'baz'</span>]]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT foo, bar AS baz ...</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  attributes: [[<span class="string">'name'</span>, <span class="string">'username'</span>], <span class="string">'age'</span>, <span class="string">'score'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#123;"username":"guodada0","age":15,"score":60&#125;,&#123;"username":"guodada1","age":16,"score":80&#125; ...]</span></span><br><span class="line">ctx.body = results</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问查询结果 通过 instance.get('xxx')</span></span><br><span class="line"><span class="built_in">console</span>.log(results[<span class="number">0</span>][<span class="string">'username'</span>], results[<span class="number">0</span>].get(<span class="string">'username'</span>)) <span class="comment">// undefind, 'guodada0'</span></span><br></pre></td></tr></table></figure><h3 id="指定筛选条件-where"><a href="#指定筛选条件-where" class="headerlink" title="指定筛选条件 (where)"></a>指定筛选条件 (where)</h3><p>在模型的 <code>find/finAll</code> 或 <code>updates/destroys</code> 操作中，可以指定一个 <code>where</code> 选项以指定筛选条件，</p><p><code>where</code> 是一个包含属性/值对对象，sequelize 会根据此对象生产查询语句的筛选条件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">'guodada3'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;) <span class="comment">//  SELECT * FROM `users` AS `user` WHERE `user`.`age` = 18 AND `user`.`name` = 'guodada3';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> UserModel.destroy(&#123;</span><br><span class="line">  where: &#123; <span class="attr">name</span>: <span class="string">'guodada3'</span> &#125;</span><br><span class="line">&#125;) <span class="comment">// DELETE FROM `users` WHERE name = 'guodada3'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h4 id="复合过滤-OR-NOT-查询"><a href="#复合过滤-OR-NOT-查询" class="headerlink" title="复合过滤 / OR / NOT 查询"></a>复合过滤 / OR / NOT 查询</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$and: &#123;<span class="attr">a</span>: <span class="number">5</span>&#125;           <span class="comment">// AND (a = 5)</span></span><br><span class="line">$or: [&#123;<span class="attr">a</span>: <span class="number">5</span>&#125;, &#123;<span class="attr">a</span>: <span class="number">6</span>&#125;]  <span class="comment">// (a = 5 OR a = 6)</span></span><br><span class="line">$gt: <span class="number">6</span>,                <span class="comment">// &gt; 6</span></span><br><span class="line">$gte: <span class="number">6</span>,               <span class="comment">// &gt;= 6</span></span><br><span class="line">$lt: <span class="number">10</span>,               <span class="comment">// &lt; 10</span></span><br><span class="line">$lte: <span class="number">10</span>,              <span class="comment">// &lt;= 10</span></span><br><span class="line">$ne: <span class="number">20</span>,               <span class="comment">// != 20</span></span><br><span class="line">$not: <span class="literal">true</span>,            <span class="comment">// IS NOT TRUE</span></span><br><span class="line">$between: [<span class="number">6</span>, <span class="number">10</span>],     <span class="comment">// BETWEEN 6 AND 10</span></span><br><span class="line">$notBetween: [<span class="number">11</span>, <span class="number">15</span>], <span class="comment">// NOT BETWEEN 11 AND 15</span></span><br><span class="line">$<span class="keyword">in</span>: [<span class="number">1</span>, <span class="number">2</span>],           <span class="comment">// IN [1, 2]</span></span><br><span class="line">$notIn: [<span class="number">1</span>, <span class="number">2</span>],        <span class="comment">// NOT IN [1, 2]</span></span><br><span class="line">$like: <span class="string">'%hat'</span>,         <span class="comment">// LIKE '%hat'</span></span><br><span class="line">$notLike: <span class="string">'%hat'</span>       <span class="comment">// NOT LIKE '%hat'</span></span><br><span class="line">$iLike: <span class="string">'%hat'</span>         <span class="comment">// ILIKE '%hat' (case insensitive) (PG only)</span></span><br><span class="line">$notILike: <span class="string">'%hat'</span>      <span class="comment">// NOT ILIKE '%hat'  (PG only)</span></span><br><span class="line">$like: &#123; <span class="attr">$any</span>: [<span class="string">'cat'</span>, <span class="string">'hat'</span>]&#125;</span><br><span class="line">                       <span class="comment">// LIKE ANY ARRAY['cat', 'hat'] - also works for iLike and notLike</span></span><br><span class="line">$overlap: [<span class="number">1</span>, <span class="number">2</span>]       <span class="comment">// &amp;&amp; [1, 2] (PG array overlap operator)</span></span><br><span class="line">$contains: [<span class="number">1</span>, <span class="number">2</span>]      <span class="comment">// @&gt; [1, 2] (PG array contains operator)</span></span><br><span class="line">$contained: [<span class="number">1</span>, <span class="number">2</span>]     <span class="comment">// &lt;@ [1, 2] (PG array contained by operator)</span></span><br><span class="line">$any: [<span class="number">2</span>,<span class="number">3</span>]            <span class="comment">// ANY ARRAY[2, 3]::INTEGER (PG only)</span></span><br><span class="line"></span><br><span class="line">$col: <span class="string">'user.organization_id'</span> <span class="comment">// = "user"."organization_id", with dialect specific column identifiers, PG in this example</span></span><br></pre></td></tr></table></figure><ul><li><code>$like</code>: 模糊查询 <code>%锅</code> 以 <code>锅</code> 结尾的。 <code>%锅%</code> 包含 <code>锅</code> 的</li><li><code>$in: [10, 11]</code> - 值为 10 或 11</li></ul><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SELECT * FROM `users` AS `user` WHERE `user`.`age` &gt; 18 AND `user`.`name` LIKE '%5';</span></span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: &#123; <span class="attr">$gt</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    name: &#123; <span class="attr">$like</span>: <span class="string">'%5'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT * FROM `users` AS `user` WHERE (`user`.`age` &lt; 1000 OR `user`.`age` IS NULL) AND `user`.`name` LIKE '%5';</span></span><br><span class="line"><span class="keyword">const</span> results = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: &#123;</span><br><span class="line">      $<span class="keyword">in</span>: [<span class="number">15</span>, <span class="number">20</span>],</span><br><span class="line">      $or: &#123; <span class="attr">$lt</span>: <span class="number">1000</span>, <span class="attr">$eq</span>: <span class="literal">null</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#123; <span class="attr">$like</span>: <span class="string">'%5'</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="分页与限制返回结果数"><a href="#分页与限制返回结果数" class="headerlink" title="分页与限制返回结果数"></a>分页与限制返回结果数</h3><p>查询进，我们可以使用 <code>limit</code> 限制返回结果条数，并可以通过 <code>offset</code> 来设置查询偏移（跳过）量，通过这两个属性我们可以实现分页查询的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 10 条数据（实例）</span></span><br><span class="line">UserModel.findAll(&#123; <span class="attr">limit</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过 8 条数据（实例）</span></span><br><span class="line">UserModel.findAll(&#123; <span class="attr">offset</span>: <span class="number">8</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳过 5 条数据并获取其后的 5 条数据（实例）</span></span><br><span class="line">UserModel.findAll(&#123; <span class="attr">offset</span>: <span class="number">5</span>, <span class="attr">limit</span>: <span class="number">5</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><code>order</code> 选项用于查询结果的排序数据。排序时应该传入一个包含属性-排序方向的元组/数组，以保证正确的转义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  order: sequelize.literal(<span class="string">'name DESC'</span>) <span class="comment">// 降序</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo2</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAll(&#123;</span><br><span class="line">  order: [sequelize.literal(<span class="string">'score DESC'</span>), sequelize.literal(<span class="string">'name DESC'</span>)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按 max(age) DESC 排序</span></span><br><span class="line">[sequelize.fn(<span class="string">'max'</span>, sequelize.col(<span class="string">'age'</span>)), <span class="string">'DESC'</span>],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按相关联的User 模型的 name 属性排序</span></span><br><span class="line">[ArticleModel, <span class="string">'name'</span>, <span class="string">'DESC'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="查询单项"><a href="#查询单项" class="headerlink" title="查询单项"></a>查询单项</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.find(&#123;</span><br><span class="line">  where: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result.name, result.get(<span class="string">'name'</span>)) <span class="comment">// guodada0 guodada0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findOne</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findOne(&#123;</span><br><span class="line">  where: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result.name, result.get(<span class="string">'name'</span>)) <span class="comment">// guodada0 guodada0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findById</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findById(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(result.name, result.get(<span class="string">'name'</span>)) <span class="comment">// guodada0 guodada0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findByPk</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findByPk(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h2 id="查找并创建-findOrCreate"><a href="#查找并创建-findOrCreate" class="headerlink" title="查找并创建 (findOrCreate)"></a>查找并创建 (findOrCreate)</h2><p><code>findOrCreate</code> 可用于检测一个不确定是否存在的元素，如果存在则返回记录，不存在时会使用提供的默认值新建记录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">UserModel.findOrCreate(&#123;</span><br><span class="line">  where: &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;,</span><br><span class="line">  defaults: &#123;</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    sex: <span class="number">1</span>,</span><br><span class="line">    score: <span class="number">99</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).spread(<span class="function">(<span class="params">user, created</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(user.get(<span class="string">'name'</span>)) <span class="comment">// guodada</span></span><br><span class="line">  <span class="built_in">console</span>.log(created) <span class="comment">// 是否创建</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT INTO `users` (`id`,`name`,`age`,`sex`,`score`)</span></span><br><span class="line"><span class="comment">// VALUES (DEFAULT,'guodada',23,1,99);</span></span><br></pre></td></tr></table></figure><h2 id="分页查询-findAndCountAll"><a href="#分页查询-findAndCountAll" class="headerlink" title="分页查询 (findAndCountAll)"></a>分页查询 (findAndCountAll)</h2><p><code>findAndCountAll</code> - 结合了 <code>findAll</code> 和 <code>count</code></p><p>处理程序成功将始终接收具有两个属性的对象：</p><ul><li><code>count</code> - 一个整数，总数记录匹配 <code>where</code> 语句和关联的其它过滤器</li><li><code>rows</code> - 一个数组对象，记录在 <code>limit</code> 和 <code>offset</code> 范围内匹配 <code>where</code> 语句和关联的其它过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAndCountAll(&#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    age: &#123;</span><br><span class="line">      $gte: <span class="number">18</span> <span class="comment">// 大于等于18</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  offset: <span class="number">1</span>, <span class="comment">// 偏移量，可以理解为当前页数</span></span><br><span class="line">  limit: <span class="number">15</span> <span class="comment">// 可以理解为 pageSize , 一页有多少数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// count 记录数 | row 记录</span></span><br><span class="line"><span class="built_in">console</span>.log(result.count, result.rows[<span class="number">0</span>].get())</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT * FROM `users` AS `user` WHERE `user`.`age` &gt;= 18 LIMIT 1, 15;</span></span><br></pre></td></tr></table></figure><h3 id="支持-include"><a href="#支持-include" class="headerlink" title="支持 include"></a>支持 include</h3><p>它支持 <code>include</code>。 只有标记为 <code>required</code> 的 <code>include</code> 将被添加到计数部分：</p><p>假设你想找 <code>User</code> 中 发布过 <code>article</code> 的记录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    name: Sequelize.STRING,</span><br><span class="line">    age: Sequelize.INTEGER,</span><br><span class="line">    sex: Sequelize.INTEGER,</span><br><span class="line">    score: Sequelize.INTEGER</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ArticleModel = sequelize.define(<span class="string">'article'</span>, &#123;</span><br><span class="line">  title: Sequelize.STRING,</span><br><span class="line">  content: Sequelize.STRING</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">UserModel.hasMany(ArticleModel) <span class="comment">// 关联模型</span></span><br><span class="line">ArticleModel.belongsTo(UserModel, &#123;</span><br><span class="line">  constraints: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAndCountAll(&#123;</span><br><span class="line">  include: [&#123; <span class="attr">model</span>: ArticleModel, <span class="attr">required</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">  offset: <span class="number">1</span>,</span><br><span class="line">  limit: <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.count) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>result.row</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"count"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"rows"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"guodada0"</span>,</span><br><span class="line">      <span class="attr">"age"</span>: <span class="number">15</span>,</span><br><span class="line">      <span class="attr">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"score"</span>: <span class="number">60</span>,</span><br><span class="line">      <span class="attr">"article"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"title1"</span>,</span><br><span class="line">        <span class="attr">"content"</span>: <span class="string">"aaa"</span>,</span><br><span class="line">        <span class="attr">"userId"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"createdAt"</span>: <span class="string">"2019-01-07T08:51:13.000Z"</span>,</span><br><span class="line">        <span class="attr">"updatedAt"</span>: <span class="string">"2019-01-07T08:51:13.000Z"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 <code>ArticleModel</code> 的 <code>include</code> 有 <code>required</code> 设置，这将导致内部连接，并且只有具有 <code>ArticleModel</code> 的用户将被计数。<br>如果我们从 <code>include</code> 中删除 <code>required</code>，那么有和没有 <code>ArticleModel</code> 的用户都将被计数。<br>在 <code>include</code> 中添加一个 <code>where</code> 语句会自动使它成为 required：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAndCountAll(&#123;</span><br><span class="line">  include: [&#123; <span class="attr">model</span>: ArticleModel &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.count) <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> UserModel.findAndCountAll(&#123;</span><br><span class="line">  include: [&#123; <span class="attr">model</span>: ArticleModel, <span class="attr">where</span>: &#123; <span class="attr">userId</span>: <span class="number">2</span> &#125; &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.count) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><h3 id="SQL-中的分组查询"><a href="#SQL-中的分组查询" class="headerlink" title="SQL 中的分组查询"></a>SQL 中的分组查询</h3><p><a href="https://gershonv.github.io/2018/12/31/mysql-聚合函数/">mysql-聚合函数</a></p><p><code>SQL</code> 查询中，通 <code>GROUP BY</code> 语名实现分组查询。GROUP BY 子句要和聚合函数配合使用才能完成分组查询，在 <code>SELECT</code> 查询的字段中，如果没有使用聚合函数就必须出现在 ORDER BY 子句中。分组查询后，查询结果为一个或多个列分组后的结果集。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名, 聚合函数(列名)</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 列名 operator value</span><br><span class="line">GROUP BY 列名</span><br><span class="line">[HAVING 条件表达式] [WITH ROLLUP]</span><br></pre></td></tr></table></figure><p>在以上语句中：</p><ul><li>聚合函数 - 分组查询通常要与聚合函数一起使用，聚合函数包括：<ul><li><code>COUNT()</code>-用于统计记录条数</li><li><code>SUM()</code>-用于计算字段的值的总和</li><li><code>AVG()</code>-用于计算字段的值的平均值</li><li><code>MAX</code>-用于查找查询字段的最大值</li><li><code>MIX</code>-用于查找查询字段的最小值</li></ul></li><li><code>GROUP BY</code> 子名-用于指定分组的字段</li><li><code>HAVING</code> 子名-用于过滤分组结果，符合条件表达式的结果将会被显示</li><li><code>WITH ROLLUP</code> 子名-用于指定追加一条记录，用于汇总前面的数据</li></ul><h3 id="sum-field-options"><a href="#sum-field-options" class="headerlink" title="sum(field, [options])"></a>sum(field, [options])</h3><p><code>Sequelize</code> 提供了聚合函数，可以直接对模型进行聚合查询：</p><ul><li><code>aggregate(field, aggregateFunction, [options])</code>-通过指定的聚合函数进行查询</li><li><code>sum(field, [options])</code>-求和</li><li><code>count(options: Object)</code>-统计查询结果数</li><li><code>max(field, [options])</code>-查询最大值</li><li><code>min(field, [options])</code>-查询最小值</li></ul><p>以上这些聚合函数中，可以通过 <code>options.attributes</code>、<code>options.attributes</code> 属性指定分组相关字段，并可以通过 <code>options.having</code> 指定过滤条件，但没有直接指定 <code>WITH ROLLUP</code> 子句的参数。</p><p>使用<code>.sum()</code>查询订单数量大于 1 的用户订单额：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> OrderModel.sum(<span class="string">'price'</span>, &#123;</span><br><span class="line">  attributes: [<span class="string">'name'</span>, [sequelize.fn(<span class="string">'COUNT'</span>, sequelize.col(<span class="string">'price'</span>)), <span class="string">'sum'</span>]],</span><br><span class="line">  group: <span class="string">'name'</span>,</span><br><span class="line">  plain: <span class="literal">false</span>, <span class="comment">// 执行的查询类型，sequelize会根据这个类型对返回结果格式化。</span></span><br><span class="line">  having: &#123;</span><br><span class="line">    $and: [sequelize.literal(<span class="string">'COUNT(name) &gt; 1'</span>)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT `name`, SUM(`price`) AS `sum` FROM `orders` AS `order` GROUP BY `name` HAVING (COUNT(name) &gt; 1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ &#123; name: 'guo', sum: '44' &#125;, &#123; name: 'guo2', sum: '22' &#125; ]</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://itbilu.com/nodejs/npm/VkYIaRPz-.html#api-instance-fn" target="_blank" rel="noopener">plain</a>:执行的查询类型，<code>sequelize</code> 会根据这个类型对返回结果格式化</li><li><a href="https://itbilu.com/nodejs/npm/N1pPjUdMf.html#multi" target="_blank" rel="noopener">sequelize.literal</a>: 创建一个字面量对象，该值不会转义</li></ul><p>除直接使用聚合函数外，也可以在 <code>findAll()</code>等方法中，指定聚合查询相关参数实现聚合查询。<br>查询时，同样可以通过通过 <code>options.attributes</code>、<code>options.attributes</code> 属性指定分组相关字段，并可以通过 options.having 指定过滤条件。与直接使用聚合函数查询不一样，通过参数构建聚合查询时，<br>要以数组或对象形式设置 <code>options.attributes</code> 参数中的聚合字段，并需要通过 <code>sequelize.fn()</code>方法传入聚合函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> OrderModel.findAll(&#123;</span><br><span class="line">  attributes: [<span class="string">'name'</span>, [sequelize.fn(<span class="string">'SUM'</span>, sequelize.col(<span class="string">'price'</span>)), <span class="string">'sum'</span>]],</span><br><span class="line">  group: <span class="string">'name'</span>,</span><br><span class="line">  having: &#123;</span><br><span class="line">    $and: [sequelize.literal(<span class="string">'COUNT(name) &gt; 1'</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  raw: <span class="literal">true</span> <span class="comment">// row 对查询结果进行格式化， false 返回 instance</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>sequelize.fn()</code> - 函数调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sequelize.fn(fn, args) -&gt; Sequelize.fn</span><br></pre></td></tr></table></figure><p>创建于一个相当于数据库函数的对象。该函数可用于搜索查询的 <code>where</code> 和 <code>order</code> 部分，以及做为列定义的默认值。如果想在列中引用你定义的函数，就要使用 <code>sequelize.col</code>，这样列就能正确的解析，而不是解析为字符串。<br>如，将 <code>username</code> 字段值解析为大写形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">instance.updateAttributes(&#123;</span><br><span class="line">  username: self.sequelize.fn(<span class="string">'upper'</span>, self.sequelize.col(<span class="string">'username'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>sequelize.col()</code> - 列对象</p><p>创建一个相当于数据库列的对象。这个方法经常结合 sequelize.fn 使用，它可以保证将列名正确的传递给该方法，而不是经过转义。</p><h3 id="count-options-Object"><a href="#count-options-Object" class="headerlink" title="count(options: Object)"></a>count(options: Object)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> OrderModel.count(&#123;</span><br><span class="line">  where: &#123; <span class="attr">price</span>: <span class="number">24</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> OrderModel.max(<span class="string">'price'</span>, &#123;</span><br><span class="line">  where: &#123;</span><br><span class="line">    price: &#123; <span class="attr">$lt</span>: <span class="number">23</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="原始查询"><a href="#原始查询" class="headerlink" title="原始查询"></a>原始查询</h2><p><a href="https://itbilu.com/nodejs/npm/VJIR1CjMb.html#raw-query" target="_blank" rel="noopener">原始查询</a></p><p>有时会使用原始查询或执行已准备好的 SQL 语句，这时可以用 <code>Sequlize</code> 提供的工具函数 <code>sequelize.query</code> 来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> sequelize.query(<span class="string">'SELECT * FROM users'</span>, &#123; <span class="attr">model</span>: UserModel &#125;)</span><br></pre></td></tr></table></figure><h3 id="查询参数替换"><a href="#查询参数替换" class="headerlink" title="查询参数替换"></a>查询参数替换</h3><p>原始查询中有两种替换查询参数的方法，以:开头的参数的形式替换或以不命名以?替换。在选项对象中传递参数：</p><ul><li>如果传递一个数组，? 会按数组的顺序被依次替换</li><li>巢传递一个对象，:key 将会用对象的键替换。如果对象中未找到指定键，则会引发异常（反之亦然）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .query(<span class="string">'SELECT * FROM projects WHERE status = ?'</span>, &#123; <span class="attr">replacements</span>: [<span class="string">'active'</span>], <span class="attr">type</span>: sequelize.QueryTypes.SELECT &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(projects)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">  .query(<span class="string">'SELECT * FROM projects WHERE status = :status '</span>, &#123;</span><br><span class="line">    replacements: &#123; <span class="attr">status</span>: <span class="string">'active'</span> &#125;,</span><br><span class="line">    type: sequelize.QueryTypes.SELECT</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(projects)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h3><p>参数绑定类似于参数替换。尤其是参数替换会在发送到数据库前被 sequelize 转义和替换，而参数绑定会被发送到 SQL 查询文本外。</p><p>只有 <code>SQLite</code> 和 <code>PostgreSQL</code> 支持参数绑定，其它类型数据库都会将其插入到 <code>SQL</code> 查询，并以相同的方式进行参数替换。参数绑定可以使用$1、$2……或\$key 的形式：</p><ul><li>如果传入的是数组，\$1 会绑定到数组听第 1 个参数 (bind[0])</li><li>如果传入一个对象，$key 会绑定到 <code>object[&#39;key&#39;]</code>。每个 key 必须以非数字的字符开始。$1 不是个有效的 key，尽管 object[‘1’] 是存在的。</li><li>在使用\$$时，不会被转义而是将$做为一个字面量使用。</li></ul><p>传入的数组或对象必须包含所有绑定值，否则 <code>Sequelize</code> 会抛出异常。这同样适用于数据库可能会忽略绑定参数的情况下。</p><p>数据库可能会做进一步限制，绑定参数不能使用数据库关键字，也不能是表或列名，它在引用文本或数据时也可能被忽略。在 PostgreSQL 中，如果不能从上下文\$1::varchar 中推断类型，那么也需要进行类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .query(<span class="string">'SELECT *, "text with literal $$1 and literal $$status" as t FROM projects WHERE status = $1'</span>, &#123;</span><br><span class="line">    bind: [<span class="string">'active'</span>],</span><br><span class="line">    type: sequelize.QueryTypes.SELECT</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(projects)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">  .query(<span class="string">'SELECT *, "text with literal $$1 and literal $$status" as t FROM projects WHERE status = $status'</span>, &#123;</span><br><span class="line">    bind: &#123; <span class="attr">status</span>: <span class="string">'active'</span> &#125;,</span><br><span class="line">    type: sequelize.QueryTypes.SELECT</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(projects)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Sequelize&lt;/code&gt; 中有两种查询：使用 &lt;code&gt;Model&lt;/code&gt;（模型）中的方法查询和使用 &lt;code&gt;sequelize.query()&lt;/code&gt; 进行基于 SQL 语句的原始查询。&lt;/p&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - associations</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-associations/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-associations/</id>
    <published>2019-01-03T06:36:03.000Z</published>
    <updated>2019-01-10T15:48:38.719Z</updated>
    
    <content type="html"><![CDATA[<p>本部分描述了 Sequelize 中的各种关联类型。 Sequelize 中有四种类型的关联</p><ul><li><code>BelongsTo</code></li><li><code>HasOne</code></li><li><code>HasMany</code></li><li><code>BelongsToMany</code></li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Source-amp-Target"><a href="#Source-amp-Target" class="headerlink" title="Source &amp; Target"></a>Source &amp; Target</h3><p>我们首先从一个基本概念开始，你将会在大多数关联中使用 <code>source</code> 和 <code>target</code> 模型。 假设您正试图在两个模型之间添加关联。 这里我们在 <code>users</code> 和 <code>articles</code> 之间添加一个 <code>hasOne</code> 关联。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    name: Sequelize.STRING,</span><br><span class="line">    age: Sequelize.INTEGER</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ArticleModel = sequelize.define(<span class="string">'article'</span>, &#123;</span><br><span class="line">  title: Sequelize.STRING,</span><br><span class="line">  content: Sequelize.STRING</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">UserModel.hasOne(ArticleModel)</span><br></pre></td></tr></table></figure><a id="more"></a><p>相当于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>), <span class="string">`age`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`articles`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  <span class="string">`content`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`userId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  FOREIGN <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`users`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">  <span class="keyword">SET</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p><code>UserModel</code>（函数被调用的模型）是 <code>source</code> 。 <code>ArticleModel</code> 模型（作为参数传递的模型）是 <code>target</code> 。</p><p>即 <code>articles</code> 表的 <code>userId</code> 依赖于 <code>users</code> 表的 <code>id</code></p><p>此时删除 <code>users</code> 表（<code>source</code>）, 就会报错了 Cannot drop table ‘users’ referenced by a foreign key constraint ‘articles_ibfk_1’ on table ‘articles’.</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>当您在模型中创建关联时，会自动创建带约束的外键引用。 下面是设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TaskModel = sequelize.define(<span class="string">'task'</span>, &#123; <span class="attr">title</span>: Sequelize.STRING &#125;)</span><br><span class="line"><span class="keyword">const</span> UserModel = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">name</span>: Sequelize.STRING &#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">UserModel.hasMany(TaskModel) <span class="comment">// 将会添加 userId 到 TaskModel</span></span><br><span class="line">TaskModel.belongsTo(UserModel) <span class="comment">// 也将会添加 userId 到 TaskModel</span></span><br></pre></td></tr></table></figure><p>将生成以下 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`tasks`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`userId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`users`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">SET</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p><code>tasks</code> 和 <code>users</code> 模型之间的关系通过在 <code>tasks</code> 表上注入 userId 外键，并将其标记为对 <code>users</code> 表的引用。<br>默认情况下，如果引用的用户被删除，<code>userId</code> 将被设置为 <code>NULL</code>，如果更新了 <code>userId</code>，则更新 <code>userId</code>。 这些选项可以通过将 <code>onUpdate</code> 和 <code>onDelete</code> 选项传递给关联调用来覆盖。<br>验证选项是<code>RESTRICT</code>, <code>CASCADE</code>, <code>NO ACTION</code>, <code>SET DEFAULT</code>, <code>SET NULL</code>。</p><p>对于 <code>1:1</code> 和 <code>1:m</code> 关联，默认选项是 <code>SET NULL</code> 用于删除，<code>CASCADE</code> 用于更新。<br>对于 <code>n:m</code>，两者的默认值是 <code>CASCADE</code>。 这意味着，如果您从 <code>n:m</code> 关联的一侧删除或更新一行，则引用该行的连接表中的所有行也将被删除或更新。</p><h4 id="循环依赖-amp-禁用约束"><a href="#循环依赖-amp-禁用约束" class="headerlink" title="循环依赖 &amp; 禁用约束"></a>循环依赖 &amp; 禁用约束</h4><p>在表之间添加约束意味着当使用 <code>sequelize.sync</code> 时，表必须以特定顺序在数据库中创建表。<br>如果 <code>Task</code> 具有对 <code>User</code> 的引用，<code>users</code> 表必须在创建 <code>tasks</code> 表之前创建。<br>这有时会导致循环引用，那么 <code>sequelize</code> 将无法找到要同步的顺序。<br>想象一下文档和版本的场景。 一个文档可以有多个版本，并且为了方便起见，文档引用了它的当前版本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Document = sequelize.define(<span class="string">'document'</span>, &#123; <span class="attr">author</span>: Sequelize.STRING &#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Version = sequelize.define(<span class="string">'version'</span>, &#123; <span class="attr">timestamp</span>: Sequelize.DATE &#125;)</span><br><span class="line"></span><br><span class="line">Document.hasMany(Version) <span class="comment">// 这将 documentId 属性添加到 version</span></span><br><span class="line">Document.belongsTo(Version, &#123;</span><br><span class="line">  <span class="keyword">as</span>: <span class="string">'Current'</span>,</span><br><span class="line">  foreignKey: <span class="string">'currentVersionId'</span></span><br><span class="line">&#125;) <span class="comment">// 这将 currentVersionId 属性添加到 document</span></span><br></pre></td></tr></table></figure><p>但是，上面的代码将导致以下错误: <code>Cyclic dependency found. documents is dependent of itself. Dependency chain: documents -&gt; versions =&gt; documents.</code></p><p>为了缓解这一点，我们可以向其中一个关联传递 <code>constraints: false：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document.hasMany(Version)</span><br><span class="line">Document.belongsTo(Version, &#123;</span><br><span class="line">  <span class="keyword">as</span>: <span class="string">'Current'</span>,</span><br><span class="line">  foreignKey: <span class="string">'currentVersionId'</span>,</span><br><span class="line">  constraints: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这将可以让我们正确地同步表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`documents`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="string">`currentVersionId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`versions`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`timestamp`</span> DATETIME,</span><br><span class="line">    <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`documentId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`documentId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`documents`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">SET</span></span><br><span class="line">        <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><h4 id="无限制地执行外键引用"><a href="#无限制地执行外键引用" class="headerlink" title="无限制地执行外键引用"></a>无限制地执行外键引用</h4><p>有时您可能想引用另一个表，而不添加任何约束或关联。 在这种情况下，您可以手动将参考属性添加到您的模式定义中，并标记它们之间的关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Trainer = sequelize.define(<span class="string">'trainer'</span>, &#123;</span><br><span class="line">  firstName: Sequelize.STRING,</span><br><span class="line">  lastName: Sequelize.STRING</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Series 将有一个 trainerId = Trainer.id 外参考键</span></span><br><span class="line"><span class="comment">// 之后我们调用 Trainer.hasMany(series)</span></span><br><span class="line"><span class="keyword">const</span> Series = sequelize.define(<span class="string">'series'</span>, &#123;</span><br><span class="line">  title: Sequelize.STRING,</span><br><span class="line">  subTitle: Sequelize.STRING,</span><br><span class="line">  description: Sequelize.TEXT,</span><br><span class="line">  <span class="comment">// 用 `Trainer` 设置外键关系（hasMany）</span></span><br><span class="line">  trainerId: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Trainer,</span><br><span class="line">      key: <span class="string">'id'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Video 将有 seriesId = Series.id 外参考键</span></span><br><span class="line"><span class="comment">// 之后我们调用 Series.hasOne(Video)</span></span><br><span class="line"><span class="keyword">const</span> Video = sequelize.define(<span class="string">'video'</span>, &#123;</span><br><span class="line">  title: Sequelize.STRING,</span><br><span class="line">  sequence: Sequelize.INTEGER,</span><br><span class="line">  description: Sequelize.TEXT,</span><br><span class="line">  <span class="comment">// 用 `Series` 设置关系(hasOne)</span></span><br><span class="line">  seriesId: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Series, <span class="comment">// 既可以是表示表名的字符串，也可以是 Sequelize 模型</span></span><br><span class="line">      key: <span class="string">'id'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Series.hasOne(Video)</span><br><span class="line">Trainer.hasMany(Series)</span><br></pre></td></tr></table></figure><h2 id="一对一关联"><a href="#一对一关联" class="headerlink" title="一对一关联"></a>一对一关联</h2><p>一对一关联是通过单个外键连接的两个模型之间的关联。</p><h3 id="BelongsTo"><a href="#BelongsTo" class="headerlink" title="BelongsTo"></a>BelongsTo</h3><p><code>BelongsTo</code> 关联是在 <code>source model</code> 上存在一对一关系的外键的关联。</p><p>一个简单的例子是 <code>Player</code> 通过 <code>player</code> 的外键作为 <code>Team</code> 的一部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Player = sequelize.define(<span class="string">'player'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Team = sequelize.define(<span class="string">'team'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">Player.belongsTo(Team) <span class="comment">// 将向 Player 添加一个 teamId 属性以保存 Team 的主键值</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`teams`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`players`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`teamId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`teamId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teams`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">SET</span></span><br><span class="line">        <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><h4 id="外键-目标键"><a href="#外键-目标键" class="headerlink" title="外键/目标键"></a>外键/目标键</h4><p>默认情况下，将从目标模型名称和目标主键名称生成 <code>belongsTo</code> 关系的外键。</p><p>默认的样式是 <code>camelCase</code>（小驼峰），但是如果源模型配置为 <code>underscored: true</code>（下划线） ，那么将使用字段 <code>snake_case</code> 创建 <code>foreignKey</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span>, <span class="attr">underscored</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Company = sequelize.define(<span class="string">'company'</span>, &#123;</span><br><span class="line">  uuid: &#123;</span><br><span class="line">    type: Sequelize.UUID,</span><br><span class="line">    primaryKey: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">User.belongsTo(Company) <span class="comment">// 将用字段 company_uuid 添加 companyUuid 到 user</span></span><br></pre></td></tr></table></figure><p>在已定义 <code>as</code> 的情况下，将使用它代替目标模型名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> UserRole = sequelize.define(<span class="string">'userRole'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">User.belongsTo(UserRole, &#123; <span class="attr">as</span>: <span class="string">'role'</span> &#125;) <span class="comment">// 将 role 添加到 user 而不是 userRole</span></span><br></pre></td></tr></table></figure><p>生成的 <code>users</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">    <span class="string">`roleId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`roleId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`userRoles`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">SET</span></span><br><span class="line">        <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p>在所有情况下，默认外键可以用 <code>foreignKey</code> 选项覆盖。 当使用外键选项时，<code>Sequelize</code> 将按原样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Company = sequelize.define(<span class="string">'company'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">User.belongsTo(Company, &#123; <span class="attr">foreignKey</span>: <span class="string">'fk_company'</span> &#125;)</span><br></pre></td></tr></table></figure><p>目标键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.belongsTo(Company, &#123; <span class="attr">foreignKey</span>: <span class="string">'fk_companyname'</span>, <span class="attr">targetKey</span>: <span class="string">'id'</span> &#125;)</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    fk_companyname: &#123;</span><br><span class="line">      references: &#123;</span><br><span class="line">        model: Company,</span><br><span class="line">        key: <span class="string">'id'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="HasOne"><a href="#HasOne" class="headerlink" title="HasOne"></a>HasOne</h3><p><code>HasOne</code> 关联是在 <code>target model</code> 上存在一对一关系的外键的关联。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Project = sequelize.define(<span class="string">'project'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单向关联</span></span><br><span class="line">Project.hasOne(User)</span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    projectId: &#123;</span><br><span class="line">      references: &#123;</span><br><span class="line">        model: Project,</span><br><span class="line">        key: <span class="string">'id'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你也可以定义外键，例如 如果您已经有一个现有的数据库并且想要处理它：</span></span><br><span class="line">Project.hasOne(User, &#123; <span class="attr">foreignKey</span>: <span class="string">'initiator_id'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为Sequelize将使用模型的名称（define的第一个参数）作为访问器方法，</span></span><br><span class="line"><span class="comment">// 还可以将特殊选项传递给hasOne：</span></span><br><span class="line">Project.hasOne(User, &#123; <span class="attr">as</span>: <span class="string">'Initiator'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者让我们来定义一些自己的参考</span></span><br><span class="line"><span class="keyword">const</span> Person = sequelize.define(<span class="string">'person'</span>, &#123;&#125;)</span><br><span class="line">Person.hasOne(Person, &#123; <span class="attr">as</span>: <span class="string">'Father'</span> &#125;) <span class="comment">// 这会将属性 FatherId 添加到 Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// also possible:</span></span><br><span class="line">Person.hasOne(Person, &#123; <span class="attr">as</span>: <span class="string">'Father'</span>, <span class="attr">foreignKey</span>: <span class="string">'DadId'</span> &#125;) <span class="comment">// 这将把属性 DadId 添加到 Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这两种情况下，你都可以：</span></span><br><span class="line">Person.setFather</span><br><span class="line">Person.getFather</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你需要联结表两次，你可以联结同一张表</span></span><br><span class="line">Team.hasOne(Game, &#123; <span class="attr">as</span>: <span class="string">'HomeTeam'</span>, <span class="attr">foreignKey</span>: <span class="string">'homeTeamId'</span> &#125;)</span><br><span class="line">Team.hasOne(Game, &#123; <span class="attr">as</span>: <span class="string">'AwayTeam'</span>, <span class="attr">foreignKey</span>: <span class="string">'awayTeamId'</span> &#125;)</span><br><span class="line"></span><br><span class="line">Game.belongsTo(Team)</span><br></pre></td></tr></table></figure><p>即使它被称为 <code>hasOne</code> 关联，对于大多数 1：1 关系，您通常需要 <code>BelongsTo</code> 关联，因为 <code>BelongsTo</code> 将会在 <code>hasOne</code> 将添加到目标的源上添加 <code>foreignKey</code>。</p><h4 id="源键"><a href="#源键" class="headerlink" title="源键"></a>源键</h4><p>源关键是源模型中的属性，它的目标模型指向外键属性。 默认情况下，hasOne 关系的源键将是源模型的主要属性。 要使用自定义属性，请使用 <code>sourceKey</code> 选项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> Company = sequelize.define(<span class="string">'company'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 companyName 属性添加到 User</span></span><br><span class="line"><span class="comment">// 使用 Company 的 name 属性作为源属性</span></span><br><span class="line">Company.hasOne(User, &#123; <span class="attr">foreignKey</span>: <span class="string">'companyName'</span>, <span class="attr">sourceKey</span>: <span class="string">'name'</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="HasOne-和-BelongsTo-之间的区别"><a href="#HasOne-和-BelongsTo-之间的区别" class="headerlink" title="HasOne 和 BelongsTo 之间的区别"></a>HasOne 和 BelongsTo 之间的区别</h3><p>在 Sequelize <code>1：1</code> 关系中可以使用 <code>HasOne</code> 和 <code>BelongsTo</code> 进行设置。 它们适用于不同的场景。 让我们用一个例子来研究这个差异。</p><p>假设我们有两个表可以链接 <code>Player</code> 和 <code>Team</code> 。 让我们定义他们的模型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Player = sequelize.define(<span class="string">'player'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Team = sequelize.define(<span class="string">'team'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure><p>当我们连接 <code>Sequelize</code> 中的两个模型时，我们可以将它们称为一对 <code>source</code> 和 <code>target</code> 模型。像这样</p><p>将 <strong>Player</strong> 作为 <strong>source</strong> 而 <strong>Team</strong> 作为 <strong>target</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Player.belongsTo(Team)</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">Player.hasOne(Team)</span><br></pre></td></tr></table></figure><p>将 <strong>Team</strong> 作为 <strong>source</strong> 而 <strong>Player</strong> 作为 <strong>target</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Team.belongsTo(Player)</span><br><span class="line"><span class="comment">//Or</span></span><br><span class="line">Team.hasOne(Player)</span><br></pre></td></tr></table></figure><p><code>HasOne</code> 和 <code>BelongsTo</code> 将关联键插入到不同的模型中。 <code>HasOne</code> 在 <code>target</code> 模型中插入关联键，而 <code>BelongsTo</code> 将关联键插入到 <code>source</code> 模型中。</p><p>下是一个示例，说明了 <code>BelongsTo</code> 和 <code>HasOne</code> 的用法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Player = sequelize.define(<span class="string">'player'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Team = sequelize.define(<span class="string">'team'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Coach = sequelize.define(<span class="string">'coach'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line">Player.belongsTo(Team) <span class="comment">// `teamId` 将被添加到 Player / Source 模型中</span></span><br><span class="line">Coach.hasOne(Team) <span class="comment">// `coachId` 将被添加到 Team / Target 模型中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> Player = sequelize.define(<span class="string">'player'</span>, &#123;</span><br><span class="line">  teamId: &#123;</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Team,</span><br><span class="line">      key: <span class="string">'id'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Team = sequelize.define(<span class="string">'team'</span>, &#123;</span><br><span class="line">  coachId: &#123;</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Coach,</span><br><span class="line">      key: <span class="string">'id'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>假设我们的 <code>Player</code> 模型有关于其团队的信息为 <code>teamId</code> 列。<br>关于每个团队的 <code>Coach</code> 的信息作为 <code>coachId</code> 列存储在 <code>Team</code> 模型中。<br>这两种情况都需要不同种类的 1：1 关系，因为外键关系每次出现在不同的模型上。</p><ul><li>当关于关联的信息存在于 <code>source</code> 模型中时，我们可以使用 <code>belongsTo</code>。 在这种情况下，<code>Player</code> 适用于<code>belongsTo</code>，因为它具有 <code>teamId</code> 列。</li><li>当关于关联的信息存在于 <code>target</code> 模型中时，我们可以使用 <code>hasOne</code>。 在这种情况下， <code>Coach</code> 适用于 <code>hasOne</code> ，因为 <code>Team</code> 模型将其 <code>Coach</code> 的信息存储为 <code>coachId</code> 字段。</li></ul><h2 id="一对多关联-hasMany"><a href="#一对多关联-hasMany" class="headerlink" title="一对多关联 (hasMany)"></a>一对多关联 (hasMany)</h2><p>一对多关联将一个来源与多个目标连接起来。 而多个目标接到同一个特定的源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> Project = sequelize.define(<span class="string">'project'</span>, &#123;&#125;, &#123; <span class="attr">timestamps</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好。 现在，事情变得更加复杂（对用户来说并不真实可见）。</span></span><br><span class="line"><span class="comment">// 首先我们来定义一个 hasMany 关联</span></span><br><span class="line">Project.hasMany(User, &#123; <span class="attr">as</span>: <span class="string">'Workers'</span> &#125;)</span><br></pre></td></tr></table></figure><p>这会将 <code>projectId</code> 属性添加到 <code>User</code>。 根据您强调的设置，表中的列将被称为 <code>projectId</code> 或 <code>project_id</code>。 <code>Project</code> 的实例将获得访问器 <code>getWorkers</code> 和 <code>setWorkers</code>。</p><p>有时您可能需要在不同的列上关联记录，您可以使用 <code>sourceKey</code> 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> City = sequelize.define(<span class="string">'city'</span>, &#123; <span class="attr">countryCode</span>: Sequelize.STRING &#125;)</span><br><span class="line"><span class="keyword">const</span> Country = sequelize.define(<span class="string">'country'</span>, &#123; <span class="attr">isoCode</span>: Sequelize.STRING &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里，我们可以根据国家代码连接国家和城市</span></span><br><span class="line">Country.hasMany(City, &#123; <span class="attr">foreignKey</span>: <span class="string">'countryCode'</span>, <span class="attr">sourceKey</span>: <span class="string">'isoCode'</span> &#125;)</span><br><span class="line">City.belongsTo(Country, &#123; <span class="attr">foreignKey</span>: <span class="string">'countryCode'</span>, <span class="attr">targetKey</span>: <span class="string">'isoCode'</span> &#125;)</span><br></pre></td></tr></table></figure><p>到目前为止，我们解决了单向关联。 但我们想要更多！ 让我们通过在下一节中创建一个多对多的关联来定义它。</p><h2 id="多对多关联-BelongsToMany"><a href="#多对多关联-BelongsToMany" class="headerlink" title="多对多关联 (BelongsToMany)"></a>多对多关联 (BelongsToMany)</h2><p>多对多关联用于将源与多个目标相连接。 此外，目标也可以连接到多个源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project.belongsToMany(User, &#123; <span class="attr">through</span>: <span class="string">'UserProject'</span> &#125;)</span><br><span class="line">User.belongsToMany(Project, &#123; <span class="attr">through</span>: <span class="string">'UserProject'</span> &#125;)</span><br></pre></td></tr></table></figure><p>这将创建一个名为 <code>UserProject</code> 的新模型，具有等效的外键 <code>projectId</code> 和 <code>userId</code>。 属性是否为 <code>camelcase</code> 取决于由表（在这种情况下为 <code>User</code> 和 <code>Project</code>）连接的两个模型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`UserProject`</span> (</span><br><span class="line">    <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`projectId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    <span class="string">`userId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`projectId`</span>, <span class="string">`userId`</span>),</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`projectId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`projects`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> (<span class="string">`userId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`users`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><p>定义 <code>through</code> 为 <code>required</code>。 <code>Sequelize</code> 以前会尝试自动生成名称，但并不总是导致最合乎逻辑的设置。</p><p>这将添加方法 <code>getUsers</code>,<code>setUsers</code>, <code>addUser</code>, <code>addUsers</code> 到 <code>Project</code>, 还有 <code>getProjects</code>, <code>setProjects</code>, <code>addProject</code>, 和 <code>addProjects</code> 到 <code>User</code>.</p><p>有时，您可能需要在关联中使用它们时重命名模型。 让我们通过使用别名（<code>as</code>）选项将 <code>users</code> 定义为 <code>workers</code> 而 <code>projects</code> 定义为 <code>t asks</code>。 我们还将手动定义要使用的外键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.belongsToMany(Project, &#123; <span class="attr">as</span>: <span class="string">'Tasks'</span>, <span class="attr">through</span>: <span class="string">'worker_tasks'</span>, <span class="attr">foreignKey</span>: <span class="string">'userId'</span> &#125;)</span><br><span class="line">Project.belongsToMany(User, &#123; <span class="attr">as</span>: <span class="string">'Workers'</span>, <span class="attr">through</span>: <span class="string">'worker_tasks'</span>, <span class="attr">foreignKey</span>: <span class="string">'projectId'</span> &#125;)</span><br></pre></td></tr></table></figure><ul><li><code>foreignKey</code> 将允许你在 <code>through</code> 关系中设置 <code>source model</code> 键。</li><li><code>otherKey</code> 将允许你在 <code>through</code> 关系中设置 <code>target model</code> 键。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.belongsToMany(Project, &#123; <span class="attr">as</span>: <span class="string">'Tasks'</span>, <span class="attr">through</span>: <span class="string">'worker_tasks'</span>, <span class="attr">foreignKey</span>: <span class="string">'userId'</span>, <span class="attr">otherKey</span>: <span class="string">'projectId'</span> &#125;)</span><br></pre></td></tr></table></figure><p>当然你也可以使用 <code>belongsToMany</code> 定义自我引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person.belongsToMany(Person, &#123; <span class="attr">as</span>: <span class="string">'Children'</span>, <span class="attr">through</span>: <span class="string">'PersonChildren'</span> &#125;)</span><br><span class="line"><span class="comment">// 这将创建存储对象的 ID 的表 PersonChildren。</span></span><br></pre></td></tr></table></figure><p>如果您想要连接表中的其他属性，则可以在定义关联之前为连接表定义一个模型，然后再说明它应该使用该模型进行连接，而不是创建一个新的关联：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> Project = sequelize.define(<span class="string">'project'</span>, &#123;&#125;)</span><br><span class="line"><span class="keyword">const</span> UserProjects = sequelize.define(<span class="string">'userProjects'</span>, &#123;</span><br><span class="line">  status: DataTypes.STRING</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">User.belongsToMany(Project, &#123; <span class="attr">through</span>: UserProjects &#125;)</span><br><span class="line">Project.belongsToMany(User, &#123; <span class="attr">through</span>: UserProjects &#125;)</span><br></pre></td></tr></table></figure><p>要向 <code>user</code> 添加一个新 <code>project</code> 并设置其状态，您可以将额外的 <code>options.through</code> 传递给 <code>setter</code>，其中包含连接表的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.addProject(project, &#123; <span class="attr">through</span>: &#123; <span class="attr">status</span>: <span class="string">'started'</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><p>默认情况下，上面的代码会将 <code>projectId</code> 和 <code>userId</code> 添加到 <code>UserProjects</code> 表中， 删除任何先前定义的主键属性 - 表将由两个表的键的组合唯一标识，并且没有其他主键列。 要在 <code>UserProjects</code> 模型上强添加一个主键，您可以手动添加它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserProjects = sequelize.define(<span class="string">'userProjects'</span>, &#123;</span><br><span class="line">  id: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    primaryKey: <span class="literal">true</span>,</span><br><span class="line">    autoIncrement: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  status: DataTypes.STRING</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用多对多你可以基于 <code>through</code> 关系查询并选择特定属性。 例如通过 <code>through</code> 使用 <code>findAll</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.findAll(&#123;</span><br><span class="line">  include: [</span><br><span class="line">    &#123;</span><br><span class="line">      model: Project,</span><br><span class="line">      through: &#123;</span><br><span class="line">        attributes: [<span class="string">'createdAt'</span>, <span class="string">'startedAt'</span>, <span class="string">'finishedAt'</span>],</span><br><span class="line">        where: &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://itbilu.com/nodejs/npm/41qaV3czb.html#associations-naming" target="_blank" rel="noopener">模型（表）之间的关系/关联</a></li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/associations.md" target="_blank" rel="noopener">Associations - 关联</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本部分描述了 Sequelize 中的各种关联类型。 Sequelize 中有四种类型的关联&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BelongsTo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HasOne&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HasMany&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BelongsToMany&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;Source-amp-Target&quot;&gt;&lt;a href=&quot;#Source-amp-Target&quot; class=&quot;headerlink&quot; title=&quot;Source &amp;amp; Target&quot;&gt;&lt;/a&gt;Source &amp;amp; Target&lt;/h3&gt;&lt;p&gt;我们首先从一个基本概念开始，你将会在大多数关联中使用 &lt;code&gt;source&lt;/code&gt; 和 &lt;code&gt;target&lt;/code&gt; 模型。 假设您正试图在两个模型之间添加关联。 这里我们在 &lt;code&gt;users&lt;/code&gt; 和 &lt;code&gt;articles&lt;/code&gt; 之间添加一个 &lt;code&gt;hasOne&lt;/code&gt; 关联。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; UserModel = sequelize.define(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name: Sequelize.STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    age: Sequelize.INTEGER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;timestamps&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ArticleModel = sequelize.define(&lt;span class=&quot;string&quot;&gt;&#39;article&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: Sequelize.STRING,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  content: Sequelize.STRING&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserModel.hasOne(ArticleModel)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - model definition</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-modelDefinition/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-modelDefinition/</id>
    <published>2019-01-03T06:35:03.000Z</published>
    <updated>2019-01-08T12:34:04.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Model-definition-模型定义"><a href="#Model-definition-模型定义" class="headerlink" title="Model definition - 模型定义"></a>Model definition - 模型定义</h2><p><code>Sequelize</code> 使用 <code>define</code> 方法定义模型和表之间的映射，<code>Sequelize</code> 将默认添加 <code>createdAt</code> 和 <code>updatedAt</code> 属性。因此，您将能够知道数据库条目何时进入数据库以及最后一次更新时。<br><code>model</code> 定义格式为 <code>sequelize.define(&#39;name&#39;, {attributes}, {configuration})：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>)</span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>上式代码在数据库中的执行命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line"> ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="base-demo"><a href="#base-demo" class="headerlink" title="base demo"></a>base demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar = sequelize.define(<span class="string">'bar'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  id: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    field: <span class="string">'fooId'</span>, <span class="comment">// 存入数据库中的字段，model 中还是使用 id =&gt; foo.id</span></span><br><span class="line">    autoIncrement: <span class="literal">true</span>, <span class="comment">// 是否自增</span></span><br><span class="line">    primaryKey: <span class="literal">true</span> <span class="comment">// 是否为主键</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  age: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    defaultValue: <span class="number">18</span>, <span class="comment">// 默认值</span></span><br><span class="line">    allowNull: <span class="literal">true</span>, <span class="comment">// 是否为空</span></span><br><span class="line">    unique: <span class="literal">true</span>, <span class="comment">// 是否唯一</span></span><br><span class="line">    onUpdate: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键更新时的操作 String - 可选值是：['CASCADE', 'RESTRICT', 'SET DEFAULT', 'SET NULL', 'NO ACTION']</span></span><br><span class="line">    onDelete: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键删除时的操作 String - 同上</span></span><br><span class="line">    <span class="comment">// 验证器</span></span><br><span class="line">    validate: &#123;</span><br><span class="line">      isNumeric: <span class="literal">true</span>, <span class="comment">// 只允许数字</span></span><br><span class="line">      max: <span class="number">100</span>,</span><br><span class="line">      min: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 自定义验证</span></span><br><span class="line">      isEven(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Only even values are allowed!'</span>)</span><br><span class="line">          <span class="comment">// 我们也在模型的上下文中，所以如果它存在的话,</span></span><br><span class="line">          <span class="comment">// this.otherField会得到otherField的值。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters 为列自定义一个访问器 使用this.getDataValue(String)时调用的值</span></span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="keyword">const</span> age = <span class="keyword">this</span>.getDataValue(<span class="string">'age'</span>)</span><br><span class="line">      <span class="comment">// 可以对该列进行操作...</span></span><br><span class="line">      <span class="keyword">return</span> age</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值</span></span><br><span class="line">    set(value) &#123;</span><br><span class="line">      <span class="keyword">const</span> newValue = value + <span class="number">3</span></span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'age'</span>, newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  uId: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Bar, <span class="comment">// 这是引用另一个模型</span></span><br><span class="line">      key: <span class="string">'id'</span> <span class="comment">// 引用的字段（注意是在数据中存在的字段名）比如引用 foos 表要引用 fooId 而不是 id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Bar.sync().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Foo.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> foo = <span class="keyword">await</span> Foo.create(&#123; <span class="attr">age</span>: <span class="number">21</span> &#125;) <span class="comment">// 触发 setters</span></span><br><span class="line">      <span class="keyword">const</span> foos = <span class="keyword">await</span> Foo.findAll() <span class="comment">// 触发 getters</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上式代码在数据库中的执行命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`bars`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`foos`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`foos`</span> (</span><br><span class="line">  <span class="string">`fooId`</span> <span class="built_in">INTEGER</span> auto_increment ,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">18</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  <span class="string">`uId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`fooId`</span>),</span><br><span class="line">  FOREIGN <span class="keyword">KEY</span> (<span class="string">`uId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`bars`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`foos`</span> (<span class="string">`fooId`</span>,<span class="string">`age`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="keyword">DEFAULT</span>,<span class="number">24</span>,<span class="string">'2019-01-03 07:34:12'</span>,<span class="string">'2019-01-03 07:34:12'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`fooId`</span> <span class="keyword">AS</span> <span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`uId`</span>, <span class="string">`createdAt`</span>, <span class="string">`updatedAt`</span> <span class="keyword">FROM</span> <span class="string">`foos`</span> <span class="keyword">AS</span> <span class="string">`foo`</span>;</span><br></pre></td></tr></table></figure><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  column: &#123;</span><br><span class="line">    type: xxx,             <span class="comment">// DataType或字符串，表示列的数据类型 【见下文】</span></span><br><span class="line">    allowNull: <span class="literal">true</span>,       <span class="comment">// 是否设置 NOT NULL（非空）约束</span></span><br><span class="line">    defaultValue: xxx      <span class="comment">// 默认值</span></span><br><span class="line">    unique: <span class="literal">false</span>,         <span class="comment">// 设置为true时，会为列添加唯一约束</span></span><br><span class="line">    primaryKey: <span class="literal">false</span>,     <span class="comment">// 指定是否是主键</span></span><br><span class="line">    field: xxx,            <span class="comment">// String - 设置在数据库中的字段名。设置后会，Sequelize会将属性名映射到数据库中的不同名称</span></span><br><span class="line">    autoIncrement: <span class="literal">false</span>,  <span class="comment">// 是否自增</span></span><br><span class="line">    references: &#123;          <span class="comment">// 引用对象</span></span><br><span class="line">      model: xxx,          <span class="comment">// 如果列引用到另一个表，可以通过这个属性设置模型或字符串。</span></span><br><span class="line">      key: <span class="string">'id'</span>            <span class="comment">// 该列表示到表外键列的引用</span></span><br><span class="line">    &#125;, </span><br><span class="line">    onUpdate: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键更新时的操作 String - 可选值是：['CASCADE', 'RESTRICT', 'SET DEFAULT', 'SET NULL', 'NO ACTION']</span></span><br><span class="line">    onDelete: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键删除时的操作，可选值同上</span></span><br><span class="line">    get()&#123;&#125;,               <span class="comment">// 为列自定义一个访问器 使用this.getDataValue(String)时调用的值 【见下文】</span></span><br><span class="line">    set(value)&#123;&#125;,          <span class="comment">// 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值 【见下文】</span></span><br><span class="line">    validate: &#123;&#125;           <span class="comment">// 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数 【见下文】</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Attributes-DataTypes"><a href="#Attributes-DataTypes" class="headerlink" title="Attributes - DataTypes"></a>Attributes - DataTypes</h2><p>以下是 Sequelize 支持的一些数据类型。 有关完整和更新的列表, 参阅 <a href="http://docs.sequelizejs.com/variable/index.html#static-variable-DataTypes" target="_blank" rel="noopener">DataTypes</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Sequelize.STRING                      <span class="comment">// VARCHAR(255)</span></span><br><span class="line">Sequelize.STRING(<span class="number">1234</span>)                <span class="comment">// VARCHAR(1234)</span></span><br><span class="line">Sequelize.STRING.BINARY               <span class="comment">// VARCHAR BINARY</span></span><br><span class="line">Sequelize.TEXT                        <span class="comment">// TEXT</span></span><br><span class="line">Sequelize.TEXT(<span class="string">'tiny'</span>)                <span class="comment">// TINYTEXT</span></span><br><span class="line"></span><br><span class="line">Sequelize.INTEGER                     <span class="comment">// INTEGER</span></span><br><span class="line">Sequelize.BIGINT                      <span class="comment">// BIGINT</span></span><br><span class="line">Sequelize.BIGINT(<span class="number">11</span>)                  <span class="comment">// BIGINT(11)</span></span><br><span class="line"></span><br><span class="line">Sequelize.FLOAT                       <span class="comment">// FLOAT</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>)                   <span class="comment">// FLOAT(11)</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>, <span class="number">12</span>)               <span class="comment">// FLOAT(11,12)</span></span><br><span class="line"></span><br><span class="line">Sequelize.REAL                        <span class="comment">// REAL         仅限于PostgreSQL.</span></span><br><span class="line">Sequelize.REAL(<span class="number">11</span>)                    <span class="comment">// REAL(11)     仅限于PostgreSQL.</span></span><br><span class="line">Sequelize.REAL(<span class="number">11</span>, <span class="number">12</span>)                <span class="comment">// REAL(11,12)  仅限于PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.DOUBLE                      <span class="comment">// DOUBLE</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>)                  <span class="comment">// DOUBLE(11)</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>, <span class="number">12</span>)              <span class="comment">// DOUBLE(11,12)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DECIMAL                     <span class="comment">// DECIMAL</span></span><br><span class="line">Sequelize.DECIMAL(<span class="number">10</span>, <span class="number">2</span>)              <span class="comment">// DECIMAL(10,2)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DATE                        <span class="comment">// DATETIME 针对 mysql / sqlite, TIMESTAMP WITH TIME ZONE 针对 postgres</span></span><br><span class="line">Sequelize.DATE(<span class="number">6</span>)                     <span class="comment">// DATETIME(6) 针对 mysql 5.6.4+. 小数秒支持多达6位精度</span></span><br><span class="line">Sequelize.DATEONLY                    <span class="comment">// DATE 不带时间.</span></span><br><span class="line">Sequelize.BOOLEAN                     <span class="comment">// TINYINT(1)</span></span><br><span class="line"></span><br><span class="line">Sequelize.ENUM(<span class="string">'value 1'</span>, <span class="string">'value 2'</span>)  <span class="comment">// 一个允许具有 “value 1” 和 “value 2” 的 ENUM</span></span><br><span class="line">Sequelize.ARRAY(Sequelize.TEXT)       <span class="comment">// 定义一个数组。 仅限于 PostgreSQL。</span></span><br><span class="line">Sequelize.ARRAY(Sequelize.ENUM)       <span class="comment">// 定义一个 ENUM 数组. 仅限于 PostgreSQL。</span></span><br><span class="line"></span><br><span class="line">Sequelize.JSON                        <span class="comment">// JSON 列. 仅限于 PostgreSQL, SQLite and MySQL.</span></span><br><span class="line">Sequelize.JSONB                       <span class="comment">// JSONB 列. 仅限于 PostgreSQL .</span></span><br><span class="line"></span><br><span class="line">Sequelize.BLOB                        <span class="comment">// BLOB (PostgreSQL 二进制)</span></span><br><span class="line">Sequelize.BLOB(<span class="string">'tiny'</span>)                <span class="comment">// TINYBLOB (PostgreSQL 二进制. 其他参数是 medium 和 long)</span></span><br><span class="line"></span><br><span class="line">Sequelize.UUID                        <span class="comment">// PostgreSQL 和 SQLite 的 UUID 数据类型, CHAR(36) BINARY 针对于 MySQL (使用默认值: Sequelize.UUIDV1 或 Sequelize.UUIDV4 来让 sequelize 自动生成 ID)</span></span><br><span class="line"></span><br><span class="line">Sequelize.CIDR                        <span class="comment">// PostgreSQL 的 CIDR 数据类型</span></span><br><span class="line">Sequelize.INET                        <span class="comment">// PostgreSQL 的 INET 数据类型</span></span><br><span class="line">Sequelize.MACADDR                     <span class="comment">// PostgreSQL 的 MACADDR</span></span><br><span class="line"></span><br><span class="line">Sequelize.RANGE(Sequelize.INTEGER)    <span class="comment">// 定义 int4range 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.BIGINT)     <span class="comment">// 定义 int8range 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DATE)       <span class="comment">// 定义 tstzrange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DATEONLY)   <span class="comment">// 定义 daterange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DECIMAL)    <span class="comment">// 定义 numrange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) <span class="comment">// 定义 tstzrange 范围的数组. 仅限于 PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.GEOMETRY                    <span class="comment">// 空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>)           <span class="comment">// 具有几何类型的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>, <span class="number">4326</span>)     <span class="comment">// 具有几何类型和SRID的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br></pre></td></tr></table></figure><h2 id="Attributes-getters-setters"><a href="#Attributes-getters-setters" class="headerlink" title="Attributes - getters/setters"></a>Attributes - getters/setters</h2><p>可以在模型上定义’对象属性’ <code>getter</code> 和 <code>setter</code> 函数，这些可以用于映射到数据库字段的“保护”属性，也可以用于定义“伪”属性。</p><p><code>Getters</code> 和 <code>Setters</code> 可以通过两种方式定义（您可以混合使用这两种方式）：</p><ul><li>作为属性定义的一部分</li><li>作为模型参数的一部分</li></ul><blockquote><p>注意: 如果在两个地方定义了 <code>getter</code> 或 <code>setter</code>，那么在相关属性定义中找到的函数始终是优先的。</p></blockquote><h3 id="定义为属性定义的一部分"><a href="#定义为属性定义的一部分" class="headerlink" title="定义为属性定义的一部分"></a>定义为属性定义的一部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Employee = sequelize.define(<span class="string">'employee'</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="keyword">const</span> title = <span class="keyword">this</span>.getDataValue(<span class="string">'title'</span>)</span><br><span class="line">      <span class="comment">// 'this' 允许你访问实例的属性</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getDataValue(<span class="string">'name'</span>) + <span class="string">' ('</span> + title + <span class="string">')'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'title'</span>, val.toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Employee.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Employee.create(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span>, <span class="attr">title</span>: <span class="string">'senior engineer'</span> &#125;).then(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'name'</span>)) <span class="comment">// John Doe (SENIOR ENGINEER)</span></span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'title'</span>)) <span class="comment">// SENIOR ENGINEER</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义为模型参数的一部分"><a href="#定义为模型参数的一部分" class="headerlink" title="定义为模型参数的一部分"></a>定义为模型参数的一部分</h3><p>以下是在模型参数中定义 <code>getter</code> 和 <code>setter</code> 的示例。<br><code>fullName getter</code>，是一个说明如何在模型上定义伪属性的例子 - 这些属性实际上不是数据库模式的一部分。 事实上，伪属性可以通过两种方式定义：使用模型 <code>getter</code>，或者使用虚拟数据类型的列。 虚拟数据类型可以有验证，而虚拟属性的 <code>getter</code> 则不能。</p><p>请注意，<code>fullName getter</code> 函数中引用的 <code>this.firstname</code> 和 <code>this.lastname</code> 将触发对相应 <code>getter</code> 函数的调用。 如果你不想那样使用<code>getDataValue()</code>方法来访问原始值（见下文）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = sequelize.define(</span><br><span class="line">  <span class="string">'foo'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    firstname: Sequelize.STRING,</span><br><span class="line">    lastname: Sequelize.STRING</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    getterMethods: &#123;</span><br><span class="line">      fullName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setterMethods: &#123;</span><br><span class="line">      fullName(value) &#123;</span><br><span class="line">        <span class="keyword">const</span> names = value.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Foo.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Foo.create(&#123; <span class="attr">firstname</span>: <span class="string">'guo'</span>, <span class="attr">lastname</span>: <span class="string">'dada'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> Foos = <span class="keyword">await</span> Foo.findAll()</span><br><span class="line">    <span class="built_in">console</span>.log(Foos[<span class="number">0</span>][<span class="string">'fullName'</span>]) <span class="comment">// guo dada</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Attributes-Validations"><a href="#Attributes-Validations" class="headerlink" title="Attributes - Validations"></a>Attributes - Validations</h2><p>模型验证，允许您为模型的每个属性指定格式/内容/继承验证。</p><p>验证会自动运行在 <code>create</code> ， <code>update</code> 和 <code>save</code> 上。 你也可以调用 <code>validate()</code> 手动验证一个实例。</p><p>验证由 <a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">validator.js</a> 实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ValidateMe = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      is: [<span class="string">"^[a-z]+$"</span>,<span class="string">'i'</span>],     <span class="comment">// 只允许字母</span></span><br><span class="line">      is: <span class="regexp">/^[a-z]+$/i</span>,          <span class="comment">// 与上一个示例相同,使用了真正的正则表达式</span></span><br><span class="line">      not: [<span class="string">"[a-z]"</span>,<span class="string">'i'</span>],       <span class="comment">// 不允许字母</span></span><br><span class="line">      isEmail: <span class="literal">true</span>,            <span class="comment">// 检查邮件格式 (foo@bar.com)</span></span><br><span class="line">      isUrl: <span class="literal">true</span>,              <span class="comment">// 检查连接格式 (http://foo.com)</span></span><br><span class="line">      isIP: <span class="literal">true</span>,               <span class="comment">// 检查 IPv4 (129.89.23.1) 或 IPv6 格式</span></span><br><span class="line">      isIPv4: <span class="literal">true</span>,             <span class="comment">// 检查 IPv4 (129.89.23.1) 格式</span></span><br><span class="line">      isIPv6: <span class="literal">true</span>,             <span class="comment">// 检查 IPv6 格式</span></span><br><span class="line">      isAlpha: <span class="literal">true</span>,            <span class="comment">// 只允许字母</span></span><br><span class="line">      isAlphanumeric: <span class="literal">true</span>,     <span class="comment">// 只允许使用字母数字</span></span><br><span class="line">      isNumeric: <span class="literal">true</span>,          <span class="comment">// 只允许数字</span></span><br><span class="line">      isInt: <span class="literal">true</span>,              <span class="comment">// 检查是否为有效整数</span></span><br><span class="line">      isFloat: <span class="literal">true</span>,            <span class="comment">// 检查是否为有效浮点数</span></span><br><span class="line">      isDecimal: <span class="literal">true</span>,          <span class="comment">// 检查是否为任意数字</span></span><br><span class="line">      isLowercase: <span class="literal">true</span>,        <span class="comment">// 检查是否为小写</span></span><br><span class="line">      isUppercase: <span class="literal">true</span>,        <span class="comment">// 检查是否为大写</span></span><br><span class="line">      notNull: <span class="literal">true</span>,            <span class="comment">// 不允许为空</span></span><br><span class="line">      isNull: <span class="literal">true</span>,             <span class="comment">// 只允许为空</span></span><br><span class="line">      notEmpty: <span class="literal">true</span>,           <span class="comment">// 不允许空字符串</span></span><br><span class="line">      equals: <span class="string">'specific value'</span>, <span class="comment">// 只允许一个特定值</span></span><br><span class="line">      contains: <span class="string">'foo'</span>,          <span class="comment">// 检查是否包含特定的子字符串</span></span><br><span class="line">      notIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],  <span class="comment">// 检查是否值不是其中之一</span></span><br><span class="line">      isIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],   <span class="comment">// 检查是否值是其中之一</span></span><br><span class="line">      notContains: <span class="string">'bar'</span>,       <span class="comment">// 不允许包含特定的子字符串</span></span><br><span class="line">      len: [<span class="number">2</span>,<span class="number">10</span>],              <span class="comment">// 只允许长度在2到10之间的值</span></span><br><span class="line">      isUUID: <span class="number">4</span>,                <span class="comment">// 只允许uuids</span></span><br><span class="line">      isDate: <span class="literal">true</span>,             <span class="comment">// 只允许日期字符串</span></span><br><span class="line">      isAfter: <span class="string">"2011-11-05"</span>,    <span class="comment">// 只允许在特定日期之后的日期字符串</span></span><br><span class="line">      isBefore: <span class="string">"2011-11-05"</span>,   <span class="comment">// 只允许在特定日期之前的日期字符串</span></span><br><span class="line">      max: <span class="number">23</span>,                  <span class="comment">// 只允许值 &lt;= 23</span></span><br><span class="line">      min: <span class="number">23</span>,                  <span class="comment">// 只允许值 &gt;= 23</span></span><br><span class="line">      isCreditCard: <span class="literal">true</span>,       <span class="comment">// 检查有效的信用卡号码</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 也可以自定义验证:</span></span><br><span class="line">      isEven(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Only even values are allowed!'</span>)</span><br><span class="line">          <span class="comment">// 我们也在模型的上下文中，所以如果它存在的话, </span></span><br><span class="line">          <span class="comment">// this.otherField会得到otherField的值。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>请注意，如果需要将多个参数传递给内置的验证函数，则要传递的参数必须位于数组中。 但是，如果要传递单个数组参数，例如isIn的可接受字符串数组，则将被解释为多个字符串参数，而不是一个数组参数。 要解决这个问题，传递一个单一长度的参数数组，比如<code>[[&#39;one&#39;，&#39;two&#39;]]</code>。</p><p>要使用自定义错误消息而不是 <code>validator.js</code> 提供的错误消息，请使用对象而不是纯值或参数数组，例如不需要参数的验证器可以被给定自定义消息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isInt: &#123;</span><br><span class="line">  msg: <span class="string">"Must be an integer number of pennies"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者如果还需要传递参数，请添加一个 <code>args</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isIn: &#123;</span><br><span class="line">  args: [[<span class="string">'en'</span>, <span class="string">'zh'</span>]],</span><br><span class="line">  msg: <span class="string">"Must be English or Chinese"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用自定义验证器函数时，错误消息将是抛出的 <code>Error</code> 对象所持有的任何消息。</p><p>有关内置验证方法的更多详细信息，请参阅<a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">the validator.js project</a> 。</p><h3 id="验证器-与-allowNull"><a href="#验证器-与-allowNull" class="headerlink" title="验证器 与 allowNull"></a>验证器 与 allowNull</h3><p>如果模型的特定字段设置为允许null（使用 <code>allowNull：true</code> ），并且该值已设置为 <code>null</code> ，则其验证器不会运行。</p><p>这意味着，您可以有一个字符串字段，该字段验证其长度至少为5个字符，但也允许为 <code>null</code>。</p><p>你可以通过设置 <code>notNull</code> 验证器来自定义 <code>allowNull</code> 错误消息, 像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      notNull: &#123;</span><br><span class="line">        msg: <span class="string">'Please enter your name'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><p>验证器也可以在特定字段验证器之后用来定义检查模型。例如，你可以确保纬度和经度都不设置，或者两者都设置，如果设置了一个而另一个未设置则验证失败。</p><p>模型验证器方法与模型对象的上下文一起调用，如果它们抛出错误，则认为失败，否则通过。 这与自定义字段特定的验证器一样。</p><p>所收集的任何错误消息都将与验证结果对象一起放在字段验证错误中，这个错误使用在 <code>validate</code> 参数对象中以失败的验证方法的键来命名。即便在任何一个时刻，每个模型验证方法只能有一个错误消息，它会在数组中显示为单个字符串错误，以最大化与字段错误的一致性。</p><p>一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pub = Sequelize.define(<span class="string">'pub'</span>, &#123;</span><br><span class="line">  name: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  address: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  latitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-90</span>, <span class="attr">max</span>: <span class="number">90</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  longitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-180</span>, <span class="attr">max</span>: <span class="number">180</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  validate: &#123;</span><br><span class="line">    bothCoordsOrNone() &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">this</span>.latitude === <span class="literal">null</span>) !== (<span class="keyword">this</span>.longitude === <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Require either both latitude and longitude or neither'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这种简单情况下，如果给定纬度或经度，而不是同时包含两者，则验证失败。 如果我们尝试构建一个超范围的纬度和经度，那么 <code>raging_bullock_arms.validate()</code> 可能会返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'latitude'</span>: [<span class="string">'Invalid number: latitude'</span>],</span><br><span class="line">  <span class="string">'bothCoordsOrNone'</span>: [<span class="string">'Require either both latitude and longitude or neither'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><p>你还可以修改 <code>Sequelize</code> 处理列名称的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar = sequelize.define(</span><br><span class="line">  <span class="string">'bar'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* bla */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 不添加时间戳属性 (updatedAt, createdAt)</span></span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不删除数据库条目，但将新添加的属性deletedAt设置为当前日期（删除完成时）。</span></span><br><span class="line">    <span class="comment">// paranoid 只有在启用时间戳时才能工作</span></span><br><span class="line">    paranoid: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将自动设置所有属性的字段选项为下划线命名方式。</span></span><br><span class="line">    <span class="comment">// 不会覆盖已经定义的字段选项</span></span><br><span class="line">    underscored: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用修改表名; 默认情况下，sequelize将自动将所有传递的模型名称（define的第一个参数）转换为复数。 如果你不想这样，请设置以下内容</span></span><br><span class="line">    freezeTableName: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义表的名称</span></span><br><span class="line">    tableName: <span class="string">'my_very_custom_table_name'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用乐观锁定。 启用时，sequelize将向模型添加版本计数属性，</span></span><br><span class="line">    <span class="comment">// 并在保存过时的实例时引发OptimisticLockingError错误。</span></span><br><span class="line">    <span class="comment">// 设置为true或具有要用于启用的属性名称的字符串。</span></span><br><span class="line">    version: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果你希望 <code>sequelize</code> 处理时间戳，但只想要其中一部分，或者希望您的时间戳被称为别的东西，则可以单独覆盖每个列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = sequelize.define(</span><br><span class="line">  <span class="string">'foo'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* bla */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 不要忘记启用时间戳！</span></span><br><span class="line">    timestamps: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我不想要 createdAt</span></span><br><span class="line">    createdAt: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我想 updateAt 实际上被称为 updateTimestamp</span></span><br><span class="line">    updatedAt: <span class="string">'updateTimestamp'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并且希望 deletedAt 被称为 destroyTime（请记住启用paranoid以使其工作）</span></span><br><span class="line">    deletedAt: <span class="string">'destroyTime'</span>,</span><br><span class="line">    paranoid: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>您也可以更改数据库引擎，例如 变更到到 <code>MyISAM</code>, 默认值是 <code>InnoDB</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = sequelize.define(<span class="string">'person'</span>, &#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  engine: <span class="string">'MYISAM'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或全局的</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(db, user, pw, &#123;</span><br><span class="line">  define: &#123; <span class="attr">engine</span>: <span class="string">'MYISAM'</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后，您可以为 <code>MySQL</code> 和 <code>PG</code> 中的表指定注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = sequelize.define(<span class="string">'person'</span>, &#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  comment: <span class="string">"I'm a table comment!"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h2><p>当开始一个新的项目时，你还不会有一个数据库结构，并且使用 <code>Sequelize</code> 你也不需要它。 只需指定您的模型结构，并让库完成其余操作。 目前支持的是创建和删除表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建表:</span></span><br><span class="line">Project.sync()</span><br><span class="line">Task.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制创建!</span></span><br><span class="line">Project.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;) <span class="comment">// 这将先丢弃表，然后重新创建它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除表:</span></span><br><span class="line">Project.drop()</span><br><span class="line">Task.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理:</span></span><br><span class="line">Project.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 好吧...一切都很好！</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// oooh，你输入了错误的数据库凭据？</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为同步和删除所有的表可能要写很多行，你也可以让 <code>Sequelize</code> 来为做这些：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步所有尚未在数据库中的模型</span></span><br><span class="line">sequelize.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制同步所有模型</span></span><br><span class="line">sequelize.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有表</span></span><br><span class="line">sequelize.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广播处理:</span></span><br><span class="line">sequelize.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// woot woot</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// whooops</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为 <code>.sync({ force: true })</code> 是具有破坏性的操作，可以使用 <code>match</code> 参数作为附加的安全检查。</p><p><code>match</code> 参数可以通知 <code>Sequelize</code>，以便在同步之前匹配正则表达式与数据库名称 - 在测试中使用 <code>force：true</code> 但不使用实时代码的情况下的安全检查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有当数据库名称以'_test'结尾时，才会运行.sync（）</span></span><br><span class="line">sequelize.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span>, <span class="attr">match</span>: <span class="regexp">/_test$/</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="sequelize-import"><a href="#sequelize-import" class="headerlink" title="sequelize.import"></a>sequelize.import</h2><p>您还可以使用 <code>import</code> 方法将模型定义存储在单个文件中。 返回的对象与导入文件的功能中定义的完全相同。</p><p>例如 <code>models/author.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'author'</span>, &#123;</span><br><span class="line">    username: DataTypes.STRING(<span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AuthorModel = sequelize.import(<span class="string">'./models/author.js'</span>)</span><br><span class="line"></span><br><span class="line">AuthorModel.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> author = AuthorModel.findById(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(author)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="同时导入多个-model"><a href="#同时导入多个-model" class="headerlink" title="同时导入多个 model"></a>同时导入多个 model</h3><p>再建立多一个 model <code>models/article.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'article'</span>, &#123;</span><br><span class="line">    title: DataTypes.STRING(<span class="number">50</span>),</span><br><span class="line">    content: DataTypes.STRING,</span><br><span class="line">    <span class="keyword">from</span>: &#123;</span><br><span class="line">      type: DataTypes.INTEGER,</span><br><span class="line">      references: &#123;</span><br><span class="line">        model: <span class="string">'authors'</span>,</span><br><span class="line">        key: <span class="string">'id'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MODELS_PATH = path.join(__dirname, <span class="string">'models'</span>)</span><br><span class="line"></span><br><span class="line">fs.readdirSync(MODELS_PATH).forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  sequelize.import(path.join(MODELS_PATH, file))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sequelize.sync().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">author</span>: AuthorModel, article &#125; = sequelize.models</span><br><span class="line">  AuthorModel.create(&#123; <span class="attr">username</span>: <span class="string">'guodada'</span> &#125;).then(<span class="function"><span class="params">author</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(author.username) <span class="comment">// guodada</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="扩展模型"><a href="#扩展模型" class="headerlink" title="扩展模型"></a>扩展模型</h2><p><code>Sequelize</code> 模型是ES6类。 您可以轻松添加自定义实例或类级别的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">firstname</span>: Sequelize.STRING &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个类级别的方法</span></span><br><span class="line">User.classLevelMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'foo'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加实例级别方法</span></span><br><span class="line">User.prototype.instanceLevelMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，您还可以访问实例的数据并生成虚拟的 getter:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">firstname</span>: Sequelize.STRING, <span class="attr">lastname</span>: Sequelize.STRING &#125;)</span><br><span class="line"></span><br><span class="line">User.prototype.getFullname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">this</span>.firstname, <span class="keyword">this</span>.lastname].join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line">User.build(&#123; <span class="attr">firstname</span>: <span class="string">'foo'</span>, <span class="attr">lastname</span>: <span class="string">'bar'</span> &#125;).getFullname() <span class="comment">// 'foo bar'</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><code>Sequelize</code> 支持在 <code>Model.sync()</code> 或 <code>sequelize.sync</code> 中创建的模型定义中添加索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    indexes: [</span><br><span class="line">      <span class="comment">// 在 email 上创建一个唯一索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        unique: <span class="literal">true</span>,</span><br><span class="line">        fields: [<span class="string">'email'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在使用 jsonb_path_ops 的 operator 数据上创建一个 gin 索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        fields: [<span class="string">'data'</span>],</span><br><span class="line">        using: <span class="string">'gin'</span>,</span><br><span class="line">        operator: <span class="string">'jsonb_path_ops'</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 默认的索引名将是 [table]_[fields]</span></span><br><span class="line">      <span class="comment">// 创建多列局部索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'public_by_author'</span>,</span><br><span class="line">        fields: [<span class="string">'author'</span>, <span class="string">'status'</span>],</span><br><span class="line">        where: &#123;</span><br><span class="line">          status: <span class="string">'public'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 具有有序字段的BTREE索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'title_index'</span>,</span><br><span class="line">        method: <span class="string">'BTREE'</span>,</span><br><span class="line">        fields: [<span class="string">'author'</span>, &#123; <span class="attr">attribute</span>: <span class="string">'title'</span>, <span class="attr">collate</span>: <span class="string">'en_US'</span>, <span class="attr">order</span>: <span class="string">'DESC'</span>, <span class="attr">length</span>: <span class="number">5</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><ul><li><a href="http://docs.sequelizejs.com/manual/tutorial/models-definition.html" target="_blank" rel="noopener">models-definition</a></li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/models-definition.md" target="_blank" rel="noopener">models-definition 中文版</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Model-definition-模型定义&quot;&gt;&lt;a href=&quot;#Model-definition-模型定义&quot; class=&quot;headerlink&quot; title=&quot;Model definition - 模型定义&quot;&gt;&lt;/a&gt;Model definition - 模型定义&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sequelize&lt;/code&gt; 使用 &lt;code&gt;define&lt;/code&gt; 方法定义模型和表之间的映射，&lt;code&gt;Sequelize&lt;/code&gt; 将默认添加 &lt;code&gt;createdAt&lt;/code&gt; 和 &lt;code&gt;updatedAt&lt;/code&gt; 属性。因此，您将能够知道数据库条目何时进入数据库以及最后一次更新时。&lt;br&gt;&lt;code&gt;model&lt;/code&gt; 定义格式为 &lt;code&gt;sequelize.define(&amp;#39;name&amp;#39;, {attributes}, {configuration})：&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; User = sequelize.define(&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User.sync(&amp;#123; &lt;span class=&quot;attr&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上式代码在数据库中的执行命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`users`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`users`&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; auto_increment ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`createdAt`&lt;/span&gt; DATETIME &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`updatedAt`&lt;/span&gt; DATETIME &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - quick start</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-quickStart/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-quickStart/</id>
    <published>2019-01-03T03:52:37.000Z</published>
    <updated>2019-01-08T12:34:04.395Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Node.js</code> 社区中，<code>sequelize</code> 是一个广泛使用的 <code>ORM</code> 框架，它支持 <code>MySQL</code>、<code>PostgreSQL</code>、<code>SQLite</code> 和 <code>MSSQL</code> 等多个数据源。</p><blockquote><p>有数据库基础或者使用过 <code>ORM</code> 操作数据库的经验会更容易上手哦，笔者这里用的以 <code>mysql</code> 为主</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sequelize mysql2 --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>记得提前启动 <code>mysql</code> 数据库，创建本例中使用的 <code>demo</code> 数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start <span class="comment">// mac (windows net start mysql)</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS demo;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p><code>Sequelize</code> 将在初始化时设置连接池，所以如果从单个进程连接到数据库，你最好每个数据库只创建一个实例。 如果要从多个进程连接到数据库，则必须为每个进程创建一个实例，但每个实例应具有“最大连接池大小除以实例数”的最大连接池大小。<br>因此，如果您希望最大连接池大小为 90，并且有 3 个工作进程，则每个进程的实例应具有 30 的最大连接池大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  dialect: <span class="string">'mysql'</span> | <span class="string">'mariadb'</span> | <span class="string">'sqlite'</span> | <span class="string">'postgres'</span> | <span class="string">'mssql'</span>,</span><br><span class="line"></span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    idle: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 仅 SQLite 适用</span></span><br><span class="line">  storage: <span class="string">'path/to/database.sqlite'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者可以简单的使用一个连接 uri</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'postgres://user:pass@example.com:5432/dbname'</span>)</span><br></pre></td></tr></table></figure><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>您可以使用 <code>.authenticate()</code> 函数来测试连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully.'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Unable to connect to the database:'</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p><code>Sequelize</code> 使用 <code>define</code> 方法定义模型和表之间的映射。大白话就是 我们可以通过 <code>model</code> 去建立表, 添加字段约束等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  firstName: Sequelize.STRING</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 sync 可以链接模型到数据库中</span></span><br><span class="line"><span class="comment">// force: true 如果表已经存在，将会丢弃表</span></span><br><span class="line"><span class="comment">// force 效果： DROP TABLE IF EXISTS `User` =&gt; CREATE TABLE IF NOT EXISTS `USER`...</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码执行后我们可以发现 <code>demo</code> 数据库中创建了一个 <code>users</code> 的表</p><h3 id="model-操作数据库"><a href="#model-操作数据库" class="headerlink" title="model 操作数据库"></a>model 操作数据库</h3><p>demo 就简单创建数据和查询数据吧</p><blockquote><p><code>Sequelize</code> 使用 <code>Bluebird promise</code> 来控制异步控制流程。</p></blockquote><ul><li>链式写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'John'</span>,</span><br><span class="line">    lastName: <span class="string">'Hancock'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">    User.findAll().then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>async/await</code> 写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Hancock'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> User.findAll()</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整-demo"><a href="#完整-demo" class="headerlink" title="完整 demo"></a>完整 demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @params ('database', 'username', 'password', options)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'demo'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>, <span class="comment">// 连接的 host 地址</span></span><br><span class="line">  dialect: <span class="string">'mysql'</span>, <span class="comment">// 连接到 mysql</span></span><br><span class="line">  port: <span class="number">3306</span>, <span class="comment">// 数据库服务器端口</span></span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    acquire: <span class="number">30000</span>,</span><br><span class="line">    idle: <span class="number">10000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  firstName: Sequelize.STRING,</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully'</span>)</span><br><span class="line">    User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Hancock'</span> &#125;)</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> User.findAll()</span><br><span class="line">        <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Unable to connect to the database:'</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html" target="_blank" rel="noopener">sequelize - getting started</a></li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/getting-started.md" target="_blank" rel="noopener">sequelize - 中文版入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;Node.js&lt;/code&gt; 社区中，&lt;code&gt;sequelize&lt;/code&gt; 是一个广泛使用的 &lt;code&gt;ORM&lt;/code&gt; 框架，它支持 &lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;PostgreSQL&lt;/code&gt;、&lt;code&gt;SQLite&lt;/code&gt; 和 &lt;code&gt;MSSQL&lt;/code&gt; 等多个数据源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有数据库基础或者使用过 &lt;code&gt;ORM&lt;/code&gt; 操作数据库的经验会更容易上手哦，笔者这里用的以 &lt;code&gt;mysql&lt;/code&gt; 为主&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i sequelize mysql2 --registry=https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记得提前启动 &lt;code&gt;mysql&lt;/code&gt; 数据库，创建本例中使用的 &lt;code&gt;demo&lt;/code&gt; 数据库&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql.server start &lt;span class=&quot;comment&quot;&gt;// mac (windows net start mysql)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE IF NOT EXISTS demo;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>mysql - 聚合函数</title>
    <link href="https://gershonv.github.io/2018/12/31/mysql-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>https://gershonv.github.io/2018/12/31/mysql-聚合函数/</id>
    <published>2018-12-31T08:19:35.000Z</published>
    <updated>2019-01-04T14:14:13.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="聚合函数（aggregation-function）"><a href="#聚合函数（aggregation-function）" class="headerlink" title="聚合函数（aggregation function）"></a>聚合函数（aggregation function）</h2><blockquote><p>聚合函数（<code>aggregation function</code>）—也就是组函数，在一个行的集合（一组行）上进行操作，对每个组给一个结果。</p></blockquote><p>常用的组函数：</p><table><thead><tr><th>function</th><th>return</th></tr></thead><tbody><tr><td>AVG([distinct] expr)</td><td>求平均值</td></tr><tr><td>COUNT({*  [distinct] } expr)</td><td>统计行的数量</td></tr><tr><td>MAX([distinct] expr)</td><td>求最大值</td></tr><tr><td>MIN([distinct] expr)</td><td>求最小值</td></tr><tr><td>SUM([distinct] expr)</td><td>求累加和</td></tr></tbody></table><a id="more"></a><ol><li>每个组函数接收一个参数</li><li>默认情况下，组函数忽略列值为null的行，不参与计算</li><li>有时，会使用关键字distinct剔除字段值重复的条数</li></ol><p>注意：</p><ul><li>当使用组函数的 <code>select</code> 语句中没有 <code>group by</code> 子句时，中间结果集中的所有行自动形成一组，然后计算组函数；</li><li>组函数不允许嵌套，例如：<code>count(max(…))</code>；</li><li>组函数的参数可以是列或是函数表达式；</li><li>一个 <code>SELECT</code> 子句中可出现多个聚集函数。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users;</span><br><span class="line">+----+----------+------+---------------------+---------------------+</span><br><span class="line">| id | name     | age  | createdAt           | updatedAt           |</span><br><span class="line">+----+----------+------+---------------------+---------------------+</span><br><span class="line">|  1 | guodada  |   18 | 2019-10-04 05:56:52 | 2019-10-04 05:56:52 |</span><br><span class="line">|  2 | guodada2 |   18 | 2019-10-04 05:57:01 | 2019-10-04 05:57:01 |</span><br><span class="line">|  3 | guodada3 | NULL | 2019-10-04 05:58:00 | 2019-10-04 05:58:00 |</span><br><span class="line">+----+----------+------+---------------------+---------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="count-函数"><a href="#count-函数" class="headerlink" title="count 函数"></a>count 函数</h2><p>① <code>count(*)</code>：返回表中满足 <code>where</code> 条件的行的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> age &gt; <span class="number">10</span> <span class="comment">-- count 3</span></span><br></pre></td></tr></table></figure><p>② <code>count(列)</code>：返回列值非空的行的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(age) <span class="keyword">AS</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- count 2</span></span><br></pre></td></tr></table></figure><p>③ <code>count(distinct 列)</code>：返回列值非空的、并且列值不重复的行的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">distinct</span> age) <span class="keyword">AS</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- count 1</span></span><br></pre></td></tr></table></figure><p>④ <code>count(expr)</code>：根据表达式统计数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(age=<span class="number">18</span>) <span class="keyword">AS</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="keyword">users</span>; <span class="comment">-- count 2</span></span><br></pre></td></tr></table></figure><h2 id="max-和-min-函数—统计列中的最大最小值"><a href="#max-和-min-函数—统计列中的最大最小值" class="headerlink" title="max 和 min 函数—统计列中的最大最小值"></a>max 和 min 函数—统计列中的最大最小值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(age) <span class="keyword">as</span> maxAge <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- maxAge 18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(age) <span class="keyword">as</span> minAge <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- minAge 18</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果统计的列中只有 <code>NULL</code> 值，那么 <code>MAX</code> 和 <code>MIN</code> 就返回 <code>NULL</code></p></blockquote><h2 id="sum-和-avg-函数—求和与求平均"><a href="#sum-和-avg-函数—求和与求平均" class="headerlink" title="sum 和 avg 函数—求和与求平均"></a>sum 和 avg 函数—求和与求平均</h2><p>！！表中列值为 <code>null</code> 的行不参与计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(age) <span class="keyword">as</span> avgAge <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- avgAge 18</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(age) <span class="keyword">as</span> snmAge <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="comment">-- sumAge 36</span></span><br></pre></td></tr></table></figure><p>注意：要想列值为 <code>NULL</code> 的行也参与组函数的计算，必须使用 <code>IFNULL</code> 函数对 <code>NULL</code> 值做转换。</p><h2 id="分组聚合查询"><a href="#分组聚合查询" class="headerlink" title="分组聚合查询"></a>分组聚合查询</h2><p>分组 SELECT 的基本格式：</p><p><code>select [聚合函数] 字段名 from 表名 [where 查询条件] [group by 字段名] [having 过滤条件]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, count(*) as count from users <span class="built_in">where</span> age &gt; 10 group by name;</span><br><span class="line">+----------+-------+</span><br><span class="line">| name     | count |</span><br><span class="line">+----------+-------+</span><br><span class="line">| guodada  |     1 |</span><br><span class="line">| guodada2 |     1 |</span><br><span class="line">+----------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>通过 <code>select</code> 在返回集字段中，这些字段要么就要包含在 <code>group by</code> 语句后面，作为分组的依据，要么就要被包含在聚合函数中。我们可以将 <code>group by</code> 操作想象成如下的一个过程：首先系统根据 <code>select</code> 语句得到一个结果集，然后根据分组字段，将具有相同分组字段的记录归并成了一条记录。这个时候剩下的那些不存在与 <code>group by</code> 语句后面作为分组依据的字段就很有可能出现多个值，但是目前一种分组情况只有一条记录，一个数据格是无法放入多个数值的，所以这个时候就需要通过一定的处理将这些多值的列转化成单值，然后将其放在对应的数据格中，那么完成这个步骤的就是前面讲到的聚合函数，这也就是为什么这些函数叫聚合函数了。</p><ul><li><a href="https://www.cnblogs.com/geaozhang/p/6745147.html#sum-avg" target="_blank" rel="noopener">MySQL最常用分组聚合函数</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;聚合函数（aggregation-function）&quot;&gt;&lt;a href=&quot;#聚合函数（aggregation-function）&quot; class=&quot;headerlink&quot; title=&quot;聚合函数（aggregation function）&quot;&gt;&lt;/a&gt;聚合函数（aggregation function）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;聚合函数（&lt;code&gt;aggregation function&lt;/code&gt;）—也就是组函数，在一个行的集合（一组行）上进行操作，对每个组给一个结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的组函数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;function&lt;/th&gt;
&lt;th&gt;return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AVG([distinct] expr)&lt;/td&gt;
&lt;td&gt;求平均值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COUNT({*  [distinct] } expr)&lt;/td&gt;
&lt;td&gt;统计行的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAX([distinct] expr)&lt;/td&gt;
&lt;td&gt;求最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIN([distinct] expr)&lt;/td&gt;
&lt;td&gt;求最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUM([distinct] expr)&lt;/td&gt;
&lt;td&gt;求累加和&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>mysql - column 的增删改查</title>
    <link href="https://gershonv.github.io/2018/12/30/mysql-3/"/>
    <id>https://gershonv.github.io/2018/12/30/mysql-3/</id>
    <published>2018-12-30T10:37:33.000Z</published>
    <updated>2019-01-03T15:00:29.431Z</updated>
    
    <content type="html"><![CDATA[<p>创建数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DROP TABLE users; 创建过 users 表可以使用这个语句删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">users</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  age TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">  sex TINYINT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li>INSERT INTO 表名 VALUE</li><li>INSERT INTO 表名 set 列名 = xxx (可以进行子查询)</li><li>INSERT INTO 表名 SELECT ,,,,,,, (将查询结果插入指定的表中)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'TOM'</span>, <span class="string">'1234'</span>, <span class="number">22</span>, <span class="number">1</span>); <span class="comment">-- 一个列都不能漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'TOM'</span>, <span class="string">'1234'</span>, <span class="number">22</span>, <span class="number">1</span>), (<span class="keyword">DEFAULT</span>, <span class="string">'Jhon'</span>, <span class="string">'4321'</span>, <span class="keyword">DEFAULT</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- set方法 与第一种方式的区别是，此方法可以使用子查询，但是一次性只能插入一条记录。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">SET</span> username=<span class="string">'BEN'</span>,<span class="keyword">password</span>=<span class="string">'569'</span>; <span class="comment">--其余字段有默认值或者允许为空</span></span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>UPDATA 表名 SET 字段名=值|表达式 WHERE 判断条件 (如省略 where 筛选,则更新所有记录)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age=age-<span class="keyword">id</span>,sex=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age=age+<span class="number">10</span> <span class="keyword">where</span> <span class="keyword">id</span> % <span class="number">2</span> =<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure><h2 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查找记录：<span class="keyword">SELECT</span> select_expr [,select_expr ……]</span><br><span class="line">[<span class="keyword">FROM</span> table_referrnces [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>&#123;col_name | <span class="keyword">position</span>&#125; [<span class="keyword">ASC</span> | DESCI],……]</span><br><span class="line">[<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name |expr |<span class="keyword">position</span>&#125; [<span class="keyword">ASC</span> | DESCI],……]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> userId, username <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><h3 id="查询分组"><a href="#查询分组" class="headerlink" title="查询分组"></a>查询分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex  <span class="comment">-- 数据库多条记录会被合并，譬如这里只有 1, null</span></span><br></pre></td></tr></table></figure><ul><li>分组条件 [HAVING where_condotion]</li></ul><p><code>having</code> 后的条件必须为聚合函数或者出现在 <code>select</code> 所选择的字段中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="comment">-- 对所有记录分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错 having 后的条件必须为聚合函数或者出现在 select 所选择的字段中。</span></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">by</span> sex  <span class="keyword">having</span> age&gt;<span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">id</span>) &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先按照age升序排列（asc），其次按照id降序排列（desc）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,<span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>限制返回的数据的数量</li></ul><ol><li>select _ from users limit 2 意思为从取前两条记录。</li><li>select _ from users limit 3,2 意思为从第 4 条记录开始取两条，而不是从第三条记录开始。</li><li>…</li></ol><h3 id="子查询与链接"><a href="#子查询与链接" class="headerlink" title="子查询与链接"></a>子查询与链接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb4(</span><br><span class="line">  goodsId <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  goodsName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  price <span class="built_in">FLOAT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> tb4 <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'goods1'</span>, <span class="number">12.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods2'</span>, <span class="number">95.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods3'</span>, <span class="number">15.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods2'</span>, <span class="number">50.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(price) <span class="keyword">from</span> tb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对平均值四舍五入</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4; <span class="comment">-- 保留两位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用比较</span></span><br><span class="line"><span class="keyword">select</span> goodsId, goodsName, price <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找大于平均价格的</span></span><br><span class="line"><span class="keyword">select</span> goodsId, goodsName, price <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= (<span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">运算符/关键字</th><th style="text-align:center">ANY</th><th style="text-align:center">SOME</th><th style="text-align:center">ALL</th></tr></thead><tbody><tr><td style="text-align:center">&gt;、&gt;=</td><td style="text-align:center">最小值</td><td style="text-align:center">最小值</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">&lt;、&lt;=</td><td style="text-align:center">最大值</td><td style="text-align:center">最大值</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">任意值</td><td style="text-align:center">任意值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&gt;、!=</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">任意值</td></tr></tbody></table><p>使用[NOT]EXISTS 的子查询：如果子查询返回任何行，EXISTS 将返回 TURE；否则返回 FALSE.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= all (<span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4); <span class="comment">-- 任意大于平均价格的记录</span></span><br></pre></td></tr></table></figure><h2 id="数据增删改查-demo（单表）"><a href="#数据增删改查-demo（单表）" class="headerlink" title="数据增删改查-demo（单表）"></a>数据增删改查-demo（单表）</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> goods (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  price <span class="built_in">FLOAT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">  origin <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">'CHINA'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入单条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'oppo'</span>, <span class="number">5399</span>, <span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'iphone'</span>, <span class="number">8999</span>, <span class="string">'US'</span>), (<span class="literal">NULL</span>, <span class="string">'meizu'</span>, <span class="number">6999</span>, <span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SET 插入</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'xiaomi'</span>, price=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SET 插入多条</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods (goodsName, price) <span class="keyword">VALUES</span>(<span class="string">'ss'</span>,<span class="number">25</span>),(<span class="string">'bb'</span>,<span class="number">125</span>);</span><br></pre></td></tr></table></figure><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> goodsName, price <span class="keyword">FROM</span> goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> goodsName, price <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> price &gt; <span class="number">1000</span>; <span class="comment">-- 加条件筛选</span></span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找到 iphone , 修改名字为 iphonX, 价格 9999</span></span><br><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> goodsName=<span class="string">'iphonX'</span>, price=<span class="number">9999</span> <span class="keyword">WHERE</span> goodsName=<span class="string">'iphone'</span>;</span><br></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> goodsName=<span class="string">'ss'</span>; <span class="comment">-- DELETE FROM goods 删除所有</span></span><br></pre></td></tr></table></figure><p>多表有 <code>left join</code> 、 <code>inner</code> 等等，这里不再讲述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建数据&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- DROP TABLE users; 创建过 users 表可以使用这个语句删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 创建表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;SMALLINT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  username &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age TINYINT &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex TINYINT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>mysql - 对 table 的操作</title>
    <link href="https://gershonv.github.io/2018/12/30/mysql-2/"/>
    <id>https://gershonv.github.io/2018/12/30/mysql-2/</id>
    <published>2018-12-30T05:15:47.000Z</published>
    <updated>2019-01-03T15:00:58.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql.server <span class="keyword">start</span> // net <span class="keyword">start</span> mysql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p // login</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span> // 进入数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name (</span><br><span class="line">  column_name data_type,</span><br><span class="line">  // ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><p>创建 <code>tb1</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb1 (</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  age TINYINT <span class="keyword">UNSIGNED</span>,</span><br><span class="line">  salary <span class="built_in">FLOAT</span>(<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOIW TABLES; <span class="comment">--查看数据库中的表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> tb1; <span class="comment">--查看数据表中的结构</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Null</th><th style="text-align:center">Key</th><th style="text-align:center">Default</th><th style="text-align:center">Extra</th></tr></thead><tbody><tr><td style="text-align:center">username</td><td style="text-align:center">varchar(20)</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">tinyint(3) unsigned</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">salary</td><td style="text-align:center">float(8,2) unsigned</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td></tr></tbody></table><ul><li>username: 用户的名字往往是字符型，字符数据量小，所以数据类型定为 <code>VARCHAR(20)</code>, <code>NOT NULL</code> 不能为空</li><li>age: 年龄不能为负值且为整型，数据类型定为 <code>TINYINT</code></li><li>salary: <code>FLOAT(8, 2)</code> 整数八位 - 小数有两位，非负值</li></ul><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb3(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>,</span><br><span class="line">  sex ENUM (<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>) <span class="keyword">DEFAULT</span> <span class="string">'3'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT: 自增字段，必须为主键 `PRIMARY KEY`，保证记录的唯一性.</span></span><br><span class="line"><span class="comment">-- UNIQUE KEY: 唯一</span></span><br><span class="line"><span class="comment">-- DEFAULT: 默认</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Null</th><th style="text-align:center">Key</th><th style="text-align:center">Default</th><th style="text-align:center">Extra</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">smallint(5)</td><td style="text-align:center">NO</td><td style="text-align:center">PRI</td><td style="text-align:center">null</td><td style="text-align:center">auto_increment</td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">varchar(20)</td><td style="text-align:center">NO</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sex</td><td style="text-align:center">enum(‘1’,’2’,’3’)</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">3</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>约束保证数据的完整性和一致性。</li><li>约束表现为表级约束和列级约束。</li><li>约束类型包括<ul><li><code>NOT NULL</code> 非空</li><li><code>PRIMARY KEY</code> 主键</li><li><code>UNIQUE</code> 唯一</li><li><code>DEFAULT</code> 默认</li><li><code>FOREIGN KEY</code> 外键 (foreign key)</li></ul></li></ul><blockquote><p>外键约束：保持数据一致性，完整性，实现一对多或者多对一的关系</p></blockquote><blockquote><p>表级约束：针对两个或者两个以上的字段来使用</p></blockquote><blockquote><p>列级约束：只针对某一个字段来使用</p></blockquote><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ol><li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表</li><li>数据表的存储引擎只能为 InnoDB</li><li>外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同。</li><li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL 将自动创建索引。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 身份表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> provinces (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  pname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">users</span> (</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">   username <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   pid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">   FOREIGN <span class="keyword">KEY</span>(pid) <span class="keyword">REFERENCES</span> provinces(<span class="keyword">id</span>) <span class="comment">-- 设置 pid 外键 references provinces 表的 id</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键列和参照列必须具有相似的数据类型: pid BIGINT， 是创建不成功的。保证数据类型相同是第一步</span></span><br><span class="line"><span class="comment">-- 数字的长度或是否有符号位必须相同：pid SMALLINT, 同样创建不成功。有符号位位必须相同。pid SMALLINT UNSIGNED 就满足条件了</span></span><br><span class="line"><span class="comment">-- 外键列和参照列必须创建索引:, 我们没有创建，MySQL 自动创建了索引。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键在创建的同时，会自动创建索引。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEXES</span> <span class="keyword">FROM</span> provinces\G; <span class="comment">-- Seq_in_index: 1</span></span><br></pre></td></tr></table></figure><ol><li>我们创建了父表 <code>provinces</code>, 子表 <code>users</code></li><li>外键列：pid , 参照列 id</li></ol><h2 id="对-table-column-的操作"><a href="#对-table-column-的操作" class="headerlink" title="对 table column 的操作"></a>对 table column 的操作</h2><p>列的增加、删除，约束的添加、约束的删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加单列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> [<span class="keyword">column</span>] col_name col_difinition[<span class="keyword">first</span>|<span class="keyword">after</span> col_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解释：first 插入第一列，after col_name 插入某一列后面。省略不写，加在最后列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加多列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> [<span class="keyword">column</span>] (col_name col_difinition,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">drop</span>[<span class="keyword">column</span>] col_name1,col_name2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> age TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AFTER</span> username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">DROP</span> <span class="keyword">password</span>, <span class="keyword">DROP</span> username;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据表【添加或删除约束】：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] PRIMARY <span class="keyword">KEY</span> [index_type](index_col_name,...) <span class="comment">-- 这是添加主键约束(只能有一个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] <span class="keyword">UNIQUE</span> [<span class="keyword">INDEX</span>/<span class="keyword">KEY</span>] [index_name] [index_type] (index_col_name,...); <span class="comment">--这是添加唯一约束(可以有多个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] FOREIGN <span class="keyword">KEY</span> [index_name] (index_col_name,...) reference_definition; <span class="comment">--这是添加外键约束(可以有多个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] col_name &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> literal(这个literal的意思是加上的<span class="keyword">default</span>)/<span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125; <span class="comment">--添加或删除默认约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>; <span class="comment">-- 删除主键约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> &#123;<span class="keyword">INDEX</span>/<span class="keyword">KEY</span>&#125; index_name; <span class="comment">--删除唯一约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span> fk_symbol; <span class="comment">--删除外键约束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> users2 (</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  pid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (username);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span> (pid) <span class="keyword">REFERENCES</span> provinces (<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> age TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ALTER</span> age <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ALTER</span> age <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> username;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users2 <span class="comment">--  CONSTRAINT `users2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> FOREIGN <span class="keyword">key</span> users2_ibfk_1;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql.server &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; // net &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p // login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt; // 进入数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt;] table_name (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  column_name data_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>mysql - 数据库操作和数据属性</title>
    <link href="https://gershonv.github.io/2018/12/29/mysql-1/"/>
    <id>https://gershonv.github.io/2018/12/29/mysql-1/</id>
    <published>2018-12-29T02:18:35.000Z</published>
    <updated>2019-01-03T15:01:08.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>启动 <code>mysql</code>, <code>mac</code> 可通过 <code>brew</code> 安装 <code>mysql</code> 后启动。 <code>window</code> 需要手动配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mac</span></span><br><span class="line">mysql.server start</span><br><span class="line"></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录 -u 用户名 root 超级用户 -p 密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line">mysql &gt; \q</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到 learn 数据库</span></span><br><span class="line">mysql &gt; use learn</span><br></pre></td></tr></table></figure><a id="more"></a><p>MySQL 语句规范</p><ul><li>关键字与函数名称全部大写</li><li>数据库名称，表名称，字段名称全部小写</li><li>SQL 语句必须以分号结尾</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数据库 默认编码 utf-8</span></span><br><span class="line">CREATE DATABASE IF NOT EXISTS t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 gbk 编码的数据库</span></span><br><span class="line">CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示创建数据库 t1 的指令</span></span><br><span class="line">SHOW CREATE DATABASE t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看数据库</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据库</span></span><br><span class="line">DROP DATABASE IF EXISTS t1;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th>MySQL 数据类型</th><th>含义</th><th>（有符号）</th></tr></thead><tbody><tr><td>tinyint(m)</td><td>1 个字节</td><td>范围(-128~127)</td></tr><tr><td>smallint(m)</td><td>2 个字节</td><td>范围(-32768~32767)</td></tr><tr><td>mediumint(m)</td><td>3 个字节</td><td>范围(-8388608~8388607)</td></tr><tr><td>int(m)</td><td>4 个字节</td><td>范围(-2147483648~2147483647)</td></tr><tr><td>bigint(m)</td><td>8 个字节</td><td>范围(+-9.22*10 的 18 次方)</td></tr></tbody></table><p>比如我们存储年龄，范围为 0-100 ，此时我们可以使用 <code>TINYINT</code> 存储</p><h3 id="浮点型-float和double"><a href="#浮点型-float和double" class="headerlink" title="浮点型(float和double)"></a>浮点型(float和double)</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m,d)</td><td>单精度浮点型 8位精度(4字节)  m总个数，d小数位</td></tr><tr><td>double(m,d)</td><td>双精度浮点型 16位精度(8字节)  m总个数，d小数位</td></tr></tbody></table><p>设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位。整数部分最大是3位，如果插入数12.123456，存储的是12.1234，如果插入12.12，存储的是12.1200.</p><h3 id="字符串-char-varchar-text"><a href="#字符串-char-varchar-text" class="headerlink" title="字符串(char,varchar,_text)"></a>字符串(char,varchar,_text)</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>固定长度，最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><p><code>char</code>和<code>varchar</code>：</p><p>1.<code>char(n)</code> 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，<code>varchar</code>不限于此。 </p><p>2.<code>char(n)</code> 固定长度，char(4)不管是存入几个字符，都将占用4个字节，<code>varchar</code>是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，</p><p>所以<code>varchar</code>(4),存入3个字符将占用4个字节。 </p><p>3.char类型的字符串检索速度要比<code>varchar</code>类型的快。<br><code>varchar</code>和<code>text</code>： </p><p>1.<code>varchar</code>可指定n，<code>text</code>不能指定，内部存储<code>varchar</code>是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，<code>text</code>是实际字符数+2个字</p><p>节。 </p><p>2.<code>text</code>类型不能有默认值。 </p><p>3.<code>varchar</code>可直接创建索引，<code>text</code>创建索引要指定前多少个字符。<code>varchar</code>查询速度快于<code>text</code>,在都创建索引的情况下，<code>text</code>的索引似乎不起作用。</p><p>5.二进制数据(_Blob)</p><p>1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。</p><p>2._BLOB存储的数据只能整体读出。 </p><p>3._TEXT可以指定字符集，_BLO不用指定字符集。</p><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>日期 ‘2008-12-2’</td></tr><tr><td>time</td><td>时间 ‘12:25:36’</td></tr><tr><td>datetime</td><td>日期时间 ‘2008-12-2 22:06:44’</td></tr><tr><td>timestamp</td><td>自动存储记录修改时间</td></tr></tbody></table><h2 id="数据类型的属性"><a href="#数据类型的属性" class="headerlink" title="数据类型的属性"></a>数据类型的属性</h2><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h2&gt;&lt;p&gt;启动 &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt; 可通过 &lt;code&gt;brew&lt;/code&gt; 安装 &lt;code&gt;mysql&lt;/code&gt; 后启动。 &lt;code&gt;window&lt;/code&gt; 需要手动配置&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql.server start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net start mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 登录 -u 用户名 root 超级用户 -p 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; \q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 切换到 learn 数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; use learn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>随笔 - 如何用es6+写出优雅的js代码</title>
    <link href="https://gershonv.github.io/2018/12/12/%E9%9A%8F%E7%AC%94-%E5%A6%82%E4%BD%95%E7%94%A8es6+%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>https://gershonv.github.io/2018/12/12/随笔-如何用es6+写出优雅的js代码/</id>
    <published>2018-12-12T01:59:21.000Z</published>
    <updated>2019-01-03T15:05:02.621Z</updated>
    
    <content type="html"><![CDATA[<p>兼容 IE ？不存在的好吗。</p><p>其实使用新语法配合 <code>babel</code> 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。</p><p>下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。</p><h2 id="使用-let-const"><a href="#使用-let-const" class="headerlink" title="使用 let / const"></a>使用 let / const</h2><p><code>var</code> 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 <code>undefined</code>。这种现象多多少少是有些奇怪的。</p><p>个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 <code>const</code>, 代码的可读性也会增强很多。</p><ul><li><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</li><li><code>let</code> 变量指向的内存地址，保存的只是一个指向实际数据的指针</li></ul><p>补充 <code>const</code> 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">person.age = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>详情看 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">let 和 const 命令</a></p><a id="more"></a><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（<code>Destructuring</code>）。</p><p>好处就是：解决了访问多层嵌套的对象或数组的命名，减少代码量</p><p>声明多个变量:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(age, name, sex) <span class="comment">// 22, guodada, 1</span></span><br></pre></td></tr></table></figure><p>使用在对象中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    firstName: <span class="string">'guo'</span>,</span><br><span class="line">    lastName: <span class="string">'dada'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们多处使用 firstName， 那就不必要每个地方都写 obj.name.firstName, 这样极大提升coding效率</span></span><br><span class="line"><span class="keyword">const</span> &#123; firstName, lastName &#125; = obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> firstName = obj.name.firstName</span><br><span class="line"><span class="keyword">const</span> lastName = obj.name.lastName</span><br></pre></td></tr></table></figure><p>使用在函数中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在参数中结构赋值，获取参数, 当参数多的使用时候十分方便</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Destructuring</span>(<span class="params">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; name, age &#125; <span class="comment">// 相当于 &#123; name: name, age: age &#125; , 可以简写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">Destructuring(params)</span><br></pre></td></tr></table></figure><p>更多用法见 <a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">变量的解构赋值</a></p><p>ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: x, <span class="attr">y</span>: y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="扩展符的运用"><a href="#扩展符的运用" class="headerlink" title="扩展符的运用"></a>扩展符的运用</h2><p>es6 扩展符有很多用法，他可以使你的代码更加简洁，易懂。这里就举例常用的用法</p><p>在对象中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guodada'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  sex: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制对象。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...obj &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改对象属性值(生成新对象) 相当于 Object.assgin(&#123;&#125;, obj, &#123; age: 18 &#125;)</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合结构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; sex, ...z &#125; = obj</span><br><span class="line">z <span class="comment">// &#123; name: 'guodada', age: 22 &#125;</span></span><br></pre></td></tr></table></figure><p>在数组中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制数组。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr] <span class="comment">// ...[1, 2, 3] =&gt; 相当于展开数组：1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> conbineArr = [...arr, ...arr2]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合求最大值函数</span></span><br><span class="line"><span class="built_in">Math</span>.max(...arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合 Set 实现数组去重。注意：json 等对象数组不可用</span></span><br><span class="line">[...new <span class="built_in">Set</span>(arr2)] <span class="comment">// [4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>扩展符的其他用法请自行查资料。</p><h2 id="数组用法"><a href="#数组用法" class="headerlink" title="数组用法"></a>数组用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// 判断是否为数组</span></span><br><span class="line"></span><br><span class="line">arr.includes(<span class="number">2</span>) <span class="comment">// true 判断数组中是否包含某项</span></span><br><span class="line"></span><br><span class="line">arr.findIndex(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 2 找出第一个符合条件的数组成员并返回数组下标, 找不到返回 -1</span></span><br><span class="line"></span><br><span class="line">arr.find(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 3 找出第一个符合条件的数组成员并返回, 找不到返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 其他还有 filter map forEach 等，这里不做举例。</span></span><br><span class="line">arr.every(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// false 每一项都满足条件则返回 true</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// true 只要有一项满足条件则返回 true</span></span><br></pre></td></tr></table></figure><p><code>find/findIndex</code> : 找出第一个符合条件的数组成员之后不再匹配，一定程度下优化查找。<br><code>includes</code>: 返回 <code>true/false</code>, 相较于 <code>indexOf</code>, 实用多了</p><ul><li><p><code>flat()</code> : 扁平化数组，常用于将数组转化为一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">arr.flat() <span class="comment">// [1, 2, 3, 4] 扁平化数组, 默认展开一层。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"></span><br><span class="line">arr2.flat() <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line">arr2.flat(<span class="number">2</span>) <span class="comment">// [1, 2, 3, 4, 5, 6] flat(3) 也是展开两层...</span></span><br></pre></td></tr></table></figure></li><li><p><code>flatMap()</code>: 在数组执行 <code>map</code> 方法后执行 <code>flat</code>, 用的不多，其实可以写 <code>map</code> 后写 <code>flat</code> 更好懂点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//  [ 2, 4, 3, 6, 4, 8 ]</span></span><br><span class="line"><span class="comment">// 1. [2, 3, 4].map(d =&gt; [d, d * 2]) =&gt; [[2, 4], [3, 6], [4, 8]]</span></span><br><span class="line"><span class="comment">// 2. [[2, 4], [3, 6], [4, 8]].flat()</span></span><br></pre></td></tr></table></figure></li></ul><p>补充常用的对象转数组的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ['name']</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj) <span class="comment">// ['guodada']</span></span><br><span class="line"><span class="built_in">Object</span>.entries(obj) <span class="comment">// [['name', 'guodada']]</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用的挺多的，注意不兼容 <code>IE</code> !</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'guodada'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">`welcome <span class="subst">$&#123;name&#125;</span>`</span> <span class="comment">// welcome guodada</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">'welcome '</span> + name</span><br></pre></td></tr></table></figure><h2 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async / await"></a>使用 async / await</h2><p><code>async/await</code> 实际上就是 <code>generator</code> 的语法糖, 主要用来解决异步问题，具体网上很多文章都有介绍，这里就不做多的解释吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios.get(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res)) <span class="comment">// axios 也是 promise 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合try/catch</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps 虽然好用，但是有时候适用场景不好，比如我们在拉取列表和用户信息需要同时进行时，<code>await</code> 后才执行下一条语句，这不是我们希望看到的。解决方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Promise.all</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([anAsyncCall(), thisIsAlsoAsync(), oneMore()])</span><br></pre></td></tr></table></figure><p>传送门：<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async 函数</a></p><h2 id="利用-class-封装代码"><a href="#利用-class-封装代码" class="headerlink" title="利用 class 封装代码"></a>利用 class 封装代码</h2><p>主要是抽离代码逻辑，使得代复用性加强。同时，<code>class</code> 的形式会让结构变得更加清晰，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func defaultLimit - 默认表单输入限制条件, value 为空时返回 true</span></span><br><span class="line"><span class="comment">   * @param &#123;Number&#125; type - 代表表单类型的节点！</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; value - 需要被验证的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment">   * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment">   * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment">   * 3 1≤x 整数</span></span><br><span class="line"><span class="comment">   * 4 0≤x≤10</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> defaultLimit(type, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> typeLimitMap = &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">      <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span>,</span><br><span class="line">      <span class="number">4</span>: <span class="function"><span class="params">value</span> =&gt;</span> value &lt;= <span class="number">10</span> &amp;&amp; value &gt;= <span class="number">0</span> <span class="comment">// 0≤ x ≤ 10 可以为小数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!typeLimitMap[type] || !value) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> typeLimitMap[type] === <span class="string">'function'</span>) <span class="keyword">return</span> typeLimitMap[type](value)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> typeLimitMap[type].test(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func translateLimit - 转换操作符</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; operator - 运算符</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; value - 被匹配的值</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; compareValue - 匹配的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   * 'eq': '='</span></span><br><span class="line"><span class="comment">   * 'ne': '≠'</span></span><br><span class="line"><span class="comment">   * 'gt': '&gt;'</span></span><br><span class="line"><span class="comment">   * 'lt': '&lt;'</span></span><br><span class="line"><span class="comment">   * 'ge': '≥'</span></span><br><span class="line"><span class="comment">   * 'le': '≤'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> translateLimit(operator, value, compareValue) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = &#123;</span><br><span class="line">      eq: value === compareValue,</span><br><span class="line">      ne: value !== compareValue,</span><br><span class="line">      gt: value &gt; compareValue,</span><br><span class="line">      lt: value &lt; compareValue,</span><br><span class="line">      ge: value &gt;= compareValue,</span><br><span class="line">      le: value &lt;= compareValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(type).includes(operator) || !value || value === <span class="string">'-'</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> type[operator]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyForm</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyForm <span class="keyword">from</span> <span class="string">'./MyForm'</span></span><br><span class="line"></span><br><span class="line">MyForm.defaultLimit(<span class="number">1</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><code>static</code> ：静态属性，类可以直接调用</li><li><code>constructor</code> : 实例化类的时候调用，即 <code>new MyForm()</code>, 这里没用到</li></ul><p>更多知识请阅 <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">Class 的基本语法</a></p><h2 id="优化-if-else-语句"><a href="#优化-if-else-语句" class="headerlink" title="优化 if/else 语句"></a>优化 if/else 语句</h2><blockquote><p>当逻辑或<code>||</code>时，找到为 <code>true</code> 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。</p><p>当逻辑与<code>&amp;&amp;</code>时，找到为 <code>false</code> 的分项就停止处理，并返回该分项的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> || <span class="literal">null</span> || <span class="number">3</span> || <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span> &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>减少 <code>if / else</code>地狱般的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'guodada'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者(太长了不推荐)</span></span><br><span class="line">age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br></pre></td></tr></table></figure><p>提一下 <code>react</code> 的坑点, 在 <code>render</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">return</span> arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染出 0 ！</span></span><br><span class="line"><span class="comment">// Boolean / undefind / null / NaN 等才不会渲染。我们可以使用 !! 强制转化为 boolean 解决这个问题</span></span><br><span class="line"><span class="keyword">return</span> !!arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp; 控制组件的渲染</span></span><br><span class="line"><span class="keyword">this</span>.state.visible &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Modal</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>Array.includes</code> 来处理多重条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">18</span>, <span class="number">20</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">18</span> || age === <span class="number">12</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="number">18</span>, <span class="number">12</span>].includes(age)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是较少的判断逻辑则可以使用三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">22</span></span><br><span class="line"><span class="keyword">const</span> isAdult = age &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">// 这里可以简写为 const isAdult = age &gt; 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> type = age &gt;= <span class="number">18</span> ? <span class="string">'adult'</span> : <span class="string">'child'</span></span><br></pre></td></tr></table></figure><h2 id="优化-switch-case-语句"><a href="#优化-switch-case-语句" class="headerlink" title="优化 switch/case 语句"></a>优化 switch/case 语句</h2><p><code>switch/case</code> 比 <code>if/else</code> 代码结构好点，但也和它一样有时十分冗长。</p><p>这里以自己实际项目中代码举例：<br>有时我们可能需要对不同类型的字段进行不一样的正则验证，防止用户错误地输入。譬如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [type, value] = [<span class="number">1</span>, <span class="string">'20'</span>]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment"> * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment"> * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment"> * 3 1≤x 整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func1(type, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 switch/case</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func2(type, value)</span><br></pre></td></tr></table></figure><p>我们如何巧妙的解决这个代码冗长的问题呢，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> limitMap = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> limitMap[type].test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用对象去匹配属性值，可以减少你的代码量，也使你的代码看起来更加简洁。你也可以使用 <code>Map</code> 对象去匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapArr = [[<span class="number">1</span>, /^(\d|[<span class="number">1</span><span class="number">-4</span>]\d|<span class="number">50</span>)$/g], [<span class="number">2</span>, /^-?(\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|<span class="number">1000</span>)$|^(-|<span class="number">1</span>\d&#123;<span class="number">3</span>&#125;|<span class="number">2000</span>)$/], [<span class="number">3</span>, /^[<span class="number">1</span><span class="number">-9</span>]\d*$/]]</span><br><span class="line">  <span class="keyword">const</span> limitMap = <span class="keyword">new</span> <span class="built_in">Map</span>(mapArr)</span><br><span class="line">  <span class="keyword">return</span> limitMap.get(type).test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map</code> 是一种键值对的数据结构对象，它的匹配更加严格。它会区分开你传递的是字符串还是数字，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limitMap.get(<span class="number">1</span>) <span class="comment">// /^(\d|[1-4]\d|50)$/g</span></span><br><span class="line">limitMap.get(<span class="string">'1'</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>更多详见 <a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener">Set 和 Map 数据结构</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>函数参数默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age = <span class="number">22</span></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  age = age || <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>===</code> 代替 <code>==</code>。其实大家都懂这个的。。。</p></li><li>箭头函数，es6 最常用的语法。</li><li>return boolean<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 多此一举了，其实就等于</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>敬请各位补充。交流才能进步，相视一笑，嘿嘿。</p><ul><li><a href="https://github.com/gershonv/my-code-store" target="_blank" rel="noopener">github</a> - star 一下人生更美好</li><li><a href="https://gershonv.github.io/categories/">blog</a> - 欢迎交流</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兼容 IE ？不存在的好吗。&lt;/p&gt;
&lt;p&gt;其实使用新语法配合 &lt;code&gt;babel&lt;/code&gt; 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。&lt;/p&gt;
&lt;p&gt;下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;使用-let-const&quot;&gt;&lt;a href=&quot;#使用-let-const&quot; class=&quot;headerlink&quot; title=&quot;使用 let / const&quot;&gt;&lt;/a&gt;使用 let / const&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 &lt;code&gt;undefined&lt;/code&gt;。这种现象多多少少是有些奇怪的。&lt;/p&gt;
&lt;p&gt;个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 &lt;code&gt;const&lt;/code&gt;, 代码的可读性也会增强很多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; 变量指向的内存地址，保存的只是一个指向实际数据的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充 &lt;code&gt;const&lt;/code&gt; 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123; &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.age = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.age) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详情看 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/let&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;let 和 const 命令&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://gershonv.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>react - hooks(v16.7)</title>
    <link href="https://gershonv.github.io/2018/12/03/react-hooks/"/>
    <id>https://gershonv.github.io/2018/12/03/react-hooks/</id>
    <published>2018-12-03T07:30:32.000Z</published>
    <updated>2019-01-03T15:05:20.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文不做概念性的解析，旨在实操 <code>hooks</code>，相关资源可以自行谷歌。以下提供相关参考资料：</p><ul><li><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Introducing Hooks</a></li><li><a href="https://juejin.im/post/5be409696fb9a049b13db042" target="_blank" rel="noopener">理解 React Hooks</a></li><li><a href="https://juejin.im/post/5bffc271e51d454dca3547b1#heading-0" target="_blank" rel="noopener">React Hooks 实用指南</a> - 大都借鉴这篇文章</li><li><a href="https://juejin.im/post/5bd53d6a51882528382d8108" target="_blank" rel="noopener">Hooks 一览</a></li></ul><a id="more"></a><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><blockquote><p><code>useState</code> 可以让您的函数组件也具备类组件的 <code>state</code> 功能。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @state - state的值</span></span><br><span class="line"><span class="comment"> * @setState - 更新state的函数, 接受一个参数值来更新 state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = useState(initialState)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Base</span></span><br></pre></td></tr></table></figure><p>值得注意的是，<code>state</code> 是对象的话， <code>setState</code> 接收什么参数，就更新对象下的所有属性，而不是更新单个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [info, setInfo] = useState(&#123;</span><br><span class="line">    name: <span class="string">'guodada'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;name: &#123;info.name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;age: &#123;info.age&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setInfo(&#123; <span class="attr">name</span>: <span class="string">'Sam'</span> &#125;)&#125;&gt;setInfo&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>click button</code> =&gt; <code>info = { name: &#39;Sam&#39; }</code>，<code>age</code> 丢失。</p><p>根据业务需求，我们可以在函数组件中使用多个 <code>useState</code>，这里不再进行演示。</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><code>Effect Hook</code>: 它与 <code>React Class</code> 中的 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途。模拟的是生命周期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @didUpdate - function</span></span><br><span class="line"><span class="comment"> * @[] - 参数2为数组，不加参数或者不写的话任何state 的变化都会执行 didUpdate 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">useEffect(didUpdate, [])</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>添加第二个参数进行控制<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [count2, setCount2] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'run useEffect'</span>)</span><br><span class="line">  &#125;, [count])  <span class="comment">// 只有count 变化时才执行这个 useEffect 函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count2&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount2(count2 + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><blockquote><p><code>useReducer</code> 是 <code>useState</code> 的代提方案。当你有一些更负责的数据时可以使用它。（组件本地的redux）</p></blockquote><p>使用语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @state =&gt; your state</span></span><br><span class="line"><span class="comment"> * @dispatch</span></span><br><span class="line"><span class="comment"> *  @param &#123;state&#125; </span></span><br><span class="line"><span class="comment"> *  @param &#123;action&#125;  </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseReducer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">      <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'update'</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">name</span>: action.payload &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> state</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleNameChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">'update'</span>, <span class="attr">payload</span>: e.target.value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;你好：&#123;state.name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input onChange=&#123;handleNameChange&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">        &lt;h2&gt;Start editing to see some magic happen!<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &lt;TestUseReducer /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><blockquote><p><code>useCallback</code> 和 <code>useMemo</code> 有些相似。它接收一个内联函数和一个数组，它返回的是一个记忆化版本的函数。</p></blockquote><p>使用语法如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a), [a])</span><br></pre></td></tr></table></figure><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseCallback</span>(<span class="params">&#123; num &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这里监听 num 值的更新重新做一些操作和计算'</span>)</span><br><span class="line">      num.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item++ )</span><br><span class="line">      <span class="keyword">return</span> num</span><br><span class="line">    &#125;,</span><br><span class="line">    [num]</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'记忆 num &gt; '</span>, memoizedCallback())</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'原始 num &gt; '</span>, num)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">num</span>: num1, <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">        count: state.count + <span class="number">1</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeNum = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: num2 &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num &#125; = <span class="keyword">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;Start editing to see some magic happen!&lt;/</span>h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleChangeNum&#125;&gt;修改传入的Num值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TestUseCallback num=&#123;num&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseRef</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    inputEl.current.focus() <span class="comment">// 设置useRef返回对象的值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;TestUseRef&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input ref=&#123;inputEl&#125; type="text" /</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;onButtonClick&#125;&gt;input聚焦&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TestUseRef</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文不做概念性的解析，旨在实操 &lt;code&gt;hooks&lt;/code&gt;，相关资源可以自行谷歌。以下提供相关参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introducing Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5be409696fb9a049b13db042&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解 React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5bffc271e51d454dca3547b1#heading-0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Hooks 实用指南&lt;/a&gt; - 大都借鉴这篇文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5bd53d6a51882528382d8108&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hooks 一览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - lazy(v16.6)</title>
    <link href="https://gershonv.github.io/2018/11/26/react-lazy/"/>
    <id>https://gershonv.github.io/2018/11/26/react-lazy/</id>
    <published>2018-11-26T09:31:09.000Z</published>
    <updated>2019-01-03T15:05:50.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h2><p>在 <a href="https://reactjs.org/docs/code-splitting.html#import" target="_blank" rel="noopener">Code-Splitting</a> 部分，提出拆分组件的最佳方式（best way） 是使用动态的 import 方式。</p><p>比如下面两种使用方式的对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./math'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">16</span>, <span class="number">26</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./math'</span>).then(<span class="function"><span class="params">math</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">16</span>, <span class="number">26</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以发现动态 <code>import</code> 提供了 <code>Promise</code> 规范的 API，比如 <code>.then()</code></p><a id="more"></a><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>动态 <code>import</code> 主要应用场景是延迟加载方法，对于组件来说，并不是很适用，但是 <code>React.lazy</code> 对于组件的加载则是有比较大的帮助。</p><blockquote><p><code>React.lazy</code> 和 <code>suspense</code> 并不适用于服务端渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./MyComponent'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// lazy 需要配合 Suspense 使用</span></span><br><span class="line">    <span class="comment">// Suspense 使用的时候，fallback 一定是存在且有内容的， 否则会报错。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;MyComponent /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="实现-lazy-load"><a href="#实现-lazy-load" class="headerlink" title="实现 lazy-load"></a>实现 lazy-load</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loadComponent =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123; <span class="attr">Component</span>: <span class="literal">null</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.Component !== <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">      NProgress.start()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">default</span>: Component &#125; = <span class="keyword">await</span> loadComponent()</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; Component &#125;)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Cannot load component in &lt;AsyncComponent /&gt;`</span>)</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; Component &#125; = <span class="keyword">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> Component ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span> : null</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br></pre></td></tr></table></figure><h2 id="react-loadable-（router4-推荐）"><a href="#react-loadable-（router4-推荐）" class="headerlink" title="react-loadable （router4 推荐）"></a>react-loadable （router4 推荐）</h2><p><a href="https://gershonv.github.io/2018/11/07/react-router-3/">react-router - [译] Code Splitting</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NoFound = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/NoFound'</span>),</span><br><span class="line">  loading: <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span> component=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">          &lt;Route component=&#123;NoFound&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态-import&quot;&gt;&lt;a href=&quot;#动态-import&quot; class=&quot;headerlink&quot; title=&quot;动态 import&quot;&gt;&lt;/a&gt;动态 import&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://reactjs.org/docs/code-splitting.html#import&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code-Splitting&lt;/a&gt; 部分，提出拆分组件的最佳方式（best way） 是使用动态的 import 方式。&lt;/p&gt;
&lt;p&gt;比如下面两种使用方式的对比：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; add &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./math&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(add(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./math&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;math&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(math.add(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现动态 &lt;code&gt;import&lt;/code&gt; 提供了 &lt;code&gt;Promise&lt;/code&gt; 规范的 API，比如 &lt;code&gt;.then()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - Portals</title>
    <link href="https://gershonv.github.io/2018/11/26/react-Portals/"/>
    <id>https://gershonv.github.io/2018/11/26/react-Portals/</id>
    <published>2018-11-26T09:00:32.000Z</published>
    <updated>2019-01-03T15:06:20.228Z</updated>
    
    <content type="html"><![CDATA[<p><code>Portals</code> 指定挂载组件到某个节点，适用于 <code>modal</code>、<code>toolTip</code>…</p><p>我们不希望 <code>modal</code> 组件的节点出现在 <code>root</code> 根节点中。。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createPortal(child, container)</span><br></pre></td></tr></table></figure><ul><li><code>child</code> : The first argument (child) is any renderable React child，such as an element, string, or fragment<br>即可渲染的 react 组件</li><li><code>container</code> : a DOM element</li></ul><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>通常，如果你的组件的 render 方法返回一个元素时，它作为最接近的父节点的子节点挂载到 DOM 中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React mounts a new div and renders the children into it</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>但是，有时候要把子节点插入 DOM 中的不同位置时，是有用的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React does *not* create a new div. It renders the children into `domNode`.</span></span><br><span class="line">  <span class="comment">// `domNode` is any valid DOM node, regardless of its location in the DOM.</span></span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    <span class="keyword">this</span>.props.children,</span><br><span class="line">    domNode,</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>portals</code> 的典型场景是如果一个父组件有一个 <code>overflow:hidden</code> 或者是 <code>z-index</code> 的样式，但是你需要子节点在视觉上 <code>break out</code> （打破）这个父容器，比如 对话框，选项卡或者提示工具等</p><p>下面代码实现一个 <code>model</code> 组件</p><h2 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">'./Modal'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">  showModal = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: !<span class="keyword">this</span>.state.show &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  closeModal = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;)&#125;&gt;open Modal&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Modal show=&#123;this.state.show&#125; onClose=&#123;this.closeModal&#125;&gt;</span></span><br><span class="line"><span class="regexp">          This message is from Modal</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Modal&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="Modal-jsx"><a href="#Modal-jsx" class="headerlink" title="Modal.jsx"></a>Modal.jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdropStyle = &#123;</span><br><span class="line">  position: <span class="string">'fixed'</span>,</span><br><span class="line">  top: <span class="number">0</span>,</span><br><span class="line">  bottom: <span class="number">0</span>,</span><br><span class="line">  left: <span class="number">0</span>,</span><br><span class="line">  right: <span class="number">0</span>,</span><br><span class="line">  backgroundColor: <span class="string">'rgba(0, 0, 0, 0.3)'</span>,</span><br><span class="line">  padding: <span class="number">50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modalStyle = &#123;</span><br><span class="line">  backgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">  borderRadius: <span class="number">5</span>,</span><br><span class="line">  border: <span class="string">'1px solid #eee'</span>,</span><br><span class="line">  maxWidth: <span class="number">500</span>,</span><br><span class="line">  minHeight: <span class="number">300</span>,</span><br><span class="line">  maring: <span class="string">'0 auto'</span>,</span><br><span class="line">  padding: <span class="number">30</span>,</span><br><span class="line">  position: <span class="string">'relative'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> footerStyle = &#123;</span><br><span class="line">  position: <span class="string">'absolute'</span>,</span><br><span class="line">  bottom: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此前，页面需要创建一个 dom 元素 其中 id 为modal-root</span></span><br><span class="line"><span class="keyword">const</span> modalRoot = <span class="built_in">document</span>.getElementById(<span class="string">'modal-root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onKeyUp = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 鼠标信息 http://keycode.info/</span></span><br><span class="line">    <span class="comment">// 按下 esc</span></span><br><span class="line">    <span class="keyword">if</span> (e.which === <span class="number">27</span> &amp;&amp; <span class="keyword">this</span>.props.show) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.onClose()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="keyword">this</span>.onKeyUp)</span><br><span class="line">    modalRoot.appendChild(<span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'keyup'</span>, <span class="keyword">this</span>.onKeyUp)</span><br><span class="line">    modalRoot.removeChild(<span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.show) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> modalUI = (</span><br><span class="line">      &lt;div style=&#123;backdropStyle&#125;&gt;</span><br><span class="line">        &lt;div style=&#123;modalStyle&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line"></span><br><span class="line">          &lt;div style=&#123;footerStyle&#125;&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.props.onClose&#125;&gt;Close&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// createPortal 挂载到 this.el 的元素中</span></span><br><span class="line">    <span class="keyword">return</span> ReactDOM.createPortal(modalUI, <span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Modal</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Portals&lt;/code&gt; 指定挂载组件到某个节点，适用于 &lt;code&gt;modal&lt;/code&gt;、&lt;code&gt;toolTip&lt;/code&gt;…&lt;/p&gt;
&lt;p&gt;我们不希望 &lt;code&gt;modal&lt;/code&gt; 组件的节点出现在 &lt;code&gt;root&lt;/code&gt; 根节点中。。。。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.createPortal(child, container)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;child&lt;/code&gt; : The first argument (child) is any renderable React child，such as an element, string, or fragment&lt;br&gt;即可渲染的 react 组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt; : a DOM element&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - PureComponent 和 memo</title>
    <link href="https://gershonv.github.io/2018/11/26/react-purecomponent%20&amp;&amp;%20memo/"/>
    <id>https://gershonv.github.io/2018/11/26/react-purecomponent &amp;&amp; memo/</id>
    <published>2018-11-26T07:58:36.000Z</published>
    <updated>2019-01-03T15:06:40.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setState-数据无改变，-组件会重新-render"><a href="#setState-数据无改变，-组件会重新-render" class="headerlink" title="setState 数据无改变， 组件会重新 render"></a>setState 数据无改变， 组件会重新 render</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: <span class="number">1</span> &#125;) <span class="comment">// setState 但是不改变 num</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;MyComponent num=&#123;<span class="keyword">this</span>.state.num&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>点击按钮，<code>setState</code> 后 <code>num</code> 并未发生改变， 但是组件 <code>MyComponent</code> 仍然会重新渲染，这就会导致一部分性能的消耗。</p><p>我们可以使用 <code>shouldComponentUpdate(nextProps, nextState)</code> 来决定组件的渲染与否，也可以使用 react 提供的两个 API</p><a id="more"></a><h2 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a>React.PureComponent</h2><p><code>pure</code> 是纯的意思， <code>PureComponent</code> 也就是纯组件, 只要把继承类从 <code>Component</code> 换成 <code>PureComponent</code> 即可，可以减少不必要的 <code>render</code> 操作的次数，从而提高性能。</p><p><code>PureComponent</code> 主要作用于类组件，而 <code>memo</code> 主要作用于函数组件。</p><blockquote><p><code>React.PureComponent</code> 使用 <code>prop</code> 和 <code>state</code> 的浅比较来决定是否 <code>render</code> 组件。（我们就不需要在 <code>shouldComponentUpdate</code> 中写一大段代码了！）</p></blockquote><p>使用方法极其简单（以上面的代码为例）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... App</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在不可变数据类型（数组、对象等等）<code>PureComponent</code> 是不生效的！因为它的引用地址并未发生改变。做一个 demo:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">nums</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; nums &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    nums.pop()</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; nums &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;MyComponent nums=&#123;<span class="keyword">this</span>.state.nums&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>这里无论如何点击按钮，<code>MyComponent</code> 也不会重新渲染。具体比较过程是这样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="comment">// nums 引用是一样的，所以 this.props.nums 等于 nextProps.nums，结果永远返回 false，组件不会重新渲染！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums !== nextProps.nums</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><p><code>React.memo</code> 是一个高阶组件。它与 <code>React.PureComponent</code> 类似，但是对于函数组件而不是类。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = memo(<span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'redner'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... App</span></span><br></pre></td></tr></table></figure><p>如果你的函数组件在给定相同的道具的情况下呈现相同的结果，则可以 <code>React.memo</code> 通过记忆结果将其包装在一些调用中以提高性能。这意味着 <code>React</code> 将跳过渲染组件，并重用最后渲染的结果。</p><p>默认情况下，它只会浅显比较 <code>props</code> 对象中的复杂对象。如果要控制比较，还可以提供自定义比较功能作为第二个参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* render using props */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  return true if passing nextProps to render would return</span></span><br><span class="line"><span class="comment">  the same result as passing prevProps to render,</span></span><br><span class="line"><span class="comment">  otherwise return false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual)</span><br></pre></td></tr></table></figure><p>此方法仅作为性能优化存在。不要依赖它来“防止”渲染，因为这可能导致错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;setState-数据无改变，-组件会重新-render&quot;&gt;&lt;a href=&quot;#setState-数据无改变，-组件会重新-render&quot; class=&quot;headerlink&quot; title=&quot;setState 数据无改变， 组件会重新 render&quot;&gt;&lt;/a&gt;setState 数据无改变， 组件会重新 render&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; Component &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;render&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state = &amp;#123; &lt;span class=&quot;attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123; &lt;span class=&quot;attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// setState 但是不改变 num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;MyComponent num=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.num&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;button onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleClick&amp;#125;&amp;gt;click&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;      &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; App&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;点击按钮，&lt;code&gt;setState&lt;/code&gt; 后 &lt;code&gt;num&lt;/code&gt; 并未发生改变， 但是组件 &lt;code&gt;MyComponent&lt;/code&gt; 仍然会重新渲染，这就会导致一部分性能的消耗。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;shouldComponentUpdate(nextProps, nextState)&lt;/code&gt; 来决定组件的渲染与否，也可以使用 react 提供的两个 API&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - Ref</title>
    <link href="https://gershonv.github.io/2018/11/26/react-ref/"/>
    <id>https://gershonv.github.io/2018/11/26/react-ref/</id>
    <published>2018-11-26T05:36:56.000Z</published>
    <updated>2019-01-03T15:07:07.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么时候使用-Refs"><a href="#什么时候使用-Refs" class="headerlink" title="什么时候使用 Refs"></a>什么时候使用 Refs</h2><p>下面是几个使用 <code>Refs</code> 的示例：</p><ul><li>管理焦点状态(focus)、文本选择(text selection)、或者是媒体播放(media)</li><li>强制触发动画</li><li>与第三方的 DOM 库集成</li></ul><p>在任何能够通过直接声明完成的事情中应当避免使用 <code>Refs</code>。<br>例如，对于一个 <code>Dialog</code> 组件，应当提供一个 <code>isOpen</code> 的 <code>prop</code> 来控制它，而不是暴露<code>open()</code>和 <code>close()</code>两个方法去操作。</p><p>使用方法：</p><p><code>Refs</code> 是使用 <code>React.createRef()</code> 创建的，并通过 <code>ref</code> 属性附加到 <code>React</code> 元素。在构造组件时，通常将 <code>Refs</code> 分配给实例属性，以便可以在整个组件中引用它们。</p><a id="more"></a><h2 id="在-DOM-元素中使用"><a href="#在-DOM-元素中使用" class="headerlink" title="在 DOM 元素中使用"></a>在 DOM 元素中使用</h2><blockquote><p>当在 <code>refHTML</code> 元素上使用该属性时，<code>ref</code> 在构造函数中创建的属性将 <code>React.createRef()</code>接收底层 <code>DOM</code> 元素作为其 <code>current</code> 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputRef.current.focus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">&#123;this.inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default App</span></span><br></pre></td></tr></table></figure><h2 id="在类组件中使用"><a href="#在类组件中使用" class="headerlink" title="在类组件中使用"></a>在类组件中使用</h2><blockquote><p>在 <code>ref</code> 自定义类组件上使用该属性时，该 <code>ref</code> 对象将接收组件的已安装实例作为其 <code>current</code>。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.myRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> MyComponent = <span class="keyword">this</span>.myRef.current <span class="comment">// MyComponent 实例 : MyComponent.state = &#123; name: 'guodada' &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default App</span></span><br></pre></td></tr></table></figure><h2 id="在函数组件中使用"><a href="#在函数组件中使用" class="headerlink" title="在函数组件中使用"></a>在函数组件中使用</h2><blockquote><p>您可能无法 <code>ref</code> 在函数组件上使用该属性，因为它们没有实例。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunctionComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  constructor(props) &#123;</span></span><br><span class="line"><span class="xml">    super(props)</span></span><br><span class="line"><span class="xml">    this.textInput = React.createRef()</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    // This will *not* work!</span></span><br><span class="line">    return &lt;MyFunctionComponent ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent</span><br></pre></td></tr></table></figure><p>但是，只要引用 <code>DOM</code> 元素或类组件，就可以在函数组件中使用该 <code>ref</code> 属性：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunctionComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> textInput = React.createRef()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    textInput.current.focus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;textInput&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;focus&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyFunctionComponent</span><br></pre></td></tr></table></figure><h2 id="Callback-Refs-（推荐使用）"><a href="#Callback-Refs-（推荐使用）" class="headerlink" title="Callback Refs （推荐使用）"></a>Callback Refs （推荐使用）</h2><blockquote><p><code>React</code> 还支持另一种设置名为 <code>callback refs</code> 的引用的方法，它可以在设置和取消设置引用时提供更细粒度的控制。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputRef.focus() <span class="comment">// 注意 这里没使用 current</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.myRef.state) <span class="comment">// 同理这里也不使用 current</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;el =&gt; <span class="keyword">this</span>.inputRef = el&#125; /&gt;</span><br><span class="line">        &lt;MyComponent ref=&#123;el =&gt; <span class="keyword">this</span>.myRef = el&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="Ref-forwarding（转发-ref）"><a href="#Ref-forwarding（转发-ref）" class="headerlink" title="Ref forwarding（转发 ref）"></a>Ref forwarding（转发 ref）</h2><blockquote><p><code>Ref forwarding</code> 是一种自动将 <code>ref</code> 通过组件传递给其子节点的技术。对于应用程序中的大多数组件，这通常不是必需的。但是，它对某些类型的组件很有用，特别是在可重用的组件库中。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FancyButton = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  &lt;button ref=&#123;ref&#125; className=<span class="string">"FancyButton"</span>&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    this.buttonRef = React.createRef()</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    const FancyButton = this.buttonRef.current /</span><span class="regexp">/ 访问到 button 的 dom</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;FancyButton ref=&#123;this.buttonRef&#125;&gt;click&lt;/</span>FancyButton&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote><p>第二个 <code>ref</code> 参数仅在使用 <code>React.forwardRef</code> 调用定义组件时才存在。常规函数或类组件不接收 <code>ref</code> 参数，并且在 <code>props</code> 中也不提供 <code>ref</code>。<br><code>Ref</code> 转发不仅限于 <code>DOM</code> 组件。您也可以将 <code>refs</code> 转发给类组件实例。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么时候使用-Refs&quot;&gt;&lt;a href=&quot;#什么时候使用-Refs&quot; class=&quot;headerlink&quot; title=&quot;什么时候使用 Refs&quot;&gt;&lt;/a&gt;什么时候使用 Refs&lt;/h2&gt;&lt;p&gt;下面是几个使用 &lt;code&gt;Refs&lt;/code&gt; 的示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理焦点状态(focus)、文本选择(text selection)、或者是媒体播放(media)&lt;/li&gt;
&lt;li&gt;强制触发动画&lt;/li&gt;
&lt;li&gt;与第三方的 DOM 库集成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在任何能够通过直接声明完成的事情中应当避免使用 &lt;code&gt;Refs&lt;/code&gt;。&lt;br&gt;例如，对于一个 &lt;code&gt;Dialog&lt;/code&gt; 组件，应当提供一个 &lt;code&gt;isOpen&lt;/code&gt; 的 &lt;code&gt;prop&lt;/code&gt; 来控制它，而不是暴露&lt;code&gt;open()&lt;/code&gt;和 &lt;code&gt;close()&lt;/code&gt;两个方法去操作。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Refs&lt;/code&gt; 是使用 &lt;code&gt;React.createRef()&lt;/code&gt; 创建的，并通过 &lt;code&gt;ref&lt;/code&gt; 属性附加到 &lt;code&gt;React&lt;/code&gt; 元素。在构造组件时，通常将 &lt;code&gt;Refs&lt;/code&gt; 分配给实例属性，以便可以在整个组件中引用它们。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - PropTypes</title>
    <link href="https://gershonv.github.io/2018/11/26/react-proptypes/"/>
    <id>https://gershonv.github.io/2018/11/26/react-proptypes/</id>
    <published>2018-11-26T02:30:00.000Z</published>
    <updated>2019-01-03T14:17:53.528Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// static propTypes = &#123;&#125; 第二种写法</span></span><br><span class="line">  <span class="comment">// static defaultProps = &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default props</span></span><br><span class="line">MyComponent.defaultProps = &#123;</span><br><span class="line">  name: <span class="string">'Stranger'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyComponent.PropTypes = &#123;</span><br><span class="line">  <span class="comment">// 声明的prop可以是一个特殊的JS基础变量，默认情况下，下面都是可选的</span></span><br><span class="line">  optionalArray: PropTypes.array,</span><br><span class="line">  optionalBool: PropTypes.bool,</span><br><span class="line">  optionalFunc: PropTypes.func,</span><br><span class="line">  optionalNumber: PropTypes.number,</span><br><span class="line">  optionalObject: PropTypes.object,</span><br><span class="line">  optionalString: PropTypes.string,</span><br><span class="line">  optionalSymbol: PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面示例能够渲染任何元素: numbers, strings, elements ，array, fragment</span></span><br><span class="line">  optionalNode: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要是 React 元素</span></span><br><span class="line">  optionalElement: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以声明 prop 是某个类的示例</span></span><br><span class="line">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以声明 prop 在某个 enum 中的一个</span></span><br><span class="line">  optionalEnum: PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来验证prop对象中的每一个属性</span></span><br><span class="line">  optionalUnion: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number,</span><br><span class="line">    PropTypes.instanceOf(Message)</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证 prop 数组的每个子元素的类型</span></span><br><span class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查 prop 对象的属性的类型</span></span><br><span class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来检查 prop 对象的每个属性的类型</span></span><br><span class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查 prop 是必须存在的（required）</span></span><br><span class="line">  requiredFunc: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来检查任意的数值都必须存在</span></span><br><span class="line">  requiredAny: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你可以通过自定义验证器的方法来进行验证。</span></span><br><span class="line">  <span class="comment">// 自定义验证器应当返回一个抛出错误的Error对象。</span></span><br><span class="line">  <span class="comment">// 不要使用`console.warn`或者throw抛出错误，因为无法再 oneOfType 中使用</span></span><br><span class="line">  customProp: <span class="function"><span class="keyword">function</span>(<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以为'arrayOf'和'objectOf'提供自定义验证器</span></span><br><span class="line">  <span class="comment">// 如果验证失败，应该返回一个Error对象</span></span><br><span class="line">  <span class="comment">// 数组或者对象的每一个key都会被调用这个验证器。</span></span><br><span class="line">  <span class="comment">// 此验证器的前面两个参数是数组或者是对象本身以及当前遍历的index(如数组下标或对象属性key)</span></span><br><span class="line">  customArrayProp: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 浏览器输入 url 后 http 请求返回的完整过程</title>
    <link href="https://gershonv.github.io/2018/11/23/http-url-to-render/"/>
    <id>https://gershonv.github.io/2018/11/23/http-url-to-render/</id>
    <published>2018-11-23T08:08:53.000Z</published>
    <updated>2019-01-03T15:11:54.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/20/167306e21f25ced5?w=1234&amp;h=443&amp;f=png&amp;s=181984" alt=""></p><h2 id="检查缓存"><a href="#检查缓存" class="headerlink" title="检查缓存"></a>检查缓存</h2><blockquote><p>缓存就是把你之前访问的 web 资源，比如一些 js，css，图片什么的保存在你本机的内存或者磁盘当中。</p></blockquote><p>浏览器获取了这个 <code>url</code>，当然就去解析了，它先去缓存当中看看有没有，从 浏览器缓存-系统缓存-路由器缓存 当中查看，<br>如果有从缓存当中显示页面， 如果没有缓存则进行 <code>DNS</code> 解析</p><p>浏览器缓存相关链接：<a href="https://gershonv.github.io/2018/11/23/http-cache/">HTTP - 缓存机制</a></p><p>这里重点介绍 浏览器中 <a href="https://gershonv.github.io/2018/11/23/http-cache/">HTTP - 缓存机制</a>， 因为个人对系统缓存以及路由器缓存认识较少</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li>缓存是否到时: <code>Cache-Control: max-age=xxx</code></li><li>缓存是否过期：<code>Expires</code> （如果设置）</li><li>资源是否发生修改: <code>ETag</code><ul><li><code>If-None-Match</code> =&gt; 304 未修改</li></ul></li><li>文件的修改时间: <code>Last-Modified</code><ul><li><code>If-Modified-Since</code> =&gt; 304 未修改</li></ul></li></ul><a id="more"></a><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><blockquote><p>在发送 <code>http</code> 之前，需要进行 <code>DNS</code> 解析即域名解析。<br><code>DNS</code> 解析:域名到 <code>IP</code> 地址的转换过程。域名的解析工作由 <code>DNS</code> 服务器完成。解析后可以获取域名相应的 <code>IP</code> 地址</p></blockquote><p>根据 URL 找到对应的 IP 地址。这一步通常被称为 DNS 轮询，这里面是有缓存机制的。缓存的顺序依次为：浏览器缓存-&gt;操作系统缓存-&gt;路由器缓存-&gt;DNS 提供商缓存-&gt;DNS 提供商轮询。</p><h2 id="创建-TCP-链接"><a href="#创建-TCP-链接" class="headerlink" title="创建 TCP 链接"></a>创建 TCP 链接</h2><p><a href="https://gershonv.github.io/2018/11/21/http-TCP/">TCP 三次握手四次挥手</a></p><ul><li>第一次握手： <code>client</code> =&gt; <code>server</code><ul><li><code>SYN = 1</code> （SYN 代表发起一个新连接）； <code>Sequence Number</code> = 1 （请求的标记）</li></ul></li><li>第二次握手：<code>server</code> =&gt; <code>client</code><ul><li><code>SYN = 1</code> （SYN 代表发起一个新连接）；<code>Sequence Number</code> = Y （请求的标记）</li><li><code>acknowledgment number</code> = 1 （确认序号，只有 <code>ACK</code> 标志位为 1 时，确认序号字段才有效）</li><li><code>ACK</code> = 1 确认序号字段有效</li></ul></li><li>第三次握手：<code>client</code> =&gt; <code>server</code><ul><li><code>acknowledgment number</code> = Y + 1 =&gt; 确认序号为 Y + 1</li><li><code>ACK</code> = 1 确认序号字段有效</li></ul></li></ul><p>这样 TCP 连接就建立了。<br>在此之后，浏览器开始向服务器发送 <code>http</code> 请求，请求数据包。请求信息包含一个头部和一个请求体。</p><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>相关链接：<a href="https://gershonv.github.io/2018/11/20/http-导学/">HTTP - 导学</a></p><h2 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h2><p>浏览器对于每一种请求类型的处理方式是不一样的，像 <code>text/html</code>、<code>application/JavaScript</code>、<code>text/plain</code> 等等这些是可以直接呈现的，而对于不能呈现的类型，浏览器会将该资源下载到本地。</p><p>那么浏览器在确认这个 response 的状态不是 301（跳转）或者 401（未授权）或其它需要做特殊处理的状态，之后开始进入呈现过程。</p><p><code>Renderer</code> 进程开始解析 <code>css rule tree</code> 和 <code>dom tree</code>，这两个过程是并行的，所以一般我会把 link 标签放在页面顶部。</p><p>解析绘制过程中，当浏览器遇到 <code>link</code> 标签或者 <code>script`</code>、img ` 等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。</p><p><code>css rule tree</code> 和 <code>dom tree</code> 生成完了之后，开始合成 <code>render tree</code>，这个时候浏览器会进行 <code>layout</code>，开始计算每一个节点的位置，然后进行绘制。</p><p>绘制结束后，关闭 <code>TCP</code> 连接，过程有四次挥手。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;示意图&quot;&gt;&lt;a href=&quot;#示意图&quot; class=&quot;headerlink&quot; title=&quot;示意图&quot;&gt;&lt;/a&gt;示意图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/20/167306e21f25ced5?w=1234&amp;amp;h=443&amp;amp;f=png&amp;amp;s=181984&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;检查缓存&quot;&gt;&lt;a href=&quot;#检查缓存&quot; class=&quot;headerlink&quot; title=&quot;检查缓存&quot;&gt;&lt;/a&gt;检查缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;缓存就是把你之前访问的 web 资源，比如一些 js，css，图片什么的保存在你本机的内存或者磁盘当中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;浏览器获取了这个 &lt;code&gt;url&lt;/code&gt;，当然就去解析了，它先去缓存当中看看有没有，从 浏览器缓存-系统缓存-路由器缓存 当中查看，&lt;br&gt;如果有从缓存当中显示页面， 如果没有缓存则进行 &lt;code&gt;DNS&lt;/code&gt; 解析&lt;/p&gt;
&lt;p&gt;浏览器缓存相关链接：&lt;a href=&quot;https://gershonv.github.io/2018/11/23/http-cache/&quot;&gt;HTTP - 缓存机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里重点介绍 浏览器中 &lt;a href=&quot;https://gershonv.github.io/2018/11/23/http-cache/&quot;&gt;HTTP - 缓存机制&lt;/a&gt;， 因为个人对系统缓存以及路由器缓存认识较少&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存是否到时: &lt;code&gt;Cache-Control: max-age=xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缓存是否过期：&lt;code&gt;Expires&lt;/code&gt; （如果设置）&lt;/li&gt;
&lt;li&gt;资源是否发生修改: &lt;code&gt;ETag&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;If-None-Match&lt;/code&gt; =&amp;gt; 304 未修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件的修改时间: &lt;code&gt;Last-Modified&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt; =&amp;gt; 304 未修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - keep-alive</title>
    <link href="https://gershonv.github.io/2018/11/23/http-%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    <id>https://gershonv.github.io/2018/11/23/http-长连接/</id>
    <published>2018-11-23T06:16:16.000Z</published>
    <updated>2019-01-03T15:11:26.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-协议是无状态的"><a href="#HTTP-协议是无状态的" class="headerlink" title="HTTP 协议是无状态的"></a>HTTP 协议是无状态的</h2><p><code>HTTP</code> 协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<code>HTTP</code> 是一个无状态的面向连接的协议，无状态不代表 <code>HTTP</code> 不能保持 <code>TCP</code> 连接，更不能代表 <code>HTTP</code> 使用的是 <code>UDP</code> 协议（无连接）。</p><h2 id="什么是长连接、短连接？"><a href="#什么是长连接、短连接？" class="headerlink" title="什么是长连接、短连接？"></a>什么是长连接、短连接？</h2><p>在 <code>HTTP/1.0</code> 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 <code>HTTP</code> 操作，就要经过<a href="https://gershonv.github.io/2018/11/21/http-TCP/">三次握手</a>建立一次连接，但任务结束就中断连接。</p><p>客户端浏览器访问的某个 <code>HTML</code> 或其他类型的 <code>Web</code> 页中包含有其他的 <code>Web</code> 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。但从  <code>HTTP/1.1</code> 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Connection'</span>: <span class="string">'keep-alive'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul><li><code>test.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test11.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test12.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test13.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test14.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test15.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test16.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test17.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test111.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test112.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test113.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test114.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test115.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test116.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>server.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">const</span> img = fs.readFileSync(<span class="string">'test.jpg'</span>)</span><br><span class="line">    <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(html)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'image/jpg'</span>,</span><br><span class="line">        Connection: <span class="string">'keep-alive'</span> <span class="comment">// or close HTTP/1.1 起 默认 keep-alive</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(img)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-协议是无状态的&quot;&gt;&lt;a href=&quot;#HTTP-协议是无状态的&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议是无状态的&quot;&gt;&lt;/a&gt;HTTP 协议是无状态的&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。&lt;code&gt;HTTP&lt;/code&gt; 是一个无状态的面向连接的协议，无状态不代表 &lt;code&gt;HTTP&lt;/code&gt; 不能保持 &lt;code&gt;TCP&lt;/code&gt; 连接，更不能代表 &lt;code&gt;HTTP&lt;/code&gt; 使用的是 &lt;code&gt;UDP&lt;/code&gt; 协议（无连接）。&lt;/p&gt;
&lt;h2 id=&quot;什么是长连接、短连接？&quot;&gt;&lt;a href=&quot;#什么是长连接、短连接？&quot; class=&quot;headerlink&quot; title=&quot;什么是长连接、短连接？&quot;&gt;&lt;/a&gt;什么是长连接、短连接？&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;HTTP/1.0&lt;/code&gt; 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 &lt;code&gt;HTTP&lt;/code&gt; 操作，就要经过&lt;a href=&quot;https://gershonv.github.io/2018/11/21/http-TCP/&quot;&gt;三次握手&lt;/a&gt;建立一次连接，但任务结束就中断连接。&lt;/p&gt;
&lt;p&gt;客户端浏览器访问的某个 &lt;code&gt;HTML&lt;/code&gt; 或其他类型的 &lt;code&gt;Web&lt;/code&gt; 页中包含有其他的 &lt;code&gt;Web&lt;/code&gt; 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。但从  &lt;code&gt;HTTP/1.1&lt;/code&gt; 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Connection&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;keep-alive&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 缓存机制</title>
    <link href="https://gershonv.github.io/2018/11/23/http-cache/"/>
    <id>https://gershonv.github.io/2018/11/23/http-cache/</id>
    <published>2018-11-23T01:23:23.000Z</published>
    <updated>2019-01-03T15:12:14.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存实现的步骤"><a href="#缓存实现的步骤" class="headerlink" title="缓存实现的步骤"></a>缓存实现的步骤</h2><ul><li>首先是当用户请求资源时，会判断是否有缓存，如果没有，则会向原服务器请求资源。</li><li>如果有缓存，则会进入强缓存的范畴，判断缓存是否新鲜<ul><li>如果缓存新鲜，则会直接返回缓存副本给客户端。</li><li>如果缓存不新鲜了，则表示强缓存失败，将会进入到<strong>协商缓存</strong>。</li></ul></li><li>协商缓存将判断是否存在 <code>Etag</code> 和 <code>Last-Modified</code> 首部<ul><li>如果未发生变化，则表示命中了协商缓存，会重定向到缓存副本，将资源返回给客户端</li><li>否则的话表示协商缓存未命中，服务器会返回新的资源。</li></ul></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/11/4/166de9f3ae4b1f20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><blockquote><p>服务端告知客户端缓存时间后，由客户端判断并决定是否使用缓存。</p></blockquote><p>强缓存是通过 <code>Expires</code> 首部或 <code>Cache-Control: max-age</code> 来实现的。</p><ul><li><code>Expires</code>: 响应头，代表该资源的过期时间。</li><li><code>Cache-Control</code>: 请求/响应头，缓存控制字段，精确控制缓存策略。</li></ul><a id="more"></a><p><code>server.js</code> - demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Conche-Control'</span>: <span class="string">'max-age=2000, public'</span> <span class="comment">// 缓存时间 2000s；public: 资源允许被中间服务器缓存</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h3 id="Expires-HTTP-1-0"><a href="#Expires-HTTP-1-0" class="headerlink" title="Expires(HTTP/1.0)"></a>Expires(HTTP/1.0)</h3><p><code>Expires</code> 和 <code>Cache-Control: max-age</code> 都是用来标识资源的过期时间的首部。</p><p>由于 <code>expires</code> 是一个绝对时间，如果人为的更改时间，会对缓存的有效期造成影响，使缓存有效期的设置失去意义。因此在 <code>http1.1</code> 中我们有了 <code>expires</code> 的完全替代首部 <code>cache-control：max-age</code></p><h3 id="Cache-Control-HTTP-1-1"><a href="#Cache-Control-HTTP-1-1" class="headerlink" title="Cache-Control(HTTP/1.1)"></a>Cache-Control(HTTP/1.1)</h3><p>除了可以设置 <code>max-age</code> 相对过期时间以外，还可以设置成如下几种值：</p><ul><li><p><code>public</code>，资源允许被中间服务器缓存。</p><blockquote><p>浏览器请求服务器时，如果缓存时间没到，中间服务器直接返回给浏览器内容，而不必请求源服务器。</p></blockquote></li><li><p><code>private</code>，资源不允许被中间代理服务器缓存</p><blockquote><p>浏览器请求服务器时，中间服务器都要把浏览器的请求透传给服务器。</p></blockquote></li><li><p><code>no-cache</code>，浏览器不做缓存检查。</p><blockquote><p>每次访问资源，浏览器都要向服务器询问，如果文件没变化，服务器只告诉浏览器继续使用缓存（304）。</p></blockquote></li><li><p><code>no-store</code>，浏览器和中间代理服务器都不能缓存资源。</p><blockquote><p>每次访问资源，浏览器都必须请求服务器，并且，服务器不去检查文件是否变化，而是直接返回完整的资源。</p></blockquote></li><li><code>must-revalidate</code>，可以缓存，但是使用之前必须先向源服务器确认。</li><li><code>proxy-revalidate</code>，要求缓存服务器针对缓存资源向源服务器进行确认。</li><li><code>s-maxage</code>：缓存服务器对资源缓存的最大时间。</li></ul><p><code>Cache-Control</code> 对缓存的控制粒度更细，包括缓存代理服务器的缓存控制。</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><blockquote><p>由服务端决定并告知客户端是否使用缓存。</p></blockquote><p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。<br>协商缓存是通过请求头 <code>Last-Modified</code> 或 <code>Etag</code> 来实现的。</p><ul><li><code>Last-Modified</code> 标识的是文档最后修改时间</li><li><code>Etag</code> 则是以文档内容来进行编码的。</li></ul><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><blockquote><p>响应头，资源最近修改时间，由服务器告诉浏览器。</p></blockquote><p><code>Last-Modified</code> （上次修改时间）主要配合 <code>If-Modified-Since</code> 或者 <code>If-Unmodified-Since</code> 使用， 对比上次修改时间以验证资源是否需要更新</p><p>If-Modified-Since: 请求头</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/4/166de151763c87aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li>首次请求资源时，服务器在返回资源的同时，会在 <code>Response Headers</code> 中写入 <code>Last-Modified</code> 首部，表示该资源在服务器上的最后修改时间。</li><li>当再次请求该资源时，会在 <code>Request Headers</code> 中写入 <code>If-Modified-Since</code> 首部，此时的 <code>If-Modified-Since</code> 的值是首次请求资源时所返回的 <code>Last-Modified</code> 的值。</li><li>服务器接收到请求后，会根据 <code>If-Modified-Since</code> 的值判断资源在该日期之后是否发生过变化。</li><li>如果没有，则会返回 <code>304 Not Modified</code>;如果变化了，则会返回变化过后的资源，同时更新 <code>Last-Modified</code> 的值。</li></ul><ol><li><p>资源未更新 network 面板截图<br><img src="https://user-gold-cdn.xitu.io/2018/11/23/1673e75620b00e06?w=848&amp;h=520&amp;f=png&amp;s=224745" alt=""></p></li><li><p>资源发生更新 network 面板截图<br><img src="https://user-gold-cdn.xitu.io/2018/11/23/1673e7991fe685a1?w=935&amp;h=484&amp;f=png&amp;s=245226" alt=""><br>可以看到 <code>Last-Modified</code> 和 <code>If-Modified-Since</code> 标识的时间不一样</p></li></ol><ul><li><code>server.js</code> - demo</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Conche-Control'</span>: <span class="string">'max-age=2000, public'</span>, <span class="comment">// 缓存时间 2000s；public: 资源允许被中间服务器缓存</span></span><br><span class="line">      <span class="string">'Last-Modified'</span>: <span class="string">'123'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><blockquote><p>响应头，资源标识，由服务器告诉浏览器。</p></blockquote><p><code>Etag</code> 和 <code>If-None-Match</code> 配合使用， （文件内容对比）对比资源的签名来决定是否使用缓存。</p><ul><li><code>server.js</code> - demo</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> etag = request.headers[<span class="string">'if-none-match'</span>]</span><br><span class="line">    <span class="keyword">if</span> (etag === <span class="string">'777'</span>) &#123;</span><br><span class="line">      response.writeHead(<span class="number">304</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'max-age=120, no-cache'</span>, <span class="comment">// 缓存时间 120s；no-cache: 浏览器不做缓存检查</span></span><br><span class="line">        <span class="string">'Last-Modified'</span>: <span class="string">'123'</span>,</span><br><span class="line">        Etag: <span class="string">'777'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// etag change</span></span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">        <span class="string">'Conche-Control'</span>: <span class="string">'max-age=120, no-cache'</span>, <span class="comment">// 缓存时间 120s；no-cache: 浏览器不做缓存检查</span></span><br><span class="line">        <span class="string">'Last-Modified'</span>: <span class="string">'123'</span>,</span><br><span class="line">        Etag: <span class="string">'777'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结与缓存方案"><a href="#总结与缓存方案" class="headerlink" title="总结与缓存方案"></a>总结与缓存方案</h2><p><img src="https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ol><li>服务器和浏览器约定资源过期时间 <code>Cache-Control: expires=xxx</code></li><li>服务器告诉浏览器资源上次修改时间 <code>Last-Modified</code></li><li>增加相对时间的控制 <code>Cache-Control: max-age=xxx</code></li><li>增加文件内容对比，引入<code>Etag</code></li></ol><p>缓存优先级</p><blockquote><p><code>Pragma</code> &gt; <code>Cache-Control</code> &gt; <code>Expires</code> &gt; <code>ETag</code> &gt; <code>Last-Modified</code></p></blockquote><p>参考与相关链接：</p><ul><li><a href="https://juejin.im/post/5bdeabbbe51d4505466cd741#heading-25" target="_blank" rel="noopener">浅谈 HTTP 缓存</a></li><li><a href="https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-0" target="_blank" rel="noopener">面试精选之 http 缓存</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存实现的步骤&quot;&gt;&lt;a href=&quot;#缓存实现的步骤&quot; class=&quot;headerlink&quot; title=&quot;缓存实现的步骤&quot;&gt;&lt;/a&gt;缓存实现的步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先是当用户请求资源时，会判断是否有缓存，如果没有，则会向原服务器请求资源。&lt;/li&gt;
&lt;li&gt;如果有缓存，则会进入强缓存的范畴，判断缓存是否新鲜&lt;ul&gt;
&lt;li&gt;如果缓存新鲜，则会直接返回缓存副本给客户端。&lt;/li&gt;
&lt;li&gt;如果缓存不新鲜了，则表示强缓存失败，将会进入到&lt;strong&gt;协商缓存&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协商缓存将判断是否存在 &lt;code&gt;Etag&lt;/code&gt; 和 &lt;code&gt;Last-Modified&lt;/code&gt; 首部&lt;ul&gt;
&lt;li&gt;如果未发生变化，则表示命中了协商缓存，会重定向到缓存副本，将资源返回给客户端&lt;/li&gt;
&lt;li&gt;否则的话表示协商缓存未命中，服务器会返回新的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/4/166de9f3ae4b1f20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;强缓存&quot;&gt;&lt;a href=&quot;#强缓存&quot; class=&quot;headerlink&quot; title=&quot;强缓存&quot;&gt;&lt;/a&gt;强缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;服务端告知客户端缓存时间后，由客户端判断并决定是否使用缓存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强缓存是通过 &lt;code&gt;Expires&lt;/code&gt; 首部或 &lt;code&gt;Cache-Control: max-age&lt;/code&gt; 来实现的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;: 响应头，代表该资源的过期时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;: 请求/响应头，缓存控制字段，精确控制缓存策略。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
</feed>
