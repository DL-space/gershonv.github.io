<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭大大的博客</title>
  
  <subtitle>生活就像海洋，只有意志坚强的人才能到达彼岸</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gershonv.github.io/"/>
  <updated>2019-01-03T14:57:01.139Z</updated>
  <id>https://gershonv.github.io/</id>
  
  <author>
    <name>gershonv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sequelize - model definition</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-2/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-2/</id>
    <published>2019-01-03T06:35:03.000Z</published>
    <updated>2019-01-03T14:57:01.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Model-definition-模型定义"><a href="#Model-definition-模型定义" class="headerlink" title="Model definition - 模型定义"></a>Model definition - 模型定义</h2><p><code>Sequelize</code> 使用 <code>define</code> 方法定义模型和表之间的映射，<code>Sequelize</code> 将默认添加 <code>createdAt</code> 和 <code>updatedAt</code> 属性。因此，您将能够知道数据库条目何时进入数据库以及最后一次更新时。<br><code>model</code> 定义格式为 <code>sequelize.define(&#39;name&#39;, {attributes}, {configuration})：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>)</span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>上式代码在数据库中的执行命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line"> ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="base-demo"><a href="#base-demo" class="headerlink" title="base demo"></a>base demo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar = sequelize.define(<span class="string">'bar'</span>, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Foo = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  id: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    field: <span class="string">'fooId'</span>, <span class="comment">// 存入数据库中的字段，model 中还是使用 id =&gt; foo.id</span></span><br><span class="line">    autoIncrement: <span class="literal">true</span>, <span class="comment">// 是否自增</span></span><br><span class="line">    primaryKey: <span class="literal">true</span> <span class="comment">// 是否为主键</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  age: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    defaultValue: <span class="number">18</span>, <span class="comment">// 默认值</span></span><br><span class="line">    allowNull: <span class="literal">true</span>, <span class="comment">// 是否为空</span></span><br><span class="line">    unique: <span class="literal">true</span>, <span class="comment">// 是否唯一</span></span><br><span class="line">    onUpdate: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键更新时的操作 String - 可选值是：['CASCADE', 'RESTRICT', 'SET DEFAULT', 'SET NULL', 'NO ACTION']</span></span><br><span class="line">    onDelete: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键删除时的操作 String - 同上</span></span><br><span class="line">    <span class="comment">// 验证器</span></span><br><span class="line">    validate: &#123;</span><br><span class="line">      isNumeric: <span class="literal">true</span>, <span class="comment">// 只允许数字</span></span><br><span class="line">      max: <span class="number">100</span>,</span><br><span class="line">      min: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 自定义验证</span></span><br><span class="line">      isEven(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Only even values are allowed!'</span>)</span><br><span class="line">          <span class="comment">// 我们也在模型的上下文中，所以如果它存在的话,</span></span><br><span class="line">          <span class="comment">// this.otherField会得到otherField的值。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters 为列自定义一个访问器 使用this.getDataValue(String)时调用的值</span></span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="keyword">const</span> age = <span class="keyword">this</span>.getDataValue(<span class="string">'age'</span>)</span><br><span class="line">      <span class="comment">// 可以对该列进行操作...</span></span><br><span class="line">      <span class="keyword">return</span> age</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setters 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值</span></span><br><span class="line">    set(value) &#123;</span><br><span class="line">      <span class="keyword">const</span> newValue = value + <span class="number">3</span></span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'age'</span>, newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  uId: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    references: &#123;</span><br><span class="line">      model: Bar, <span class="comment">// 这是引用另一个模型</span></span><br><span class="line">      key: <span class="string">'id'</span> <span class="comment">// 引用的字段（注意是在数据中存在的字段名）比如引用 foos 表要引用 fooId 而不是 id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Bar.sync().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Foo.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> foo = <span class="keyword">await</span> Foo.create(&#123; <span class="attr">age</span>: <span class="number">21</span> &#125;) <span class="comment">// 触发 setters</span></span><br><span class="line">      <span class="keyword">const</span> foos = <span class="keyword">await</span> Foo.findAll() <span class="comment">// 触发 getters</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上式代码在数据库中的执行命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`bars`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment ,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`foos`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`foos`</span> (</span><br><span class="line">  <span class="string">`fooId`</span> <span class="built_in">INTEGER</span> auto_increment ,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">18</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  <span class="string">`uId`</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  <span class="string">`createdAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updatedAt`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`fooId`</span>),</span><br><span class="line">  FOREIGN <span class="keyword">KEY</span> (<span class="string">`uId`</span>) <span class="keyword">REFERENCES</span> <span class="string">`bars`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`foos`</span> (<span class="string">`fooId`</span>,<span class="string">`age`</span>,<span class="string">`createdAt`</span>,<span class="string">`updatedAt`</span>) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="keyword">DEFAULT</span>,<span class="number">24</span>,<span class="string">'2019-01-03 07:34:12'</span>,<span class="string">'2019-01-03 07:34:12'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`fooId`</span> <span class="keyword">AS</span> <span class="string">`id`</span>, <span class="string">`age`</span>, <span class="string">`uId`</span>, <span class="string">`createdAt`</span>, <span class="string">`updatedAt`</span> <span class="keyword">FROM</span> <span class="string">`foos`</span> <span class="keyword">AS</span> <span class="string">`foo`</span>;</span><br></pre></td></tr></table></figure><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  column: &#123;</span><br><span class="line">    type: xxx,             <span class="comment">// DataType或字符串，表示列的数据类型 【见下文】</span></span><br><span class="line">    allowNull: <span class="literal">true</span>,       <span class="comment">// 是否设置 NOT NULL（非空）约束</span></span><br><span class="line">    defaultValue: xxx      <span class="comment">// 默认值</span></span><br><span class="line">    unique: <span class="literal">false</span>,         <span class="comment">// 设置为true时，会为列添加唯一约束</span></span><br><span class="line">    primaryKey: <span class="literal">false</span>,     <span class="comment">// 指定是否是主键</span></span><br><span class="line">    field: xxx,            <span class="comment">// String - 设置在数据库中的字段名。设置后会，Sequelize会将属性名映射到数据库中的不同名称</span></span><br><span class="line">    autoIncrement: <span class="literal">false</span>,  <span class="comment">// 是否自增</span></span><br><span class="line">    references: &#123;          <span class="comment">// 引用对象</span></span><br><span class="line">      model: xxx,          <span class="comment">// 如果列引用到另一个表，可以通过这个属性设置模型或字符串。</span></span><br><span class="line">      key: <span class="string">'id'</span>            <span class="comment">// 该列表示到表外键列的引用</span></span><br><span class="line">    &#125;, </span><br><span class="line">    onUpdate: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键更新时的操作 String - 可选值是：['CASCADE', 'RESTRICT', 'SET DEFAULT', 'SET NULL', 'NO ACTION']</span></span><br><span class="line">    onDelete: <span class="string">'NO ACTION'</span>, <span class="comment">// 当被引用的键删除时的操作，可选值同上</span></span><br><span class="line">    get()&#123;&#125;,               <span class="comment">// 为列自定义一个访问器 使用this.getDataValue(String)时调用的值 【见下文】</span></span><br><span class="line">    set(value)&#123;&#125;,          <span class="comment">// 为列自定义一个设置器 使用this.setDataValue(String, Value)时调用的值 【见下文】</span></span><br><span class="line">    validate: &#123;&#125;           <span class="comment">// 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数 【见下文】</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Attributes-DataTypes"><a href="#Attributes-DataTypes" class="headerlink" title="Attributes - DataTypes"></a>Attributes - DataTypes</h2><p>以下是 Sequelize 支持的一些数据类型。 有关完整和更新的列表, 参阅 <a href="http://docs.sequelizejs.com/variable/index.html#static-variable-DataTypes" target="_blank" rel="noopener">DataTypes</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Sequelize.STRING                      <span class="comment">// VARCHAR(255)</span></span><br><span class="line">Sequelize.STRING(<span class="number">1234</span>)                <span class="comment">// VARCHAR(1234)</span></span><br><span class="line">Sequelize.STRING.BINARY               <span class="comment">// VARCHAR BINARY</span></span><br><span class="line">Sequelize.TEXT                        <span class="comment">// TEXT</span></span><br><span class="line">Sequelize.TEXT(<span class="string">'tiny'</span>)                <span class="comment">// TINYTEXT</span></span><br><span class="line"></span><br><span class="line">Sequelize.INTEGER                     <span class="comment">// INTEGER</span></span><br><span class="line">Sequelize.BIGINT                      <span class="comment">// BIGINT</span></span><br><span class="line">Sequelize.BIGINT(<span class="number">11</span>)                  <span class="comment">// BIGINT(11)</span></span><br><span class="line"></span><br><span class="line">Sequelize.FLOAT                       <span class="comment">// FLOAT</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>)                   <span class="comment">// FLOAT(11)</span></span><br><span class="line">Sequelize.FLOAT(<span class="number">11</span>, <span class="number">12</span>)               <span class="comment">// FLOAT(11,12)</span></span><br><span class="line"></span><br><span class="line">Sequelize.REAL                        <span class="comment">// REAL         仅限于PostgreSQL.</span></span><br><span class="line">Sequelize.REAL(<span class="number">11</span>)                    <span class="comment">// REAL(11)     仅限于PostgreSQL.</span></span><br><span class="line">Sequelize.REAL(<span class="number">11</span>, <span class="number">12</span>)                <span class="comment">// REAL(11,12)  仅限于PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.DOUBLE                      <span class="comment">// DOUBLE</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>)                  <span class="comment">// DOUBLE(11)</span></span><br><span class="line">Sequelize.DOUBLE(<span class="number">11</span>, <span class="number">12</span>)              <span class="comment">// DOUBLE(11,12)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DECIMAL                     <span class="comment">// DECIMAL</span></span><br><span class="line">Sequelize.DECIMAL(<span class="number">10</span>, <span class="number">2</span>)              <span class="comment">// DECIMAL(10,2)</span></span><br><span class="line"></span><br><span class="line">Sequelize.DATE                        <span class="comment">// DATETIME 针对 mysql / sqlite, TIMESTAMP WITH TIME ZONE 针对 postgres</span></span><br><span class="line">Sequelize.DATE(<span class="number">6</span>)                     <span class="comment">// DATETIME(6) 针对 mysql 5.6.4+. 小数秒支持多达6位精度</span></span><br><span class="line">Sequelize.DATEONLY                    <span class="comment">// DATE 不带时间.</span></span><br><span class="line">Sequelize.BOOLEAN                     <span class="comment">// TINYINT(1)</span></span><br><span class="line"></span><br><span class="line">Sequelize.ENUM(<span class="string">'value 1'</span>, <span class="string">'value 2'</span>)  <span class="comment">// 一个允许具有 “value 1” 和 “value 2” 的 ENUM</span></span><br><span class="line">Sequelize.ARRAY(Sequelize.TEXT)       <span class="comment">// 定义一个数组。 仅限于 PostgreSQL。</span></span><br><span class="line">Sequelize.ARRAY(Sequelize.ENUM)       <span class="comment">// 定义一个 ENUM 数组. 仅限于 PostgreSQL。</span></span><br><span class="line"></span><br><span class="line">Sequelize.JSON                        <span class="comment">// JSON 列. 仅限于 PostgreSQL, SQLite and MySQL.</span></span><br><span class="line">Sequelize.JSONB                       <span class="comment">// JSONB 列. 仅限于 PostgreSQL .</span></span><br><span class="line"></span><br><span class="line">Sequelize.BLOB                        <span class="comment">// BLOB (PostgreSQL 二进制)</span></span><br><span class="line">Sequelize.BLOB(<span class="string">'tiny'</span>)                <span class="comment">// TINYBLOB (PostgreSQL 二进制. 其他参数是 medium 和 long)</span></span><br><span class="line"></span><br><span class="line">Sequelize.UUID                        <span class="comment">// PostgreSQL 和 SQLite 的 UUID 数据类型, CHAR(36) BINARY 针对于 MySQL (使用默认值: Sequelize.UUIDV1 或 Sequelize.UUIDV4 来让 sequelize 自动生成 ID)</span></span><br><span class="line"></span><br><span class="line">Sequelize.CIDR                        <span class="comment">// PostgreSQL 的 CIDR 数据类型</span></span><br><span class="line">Sequelize.INET                        <span class="comment">// PostgreSQL 的 INET 数据类型</span></span><br><span class="line">Sequelize.MACADDR                     <span class="comment">// PostgreSQL 的 MACADDR</span></span><br><span class="line"></span><br><span class="line">Sequelize.RANGE(Sequelize.INTEGER)    <span class="comment">// 定义 int4range 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.BIGINT)     <span class="comment">// 定义 int8range 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DATE)       <span class="comment">// 定义 tstzrange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DATEONLY)   <span class="comment">// 定义 daterange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line">Sequelize.RANGE(Sequelize.DECIMAL)    <span class="comment">// 定义 numrange 范围. 仅限于 PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.ARRAY(Sequelize.RANGE(Sequelize.DATE)) <span class="comment">// 定义 tstzrange 范围的数组. 仅限于 PostgreSQL.</span></span><br><span class="line"></span><br><span class="line">Sequelize.GEOMETRY                    <span class="comment">// 空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>)           <span class="comment">// 具有几何类型的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br><span class="line">Sequelize.GEOMETRY(<span class="string">'POINT'</span>, <span class="number">4326</span>)     <span class="comment">// 具有几何类型和SRID的空间列.  仅限于 PostgreSQL (具有 PostGIS) 或 MySQL.</span></span><br></pre></td></tr></table></figure><h2 id="Attributes-getters-setters"><a href="#Attributes-getters-setters" class="headerlink" title="Attributes - getters/setters"></a>Attributes - getters/setters</h2><p>可以在模型上定义’对象属性’ <code>getter</code> 和 <code>setter</code> 函数，这些可以用于映射到数据库字段的“保护”属性，也可以用于定义“伪”属性。</p><p><code>Getters</code> 和 <code>Setters</code> 可以通过两种方式定义（您可以混合使用这两种方式）：</p><ul><li>作为属性定义的一部分</li><li>作为模型参数的一部分</li></ul><blockquote><p>注意: 如果在两个地方定义了 <code>getter</code> 或 <code>setter</code>，那么在相关属性定义中找到的函数始终是优先的。</p></blockquote><h3 id="定义为属性定义的一部分"><a href="#定义为属性定义的一部分" class="headerlink" title="定义为属性定义的一部分"></a>定义为属性定义的一部分</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Employee = sequelize.define(<span class="string">'employee'</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    get() &#123;</span><br><span class="line">      <span class="keyword">const</span> title = <span class="keyword">this</span>.getDataValue(<span class="string">'title'</span>)</span><br><span class="line">      <span class="comment">// 'this' 允许你访问实例的属性</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getDataValue(<span class="string">'name'</span>) + <span class="string">' ('</span> + title + <span class="string">')'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setDataValue(<span class="string">'title'</span>, val.toUpperCase())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Employee.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Employee.create(&#123; <span class="attr">name</span>: <span class="string">'John Doe'</span>, <span class="attr">title</span>: <span class="string">'senior engineer'</span> &#125;).then(<span class="function"><span class="params">employee</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'name'</span>)) <span class="comment">// John Doe (SENIOR ENGINEER)</span></span><br><span class="line">    <span class="built_in">console</span>.log(employee.get(<span class="string">'title'</span>)) <span class="comment">// SENIOR ENGINEER</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="定义为模型参数的一部分"><a href="#定义为模型参数的一部分" class="headerlink" title="定义为模型参数的一部分"></a>定义为模型参数的一部分</h3><p>以下是在模型参数中定义 <code>getter</code> 和 <code>setter</code> 的示例。<br><code>fullName getter</code>，是一个说明如何在模型上定义伪属性的例子 - 这些属性实际上不是数据库模式的一部分。 事实上，伪属性可以通过两种方式定义：使用模型 <code>getter</code>，或者使用虚拟数据类型的列。 虚拟数据类型可以有验证，而虚拟属性的 <code>getter</code> 则不能。</p><p>请注意，<code>fullName getter</code> 函数中引用的 <code>this.firstname</code> 和 <code>this.lastname</code> 将触发对相应 <code>getter</code> 函数的调用。 如果你不想那样使用<code>getDataValue()</code>方法来访问原始值（见下文）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = sequelize.define(</span><br><span class="line">  <span class="string">'foo'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    firstname: Sequelize.STRING,</span><br><span class="line">    lastname: Sequelize.STRING</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    getterMethods: &#123;</span><br><span class="line">      fullName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">' '</span> + <span class="keyword">this</span>.lastname</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    setterMethods: &#123;</span><br><span class="line">      fullName(value) &#123;</span><br><span class="line">        <span class="keyword">const</span> names = value.split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'firstname'</span>, names.slice(<span class="number">0</span>, <span class="number">-1</span>).join(<span class="string">' '</span>))</span><br><span class="line">        <span class="keyword">this</span>.setDataValue(<span class="string">'lastname'</span>, names.slice(<span class="number">-1</span>).join(<span class="string">' '</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Foo.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> Foo.create(&#123; <span class="attr">firstname</span>: <span class="string">'guo'</span>, <span class="attr">lastname</span>: <span class="string">'dada'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> Foos = <span class="keyword">await</span> Foo.findAll()</span><br><span class="line">    <span class="built_in">console</span>.log(Foos[<span class="number">0</span>][<span class="string">'fullName'</span>]) <span class="comment">// guo dada</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Attributes-Validations"><a href="#Attributes-Validations" class="headerlink" title="Attributes - Validations"></a>Attributes - Validations</h2><p>模型验证，允许您为模型的每个属性指定格式/内容/继承验证。</p><p>验证会自动运行在 <code>create</code> ， <code>update</code> 和 <code>save</code> 上。 你也可以调用 <code>validate()</code> 手动验证一个实例。</p><p>验证由 <a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">validator.js</a> 实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ValidateMe = sequelize.define(<span class="string">'foo'</span>, &#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      is: [<span class="string">"^[a-z]+$"</span>,<span class="string">'i'</span>],     <span class="comment">// 只允许字母</span></span><br><span class="line">      is: <span class="regexp">/^[a-z]+$/i</span>,          <span class="comment">// 与上一个示例相同,使用了真正的正则表达式</span></span><br><span class="line">      not: [<span class="string">"[a-z]"</span>,<span class="string">'i'</span>],       <span class="comment">// 不允许字母</span></span><br><span class="line">      isEmail: <span class="literal">true</span>,            <span class="comment">// 检查邮件格式 (foo@bar.com)</span></span><br><span class="line">      isUrl: <span class="literal">true</span>,              <span class="comment">// 检查连接格式 (http://foo.com)</span></span><br><span class="line">      isIP: <span class="literal">true</span>,               <span class="comment">// 检查 IPv4 (129.89.23.1) 或 IPv6 格式</span></span><br><span class="line">      isIPv4: <span class="literal">true</span>,             <span class="comment">// 检查 IPv4 (129.89.23.1) 格式</span></span><br><span class="line">      isIPv6: <span class="literal">true</span>,             <span class="comment">// 检查 IPv6 格式</span></span><br><span class="line">      isAlpha: <span class="literal">true</span>,            <span class="comment">// 只允许字母</span></span><br><span class="line">      isAlphanumeric: <span class="literal">true</span>,     <span class="comment">// 只允许使用字母数字</span></span><br><span class="line">      isNumeric: <span class="literal">true</span>,          <span class="comment">// 只允许数字</span></span><br><span class="line">      isInt: <span class="literal">true</span>,              <span class="comment">// 检查是否为有效整数</span></span><br><span class="line">      isFloat: <span class="literal">true</span>,            <span class="comment">// 检查是否为有效浮点数</span></span><br><span class="line">      isDecimal: <span class="literal">true</span>,          <span class="comment">// 检查是否为任意数字</span></span><br><span class="line">      isLowercase: <span class="literal">true</span>,        <span class="comment">// 检查是否为小写</span></span><br><span class="line">      isUppercase: <span class="literal">true</span>,        <span class="comment">// 检查是否为大写</span></span><br><span class="line">      notNull: <span class="literal">true</span>,            <span class="comment">// 不允许为空</span></span><br><span class="line">      isNull: <span class="literal">true</span>,             <span class="comment">// 只允许为空</span></span><br><span class="line">      notEmpty: <span class="literal">true</span>,           <span class="comment">// 不允许空字符串</span></span><br><span class="line">      equals: <span class="string">'specific value'</span>, <span class="comment">// 只允许一个特定值</span></span><br><span class="line">      contains: <span class="string">'foo'</span>,          <span class="comment">// 检查是否包含特定的子字符串</span></span><br><span class="line">      notIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],  <span class="comment">// 检查是否值不是其中之一</span></span><br><span class="line">      isIn: [[<span class="string">'foo'</span>, <span class="string">'bar'</span>]],   <span class="comment">// 检查是否值是其中之一</span></span><br><span class="line">      notContains: <span class="string">'bar'</span>,       <span class="comment">// 不允许包含特定的子字符串</span></span><br><span class="line">      len: [<span class="number">2</span>,<span class="number">10</span>],              <span class="comment">// 只允许长度在2到10之间的值</span></span><br><span class="line">      isUUID: <span class="number">4</span>,                <span class="comment">// 只允许uuids</span></span><br><span class="line">      isDate: <span class="literal">true</span>,             <span class="comment">// 只允许日期字符串</span></span><br><span class="line">      isAfter: <span class="string">"2011-11-05"</span>,    <span class="comment">// 只允许在特定日期之后的日期字符串</span></span><br><span class="line">      isBefore: <span class="string">"2011-11-05"</span>,   <span class="comment">// 只允许在特定日期之前的日期字符串</span></span><br><span class="line">      max: <span class="number">23</span>,                  <span class="comment">// 只允许值 &lt;= 23</span></span><br><span class="line">      min: <span class="number">23</span>,                  <span class="comment">// 只允许值 &gt;= 23</span></span><br><span class="line">      isCreditCard: <span class="literal">true</span>,       <span class="comment">// 检查有效的信用卡号码</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 也可以自定义验证:</span></span><br><span class="line">      isEven(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(value) % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Only even values are allowed!'</span>)</span><br><span class="line">          <span class="comment">// 我们也在模型的上下文中，所以如果它存在的话, </span></span><br><span class="line">          <span class="comment">// this.otherField会得到otherField的值。</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>请注意，如果需要将多个参数传递给内置的验证函数，则要传递的参数必须位于数组中。 但是，如果要传递单个数组参数，例如isIn的可接受字符串数组，则将被解释为多个字符串参数，而不是一个数组参数。 要解决这个问题，传递一个单一长度的参数数组，比如<code>[[&#39;one&#39;，&#39;two&#39;]]</code>。</p><p>要使用自定义错误消息而不是 <code>validator.js</code> 提供的错误消息，请使用对象而不是纯值或参数数组，例如不需要参数的验证器可以被给定自定义消息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isInt: &#123;</span><br><span class="line">  msg: <span class="string">"Must be an integer number of pennies"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者如果还需要传递参数，请添加一个 <code>args</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isIn: &#123;</span><br><span class="line">  args: [[<span class="string">'en'</span>, <span class="string">'zh'</span>]],</span><br><span class="line">  msg: <span class="string">"Must be English or Chinese"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用自定义验证器函数时，错误消息将是抛出的 <code>Error</code> 对象所持有的任何消息。</p><p>有关内置验证方法的更多详细信息，请参阅<a href="https://github.com/chriso/validator.js" target="_blank" rel="noopener">the validator.js project</a> 。</p><h3 id="验证器-与-allowNull"><a href="#验证器-与-allowNull" class="headerlink" title="验证器 与 allowNull"></a>验证器 与 allowNull</h3><p>如果模型的特定字段设置为允许null（使用 <code>allowNull：true</code> ），并且该值已设置为 <code>null</code> ，则其验证器不会运行。</p><p>这意味着，您可以有一个字符串字段，该字段验证其长度至少为5个字符，但也允许为 <code>null</code>。</p><p>你可以通过设置 <code>notNull</code> 验证器来自定义 <code>allowNull</code> 错误消息, 像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    type: Sequelize.STRING,</span><br><span class="line">    allowNull: <span class="literal">false</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      notNull: &#123;</span><br><span class="line">        msg: <span class="string">'Please enter your name'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="模型验证"><a href="#模型验证" class="headerlink" title="模型验证"></a>模型验证</h3><p>验证器也可以在特定字段验证器之后用来定义检查模型。例如，你可以确保纬度和经度都不设置，或者两者都设置，如果设置了一个而另一个未设置则验证失败。</p><p>模型验证器方法与模型对象的上下文一起调用，如果它们抛出错误，则认为失败，否则通过。 这与自定义字段特定的验证器一样。</p><p>所收集的任何错误消息都将与验证结果对象一起放在字段验证错误中，这个错误使用在 <code>validate</code> 参数对象中以失败的验证方法的键来命名。即便在任何一个时刻，每个模型验证方法只能有一个错误消息，它会在数组中显示为单个字符串错误，以最大化与字段错误的一致性。</p><p>一个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pub = Sequelize.define(<span class="string">'pub'</span>, &#123;</span><br><span class="line">  name: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  address: &#123; <span class="attr">type</span>: Sequelize.STRING &#125;,</span><br><span class="line">  latitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-90</span>, <span class="attr">max</span>: <span class="number">90</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  longitude: &#123;</span><br><span class="line">    type: Sequelize.INTEGER,</span><br><span class="line">    allowNull: <span class="literal">true</span>,</span><br><span class="line">    defaultValue: <span class="literal">null</span>,</span><br><span class="line">    validate: &#123; <span class="attr">min</span>: <span class="number">-180</span>, <span class="attr">max</span>: <span class="number">180</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  validate: &#123;</span><br><span class="line">    bothCoordsOrNone() &#123;</span><br><span class="line">      <span class="keyword">if</span> ((<span class="keyword">this</span>.latitude === <span class="literal">null</span>) !== (<span class="keyword">this</span>.longitude === <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Require either both latitude and longitude or neither'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这种简单情况下，如果给定纬度或经度，而不是同时包含两者，则验证失败。 如果我们尝试构建一个超范围的纬度和经度，那么 <code>raging_bullock_arms.validate()</code> 可能会返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'latitude'</span>: [<span class="string">'Invalid number: latitude'</span>],</span><br><span class="line">  <span class="string">'bothCoordsOrNone'</span>: [<span class="string">'Require either both latitude and longitude or neither'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><p>你还可以修改 <code>Sequelize</code> 处理列名称的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar = sequelize.define(</span><br><span class="line">  <span class="string">'bar'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* bla */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 不添加时间戳属性 (updatedAt, createdAt)</span></span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不删除数据库条目，但将新添加的属性deletedAt设置为当前日期（删除完成时）。</span></span><br><span class="line">    <span class="comment">// paranoid 只有在启用时间戳时才能工作</span></span><br><span class="line">    paranoid: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将自动设置所有属性的字段选项为下划线命名方式。</span></span><br><span class="line">    <span class="comment">// 不会覆盖已经定义的字段选项</span></span><br><span class="line">    underscored: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用修改表名; 默认情况下，sequelize将自动将所有传递的模型名称（define的第一个参数）转换为复数。 如果你不想这样，请设置以下内容</span></span><br><span class="line">    freezeTableName: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义表的名称</span></span><br><span class="line">    tableName: <span class="string">'my_very_custom_table_name'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用乐观锁定。 启用时，sequelize将向模型添加版本计数属性，</span></span><br><span class="line">    <span class="comment">// 并在保存过时的实例时引发OptimisticLockingError错误。</span></span><br><span class="line">    <span class="comment">// 设置为true或具有要用于启用的属性名称的字符串。</span></span><br><span class="line">    version: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果你希望 <code>sequelize</code> 处理时间戳，但只想要其中一部分，或者希望您的时间戳被称为别的东西，则可以单独覆盖每个列：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = sequelize.define(</span><br><span class="line">  <span class="string">'foo'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* bla */</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 不要忘记启用时间戳！</span></span><br><span class="line">    timestamps: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我不想要 createdAt</span></span><br><span class="line">    createdAt: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我想 updateAt 实际上被称为 updateTimestamp</span></span><br><span class="line">    updatedAt: <span class="string">'updateTimestamp'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并且希望 deletedAt 被称为 destroyTime（请记住启用paranoid以使其工作）</span></span><br><span class="line">    deletedAt: <span class="string">'destroyTime'</span>,</span><br><span class="line">    paranoid: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>您也可以更改数据库引擎，例如 变更到到 <code>MyISAM</code>, 默认值是 <code>InnoDB</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = sequelize.define(<span class="string">'person'</span>, &#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  engine: <span class="string">'MYISAM'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或全局的</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(db, user, pw, &#123;</span><br><span class="line">  define: &#123; <span class="attr">engine</span>: <span class="string">'MYISAM'</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后，您可以为 <code>MySQL</code> 和 <code>PG</code> 中的表指定注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = sequelize.define(<span class="string">'person'</span>, &#123; <span class="comment">/* attributes */</span> &#125;, &#123;</span><br><span class="line">  comment: <span class="string">"I'm a table comment!"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="数据库同步"><a href="#数据库同步" class="headerlink" title="数据库同步"></a>数据库同步</h2><p>当开始一个新的项目时，你还不会有一个数据库结构，并且使用 <code>Sequelize</code> 你也不需要它。 只需指定您的模型结构，并让库完成其余操作。 目前支持的是创建和删除表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建表:</span></span><br><span class="line">Project.sync()</span><br><span class="line">Task.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制创建!</span></span><br><span class="line">Project.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;) <span class="comment">// 这将先丢弃表，然后重新创建它</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除表:</span></span><br><span class="line">Project.drop()</span><br><span class="line">Task.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理:</span></span><br><span class="line">Project.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 好吧...一切都很好！</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// oooh，你输入了错误的数据库凭据？</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为同步和删除所有的表可能要写很多行，你也可以让 <code>Sequelize</code> 来为做这些：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步所有尚未在数据库中的模型</span></span><br><span class="line">sequelize.sync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制同步所有模型</span></span><br><span class="line">sequelize.sync(&#123;<span class="attr">force</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有表</span></span><br><span class="line">sequelize.drop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广播处理:</span></span><br><span class="line">sequelize.[sync|drop]().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// woot woot</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// whooops</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>因为 <code>.sync({ force: true })</code> 是具有破坏性的操作，可以使用 <code>match</code> 参数作为附加的安全检查。</p><p><code>match</code> 参数可以通知 <code>Sequelize</code>，以便在同步之前匹配正则表达式与数据库名称 - 在测试中使用 <code>force：true</code> 但不使用实时代码的情况下的安全检查。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有当数据库名称以'_test'结尾时，才会运行.sync（）</span></span><br><span class="line">sequelize.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span>, <span class="attr">match</span>: <span class="regexp">/_test$/</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="sequelize-import"><a href="#sequelize-import" class="headerlink" title="sequelize.import"></a>sequelize.import</h2><p>您还可以使用 <code>import</code> 方法将模型定义存储在单个文件中。 返回的对象与导入文件的功能中定义的完全相同。</p><p>例如 <code>models/author.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'author'</span>, &#123;</span><br><span class="line">    username: DataTypes.STRING(<span class="number">50</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AuthorModel = sequelize.import(<span class="string">'./models/author.js'</span>)</span><br><span class="line"></span><br><span class="line">AuthorModel.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> author = AuthorModel.findById(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(author)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="同时导入多个-model"><a href="#同时导入多个-model" class="headerlink" title="同时导入多个 model"></a>同时导入多个 model</h3><p>再建立多一个 model <code>models/article.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> sequelize.define(<span class="string">'article'</span>, &#123;</span><br><span class="line">    title: DataTypes.STRING(<span class="number">50</span>),</span><br><span class="line">    content: DataTypes.STRING,</span><br><span class="line">    <span class="keyword">from</span>: &#123;</span><br><span class="line">      type: DataTypes.INTEGER,</span><br><span class="line">      references: &#123;</span><br><span class="line">        model: <span class="string">'authors'</span>,</span><br><span class="line">        key: <span class="string">'id'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MODELS_PATH = path.join(__dirname, <span class="string">'models'</span>)</span><br><span class="line"></span><br><span class="line">fs.readdirSync(MODELS_PATH).forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">  sequelize.import(path.join(MODELS_PATH, file))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sequelize.sync().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">author</span>: AuthorModel, article &#125; = sequelize.models</span><br><span class="line">  AuthorModel.create(&#123; <span class="attr">username</span>: <span class="string">'guodada'</span> &#125;).then(<span class="function"><span class="params">author</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(author.username) <span class="comment">// guodada</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="扩展模型"><a href="#扩展模型" class="headerlink" title="扩展模型"></a>扩展模型</h2><p><code>Sequelize</code> 模型是ES6类。 您可以轻松添加自定义实例或类级别的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">firstname</span>: Sequelize.STRING &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个类级别的方法</span></span><br><span class="line">User.classLevelMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'foo'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加实例级别方法</span></span><br><span class="line">User.prototype.instanceLevelMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，您还可以访问实例的数据并生成虚拟的 getter:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123; <span class="attr">firstname</span>: Sequelize.STRING, <span class="attr">lastname</span>: Sequelize.STRING &#125;)</span><br><span class="line"></span><br><span class="line">User.prototype.getFullname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">this</span>.firstname, <span class="keyword">this</span>.lastname].join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line">User.build(&#123; <span class="attr">firstname</span>: <span class="string">'foo'</span>, <span class="attr">lastname</span>: <span class="string">'bar'</span> &#125;).getFullname() <span class="comment">// 'foo bar'</span></span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><code>Sequelize</code> 支持在 <code>Model.sync()</code> 或 <code>sequelize.sync</code> 中创建的模型定义中添加索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">sequelize.define(</span><br><span class="line">  <span class="string">'user'</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    indexes: [</span><br><span class="line">      <span class="comment">// 在 email 上创建一个唯一索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        unique: <span class="literal">true</span>,</span><br><span class="line">        fields: [<span class="string">'email'</span>]</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在使用 jsonb_path_ops 的 operator 数据上创建一个 gin 索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        fields: [<span class="string">'data'</span>],</span><br><span class="line">        using: <span class="string">'gin'</span>,</span><br><span class="line">        operator: <span class="string">'jsonb_path_ops'</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 默认的索引名将是 [table]_[fields]</span></span><br><span class="line">      <span class="comment">// 创建多列局部索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'public_by_author'</span>,</span><br><span class="line">        fields: [<span class="string">'author'</span>, <span class="string">'status'</span>],</span><br><span class="line">        where: &#123;</span><br><span class="line">          status: <span class="string">'public'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 具有有序字段的BTREE索引</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'title_index'</span>,</span><br><span class="line">        method: <span class="string">'BTREE'</span>,</span><br><span class="line">        fields: [<span class="string">'author'</span>, &#123; <span class="attr">attribute</span>: <span class="string">'title'</span>, <span class="attr">collate</span>: <span class="string">'en_US'</span>, <span class="attr">order</span>: <span class="string">'DESC'</span>, <span class="attr">length</span>: <span class="number">5</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><ul><li><a href="http://docs.sequelizejs.com/manual/tutorial/models-definition.html" target="_blank" rel="noopener">models-definition</a></li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/models-definition.md" target="_blank" rel="noopener">models-definition 中文版</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Model-definition-模型定义&quot;&gt;&lt;a href=&quot;#Model-definition-模型定义&quot; class=&quot;headerlink&quot; title=&quot;Model definition - 模型定义&quot;&gt;&lt;/a&gt;Model definition - 模型定义&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sequelize&lt;/code&gt; 使用 &lt;code&gt;define&lt;/code&gt; 方法定义模型和表之间的映射，&lt;code&gt;Sequelize&lt;/code&gt; 将默认添加 &lt;code&gt;createdAt&lt;/code&gt; 和 &lt;code&gt;updatedAt&lt;/code&gt; 属性。因此，您将能够知道数据库条目何时进入数据库以及最后一次更新时。&lt;br&gt;&lt;code&gt;model&lt;/code&gt; 定义格式为 &lt;code&gt;sequelize.define(&amp;#39;name&amp;#39;, {attributes}, {configuration})：&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; User = sequelize.define(&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User.sync(&amp;#123; &lt;span class=&quot;attr&quot;&gt;force&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上式代码在数据库中的执行命令为：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`users`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`users`&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; auto_increment ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`createdAt`&lt;/span&gt; DATETIME &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`updatedAt`&lt;/span&gt; DATETIME &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize - quick start</title>
    <link href="https://gershonv.github.io/2019/01/03/sequelize-1/"/>
    <id>https://gershonv.github.io/2019/01/03/sequelize-1/</id>
    <published>2019-01-03T03:52:37.000Z</published>
    <updated>2019-01-03T14:59:27.290Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Node.js</code> 社区中，<code>sequelize</code> 是一个广泛使用的 <code>ORM</code> 框架，它支持 <code>MySQL</code>、<code>PostgreSQL</code>、<code>SQLite</code> 和 <code>MSSQL</code> 等多个数据源。</p><blockquote><p>有数据库基础或者使用过 <code>ORM</code> 操作数据库的经验会更容易上手哦，笔者这里用的以 <code>mysql</code> 为主</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sequelize mysql2 --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>记得提前启动 <code>mysql</code> 数据库，创建本例中使用的 <code>demo</code> 数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql.server start <span class="comment">// mac (windows net start mysql)</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">CREATE DATABASE IF NOT EXISTS demo;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><p><code>Sequelize</code> 将在初始化时设置连接池，所以如果从单个进程连接到数据库，你最好每个数据库只创建一个实例。 如果要从多个进程连接到数据库，则必须为每个进程创建一个实例，但每个实例应具有“最大连接池大小除以实例数”的最大连接池大小。<br>因此，如果您希望最大连接池大小为 90，并且有 3 个工作进程，则每个进程的实例应具有 30 的最大连接池大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'database'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>, &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  dialect: <span class="string">'mysql'</span> | <span class="string">'mariadb'</span> | <span class="string">'sqlite'</span> | <span class="string">'postgres'</span> | <span class="string">'mssql'</span>,</span><br><span class="line"></span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    idle: <span class="number">10000</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 仅 SQLite 适用</span></span><br><span class="line">  storage: <span class="string">'path/to/database.sqlite'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者可以简单的使用一个连接 uri</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'postgres://user:pass@example.com:5432/dbname'</span>)</span><br></pre></td></tr></table></figure><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>您可以使用 <code>.authenticate()</code> 函数来测试连接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully.'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Unable to connect to the database:'</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><p><code>Sequelize</code> 使用 <code>define</code> 方法定义模型和表之间的映射。大白话就是 我们可以通过 <code>model</code> 去建立表, 添加字段约束等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  firstName: Sequelize.STRING</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 sync 可以链接模型到数据库中</span></span><br><span class="line"><span class="comment">// force: true 如果表已经存在，将会丢弃表</span></span><br><span class="line"><span class="comment">// force 效果： DROP TABLE IF EXISTS `User` =&gt; CREATE TABLE IF NOT EXISTS `USER`...</span></span><br><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码执行后我们可以发现 <code>demo</code> 数据库中创建了一个 <code>users</code> 的表</p><h3 id="model-操作数据库"><a href="#model-操作数据库" class="headerlink" title="model 操作数据库"></a>model 操作数据库</h3><p>demo 就简单创建数据和查询数据吧</p><blockquote><p><code>Sequelize</code> 使用 <code>Bluebird promise</code> 来控制异步控制流程。</p></blockquote><ul><li>链式写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  User.create(&#123;</span><br><span class="line">    firstName: <span class="string">'John'</span>,</span><br><span class="line">    lastName: <span class="string">'Hancock'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">    User.findAll().then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>async/await</code> 写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Hancock'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> User.findAll()</span><br><span class="line">    <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="完整-demo"><a href="#完整-demo" class="headerlink" title="完整 demo"></a>完整 demo</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @params ('database', 'username', 'password', options)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">'demo'</span>, <span class="string">'root'</span>, <span class="string">'123456'</span>, &#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>, <span class="comment">// 连接的 host 地址</span></span><br><span class="line">  dialect: <span class="string">'mysql'</span>, <span class="comment">// 连接到 mysql</span></span><br><span class="line">  port: <span class="number">3306</span>, <span class="comment">// 数据库服务器端口</span></span><br><span class="line">  pool: &#123;</span><br><span class="line">    max: <span class="number">5</span>,</span><br><span class="line">    min: <span class="number">0</span>,</span><br><span class="line">    acquire: <span class="number">30000</span>,</span><br><span class="line">    idle: <span class="number">10000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = sequelize.define(<span class="string">'user'</span>, &#123;</span><br><span class="line">  firstName: Sequelize.STRING,</span><br><span class="line">  lastName: &#123;</span><br><span class="line">    type: Sequelize.STRING</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">  .authenticate()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Connection has been established successfully'</span>)</span><br><span class="line">    User.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> User.create(&#123; <span class="attr">firstName</span>: <span class="string">'John'</span>, <span class="attr">lastName</span>: <span class="string">'Hancock'</span> &#125;)</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> User.findAll()</span><br><span class="line">        <span class="built_in">console</span>.log(user.firstName, user.lastName) <span class="comment">// John Hancock</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'you find: '</span>, users[<span class="number">0</span>][<span class="string">'firstName'</span>], users[<span class="number">0</span>][<span class="string">'lastName'</span>]) <span class="comment">// you find:  John Hancock</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Unable to connect to the database:'</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html" target="_blank" rel="noopener">sequelize - getting started</a></li><li><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/getting-started.md" target="_blank" rel="noopener">sequelize - 中文版入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;Node.js&lt;/code&gt; 社区中，&lt;code&gt;sequelize&lt;/code&gt; 是一个广泛使用的 &lt;code&gt;ORM&lt;/code&gt; 框架，它支持 &lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;PostgreSQL&lt;/code&gt;、&lt;code&gt;SQLite&lt;/code&gt; 和 &lt;code&gt;MSSQL&lt;/code&gt; 等多个数据源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有数据库基础或者使用过 &lt;code&gt;ORM&lt;/code&gt; 操作数据库的经验会更容易上手哦，笔者这里用的以 &lt;code&gt;mysql&lt;/code&gt; 为主&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i sequelize mysql2 --registry=https://registry.npm.taobao.org&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记得提前启动 &lt;code&gt;mysql&lt;/code&gt; 数据库，创建本例中使用的 &lt;code&gt;demo&lt;/code&gt; 数据库&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql.server start &lt;span class=&quot;comment&quot;&gt;// mac (windows net start mysql)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CREATE DATABASE IF NOT EXISTS demo;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Sequelize" scheme="https://gershonv.github.io/categories/Sequelize/"/>
    
    
      <category term="Sequelize" scheme="https://gershonv.github.io/tags/Sequelize/"/>
    
  </entry>
  
  <entry>
    <title>mysql - column 的增删改查</title>
    <link href="https://gershonv.github.io/2018/12/30/mysql-3/"/>
    <id>https://gershonv.github.io/2018/12/30/mysql-3/</id>
    <published>2018-12-30T10:37:33.000Z</published>
    <updated>2019-01-03T15:00:29.431Z</updated>
    
    <content type="html"><![CDATA[<p>创建数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DROP TABLE users; 创建过 users 表可以使用这个语句删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">users</span>(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  age TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">  sex TINYINT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><ul><li>INSERT INTO 表名 VALUE</li><li>INSERT INTO 表名 set 列名 = xxx (可以进行子查询)</li><li>INSERT INTO 表名 SELECT ,,,,,,, (将查询结果插入指定的表中)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'TOM'</span>, <span class="string">'1234'</span>, <span class="number">22</span>, <span class="number">1</span>); <span class="comment">-- 一个列都不能漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'TOM'</span>, <span class="string">'1234'</span>, <span class="number">22</span>, <span class="number">1</span>), (<span class="keyword">DEFAULT</span>, <span class="string">'Jhon'</span>, <span class="string">'4321'</span>, <span class="keyword">DEFAULT</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- set方法 与第一种方式的区别是，此方法可以使用子查询，但是一次性只能插入一条记录。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">users</span> <span class="keyword">SET</span> username=<span class="string">'BEN'</span>,<span class="keyword">password</span>=<span class="string">'569'</span>; <span class="comment">--其余字段有默认值或者允许为空</span></span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>UPDATA 表名 SET 字段名=值|表达式 WHERE 判断条件 (如省略 where 筛选,则更新所有记录)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age=age-<span class="keyword">id</span>,sex=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age=age+<span class="number">10</span> <span class="keyword">where</span> <span class="keyword">id</span> % <span class="number">2</span> =<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_condition]</span><br></pre></td></tr></table></figure><h2 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查找记录：<span class="keyword">SELECT</span> select_expr [,select_expr ……]</span><br><span class="line">[<span class="keyword">FROM</span> table_referrnces [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>&#123;col_name | <span class="keyword">position</span>&#125; [<span class="keyword">ASC</span> | DESCI],……]</span><br><span class="line">[<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name |expr |<span class="keyword">position</span>&#125; [<span class="keyword">ASC</span> | DESCI],……]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, username <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">AS</span> userId, username <span class="keyword">AS</span> <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br></pre></td></tr></table></figure><h3 id="查询分组"><a href="#查询分组" class="headerlink" title="查询分组"></a>查询分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex  <span class="comment">-- 数据库多条记录会被合并，譬如这里只有 1, null</span></span><br></pre></td></tr></table></figure><ul><li>分组条件 [HAVING where_condotion]</li></ul><p><code>having</code> 后的条件必须为聚合函数或者出现在 <code>select</code> 所选择的字段中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="comment">-- 对所有记录分组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 报错 having 后的条件必须为聚合函数或者出现在 select 所选择的字段中。</span></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">by</span> sex  <span class="keyword">having</span> age&gt;<span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">count</span>(<span class="keyword">id</span>) &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先按照age升序排列（asc），其次按照id降序排列（desc）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age,<span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul><li>限制返回的数据的数量</li></ul><ol><li>select _ from users limit 2 意思为从取前两条记录。</li><li>select _ from users limit 3,2 意思为从第 4 条记录开始取两条，而不是从第三条记录开始。</li><li>…</li></ol><h3 id="子查询与链接"><a href="#子查询与链接" class="headerlink" title="子查询与链接"></a>子查询与链接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb4(</span><br><span class="line">  goodsId <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  goodsName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  price <span class="built_in">FLOAT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> tb4 <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">'goods1'</span>, <span class="number">12.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods2'</span>, <span class="number">95.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods3'</span>, <span class="number">15.8</span>), (<span class="literal">NULL</span>, <span class="string">'goods2'</span>, <span class="number">50.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(price) <span class="keyword">from</span> tb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对平均值四舍五入</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4; <span class="comment">-- 保留两位小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用比较</span></span><br><span class="line"><span class="keyword">select</span> goodsId, goodsName, price <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找大于平均价格的</span></span><br><span class="line"><span class="keyword">select</span> goodsId, goodsName, price <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= (<span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">运算符/关键字</th><th style="text-align:center">ANY</th><th style="text-align:center">SOME</th><th style="text-align:center">ALL</th></tr></thead><tbody><tr><td style="text-align:center">&gt;、&gt;=</td><td style="text-align:center">最小值</td><td style="text-align:center">最小值</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">&lt;、&lt;=</td><td style="text-align:center">最大值</td><td style="text-align:center">最大值</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">任意值</td><td style="text-align:center">任意值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&gt;、!=</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">任意值</td></tr></tbody></table><p>使用[NOT]EXISTS 的子查询：如果子查询返回任何行，EXISTS 将返回 TURE；否则返回 FALSE.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb4 <span class="keyword">where</span> price &gt;= all (<span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">avg</span>(price), <span class="number">2</span>) <span class="keyword">from</span> tb4); <span class="comment">-- 任意大于平均价格的记录</span></span><br></pre></td></tr></table></figure><h2 id="数据增删改查-demo（单表）"><a href="#数据增删改查-demo（单表）" class="headerlink" title="数据增删改查-demo（单表）"></a>数据增删改查-demo（单表）</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> goods (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  price <span class="built_in">FLOAT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">  origin <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">'CHINA'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入单条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'oppo'</span>, <span class="number">5399</span>, <span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'iphone'</span>, <span class="number">8999</span>, <span class="string">'US'</span>), (<span class="literal">NULL</span>, <span class="string">'meizu'</span>, <span class="number">6999</span>, <span class="keyword">DEFAULT</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SET 插入</span></span><br><span class="line"><span class="keyword">INSERT</span> goods <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'xiaomi'</span>, price=<span class="number">999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SET 插入多条</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> goods (goodsName, price) <span class="keyword">VALUES</span>(<span class="string">'ss'</span>,<span class="number">25</span>),(<span class="string">'bb'</span>,<span class="number">125</span>);</span><br></pre></td></tr></table></figure><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> goodsName, price <span class="keyword">FROM</span> goods;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> goodsName, price <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> price &gt; <span class="number">1000</span>; <span class="comment">-- 加条件筛选</span></span><br></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找到 iphone , 修改名字为 iphonX, 价格 9999</span></span><br><span class="line"><span class="keyword">UPDATE</span> goods <span class="keyword">SET</span> goodsName=<span class="string">'iphonX'</span>, price=<span class="number">9999</span> <span class="keyword">WHERE</span> goodsName=<span class="string">'iphone'</span>;</span><br></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> goods <span class="keyword">WHERE</span> goodsName=<span class="string">'ss'</span>; <span class="comment">-- DELETE FROM goods 删除所有</span></span><br></pre></td></tr></table></figure><p>多表有 <code>left join</code> 、 <code>inner</code> 等等，这里不再讲述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建数据&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- DROP TABLE users; 创建过 users 表可以使用这个语句删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 创建表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;users&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;SMALLINT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  username &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;VARCHAR&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age TINYINT &lt;span class=&quot;keyword&quot;&gt;UNSIGNED&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sex TINYINT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>mysql - 对 table 的操作</title>
    <link href="https://gershonv.github.io/2018/12/30/mysql-2/"/>
    <id>https://gershonv.github.io/2018/12/30/mysql-2/</id>
    <published>2018-12-30T05:15:47.000Z</published>
    <updated>2019-01-03T15:00:58.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql.server <span class="keyword">start</span> // net <span class="keyword">start</span> mysql</span><br><span class="line"></span><br><span class="line">mysql -uroot -p // login</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span> // 进入数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name (</span><br><span class="line">  column_name data_type,</span><br><span class="line">  // ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h3><p>创建 <code>tb1</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb1 (</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  age TINYINT <span class="keyword">UNSIGNED</span>,</span><br><span class="line">  salary <span class="built_in">FLOAT</span>(<span class="number">8</span>, <span class="number">2</span>) <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">SHOIW TABLES; <span class="comment">--查看数据库中的表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> tb1; <span class="comment">--查看数据表中的结构</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Null</th><th style="text-align:center">Key</th><th style="text-align:center">Default</th><th style="text-align:center">Extra</th></tr></thead><tbody><tr><td style="text-align:center">username</td><td style="text-align:center">varchar(20)</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">age</td><td style="text-align:center">tinyint(3) unsigned</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">salary</td><td style="text-align:center">float(8,2) unsigned</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">null</td></tr></tbody></table><ul><li>username: 用户的名字往往是字符型，字符数据量小，所以数据类型定为 <code>VARCHAR(20)</code>, <code>NOT NULL</code> 不能为空</li><li>age: 年龄不能为负值且为整型，数据类型定为 <code>TINYINT</code></li><li>salary: <code>FLOAT(8, 2)</code> 整数八位 - 小数有两位，非负值</li></ul><h3 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb3(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span>,</span><br><span class="line">  sex ENUM (<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>) <span class="keyword">DEFAULT</span> <span class="string">'3'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- AUTO_INCREMENT: 自增字段，必须为主键 `PRIMARY KEY`，保证记录的唯一性.</span></span><br><span class="line"><span class="comment">-- UNIQUE KEY: 唯一</span></span><br><span class="line"><span class="comment">-- DEFAULT: 默认</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Null</th><th style="text-align:center">Key</th><th style="text-align:center">Default</th><th style="text-align:center">Extra</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">smallint(5)</td><td style="text-align:center">NO</td><td style="text-align:center">PRI</td><td style="text-align:center">null</td><td style="text-align:center">auto_increment</td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">varchar(20)</td><td style="text-align:center">NO</td><td style="text-align:center"></td><td style="text-align:center">null</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sex</td><td style="text-align:center">enum(‘1’,’2’,’3’)</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">3</td></tr></tbody></table><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>约束保证数据的完整性和一致性。</li><li>约束表现为表级约束和列级约束。</li><li>约束类型包括<ul><li><code>NOT NULL</code> 非空</li><li><code>PRIMARY KEY</code> 主键</li><li><code>UNIQUE</code> 唯一</li><li><code>DEFAULT</code> 默认</li><li><code>FOREIGN KEY</code> 外键 (foreign key)</li></ul></li></ul><blockquote><p>外键约束：保持数据一致性，完整性，实现一对多或者多对一的关系</p></blockquote><blockquote><p>表级约束：针对两个或者两个以上的字段来使用</p></blockquote><blockquote><p>列级约束：只针对某一个字段来使用</p></blockquote><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><ol><li>父表和子表必须使用相同的存储引擎，而且禁止使用临时表</li><li>数据表的存储引擎只能为 InnoDB</li><li>外键列和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度则可以不同。</li><li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL 将自动创建索引。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 身份表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> provinces (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  pname <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">users</span> (</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">   username <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   pid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">   FOREIGN <span class="keyword">KEY</span>(pid) <span class="keyword">REFERENCES</span> provinces(<span class="keyword">id</span>) <span class="comment">-- 设置 pid 外键 references provinces 表的 id</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键列和参照列必须具有相似的数据类型: pid BIGINT， 是创建不成功的。保证数据类型相同是第一步</span></span><br><span class="line"><span class="comment">-- 数字的长度或是否有符号位必须相同：pid SMALLINT, 同样创建不成功。有符号位位必须相同。pid SMALLINT UNSIGNED 就满足条件了</span></span><br><span class="line"><span class="comment">-- 外键列和参照列必须创建索引:, 我们没有创建，MySQL 自动创建了索引。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键在创建的同时，会自动创建索引。</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEXES</span> <span class="keyword">FROM</span> provinces\G; <span class="comment">-- Seq_in_index: 1</span></span><br></pre></td></tr></table></figure><ol><li>我们创建了父表 <code>provinces</code>, 子表 <code>users</code></li><li>外键列：pid , 参照列 id</li></ol><h2 id="对-table-column-的操作"><a href="#对-table-column-的操作" class="headerlink" title="对 table column 的操作"></a>对 table column 的操作</h2><p>列的增加、删除，约束的添加、约束的删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加单列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> [<span class="keyword">column</span>] col_name col_difinition[<span class="keyword">first</span>|<span class="keyword">after</span> col_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解释：first 插入第一列，after col_name 插入某一列后面。省略不写，加在最后列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加多列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">add</span> [<span class="keyword">column</span>] (col_name col_difinition,...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tbl_name <span class="keyword">drop</span>[<span class="keyword">column</span>] col_name1,col_name2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> age TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">ADD</span> <span class="keyword">password</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">AFTER</span> username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> <span class="keyword">DROP</span> <span class="keyword">password</span>, <span class="keyword">DROP</span> username;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改数据表【添加或删除约束】：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] PRIMARY <span class="keyword">KEY</span> [index_type](index_col_name,...) <span class="comment">-- 这是添加主键约束(只能有一个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] <span class="keyword">UNIQUE</span> [<span class="keyword">INDEX</span>/<span class="keyword">KEY</span>] [index_name] [index_type] (index_col_name,...); <span class="comment">--这是添加唯一约束(可以有多个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> [symbol]] FOREIGN <span class="keyword">KEY</span> [index_name] (index_col_name,...) reference_definition; <span class="comment">--这是添加外键约束(可以有多个)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] col_name &#123;<span class="keyword">SET</span> <span class="keyword">DEFAULT</span> literal(这个literal的意思是加上的<span class="keyword">default</span>)/<span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>&#125; <span class="comment">--添加或删除默认约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>; <span class="comment">-- 删除主键约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> &#123;<span class="keyword">INDEX</span>/<span class="keyword">KEY</span>&#125; index_name; <span class="comment">--删除唯一约束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span> fk_symbol; <span class="comment">--删除外键约束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- demo</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> users2 (</span><br><span class="line">  username <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  pid <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">id</span> <span class="built_in">SMALLINT</span> <span class="keyword">UNSIGNED</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (username);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span> (pid) <span class="keyword">REFERENCES</span> provinces (<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ADD</span> age TINYINT <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ALTER</span> age <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除默认约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">ALTER</span> age <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> username;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外键约束</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users2 <span class="comment">--  CONSTRAINT `users2_ibfk_1` FOREIGN KEY (`pid`) REFERENCES `provinces` (`id`)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users2 <span class="keyword">DROP</span> FOREIGN <span class="keyword">key</span> users2_ibfk_1;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建表&quot;&gt;&lt;a href=&quot;#创建表&quot; class=&quot;headerlink&quot; title=&quot;创建表&quot;&gt;&lt;/a&gt;创建表&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql.server &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; // net &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p // login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;test&lt;/span&gt; // 进入数据库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt;] table_name (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  column_name data_type,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>mysql - 数据库操作和数据属性</title>
    <link href="https://gershonv.github.io/2018/12/29/mysql-1/"/>
    <id>https://gershonv.github.io/2018/12/29/mysql-1/</id>
    <published>2018-12-29T02:18:35.000Z</published>
    <updated>2019-01-03T15:01:08.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>启动 <code>mysql</code>, <code>mac</code> 可通过 <code>brew</code> 安装 <code>mysql</code> 后启动。 <code>window</code> 需要手动配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mac</span></span><br><span class="line">mysql.server start</span><br><span class="line"></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录 -u 用户名 root 超级用户 -p 密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">// 退出</span></span><br><span class="line">mysql &gt; \q</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到 learn 数据库</span></span><br><span class="line">mysql &gt; use learn</span><br></pre></td></tr></table></figure><a id="more"></a><p>MySQL 语句规范</p><ul><li>关键字与函数名称全部大写</li><li>数据库名称，表名称，字段名称全部小写</li><li>SQL 语句必须以分号结尾</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数据库 默认编码 utf-8</span></span><br><span class="line">CREATE DATABASE IF NOT EXISTS t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 gbk 编码的数据库</span></span><br><span class="line">CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET gbk;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示创建数据库 t1 的指令</span></span><br><span class="line">SHOW CREATE DATABASE t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看数据库</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据库</span></span><br><span class="line">DROP DATABASE IF EXISTS t1;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th>MySQL 数据类型</th><th>含义</th><th>（有符号）</th></tr></thead><tbody><tr><td>tinyint(m)</td><td>1 个字节</td><td>范围(-128~127)</td></tr><tr><td>smallint(m)</td><td>2 个字节</td><td>范围(-32768~32767)</td></tr><tr><td>mediumint(m)</td><td>3 个字节</td><td>范围(-8388608~8388607)</td></tr><tr><td>int(m)</td><td>4 个字节</td><td>范围(-2147483648~2147483647)</td></tr><tr><td>bigint(m)</td><td>8 个字节</td><td>范围(+-9.22*10 的 18 次方)</td></tr></tbody></table><p>比如我们存储年龄，范围为 0-100 ，此时我们可以使用 <code>TINYINT</code> 存储</p><h3 id="浮点型-float和double"><a href="#浮点型-float和double" class="headerlink" title="浮点型(float和double)"></a>浮点型(float和double)</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m,d)</td><td>单精度浮点型 8位精度(4字节)  m总个数，d小数位</td></tr><tr><td>double(m,d)</td><td>双精度浮点型 16位精度(8字节)  m总个数，d小数位</td></tr></tbody></table><p>设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位。整数部分最大是3位，如果插入数12.123456，存储的是12.1234，如果插入12.12，存储的是12.1200.</p><h3 id="字符串-char-varchar-text"><a href="#字符串-char-varchar-text" class="headerlink" title="字符串(char,varchar,_text)"></a>字符串(char,varchar,_text)</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>固定长度，最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度，最多255个字符</td></tr><tr><td>text</td><td>可变长度，最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度，最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度，最多2的32次方-1个字符</td></tr></tbody></table><p><code>char</code>和<code>varchar</code>：</p><p>1.<code>char(n)</code> 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以char类型存储的字符串末尾不能有空格，<code>varchar</code>不限于此。 </p><p>2.<code>char(n)</code> 固定长度，char(4)不管是存入几个字符，都将占用4个字节，<code>varchar</code>是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，</p><p>所以<code>varchar</code>(4),存入3个字符将占用4个字节。 </p><p>3.char类型的字符串检索速度要比<code>varchar</code>类型的快。<br><code>varchar</code>和<code>text</code>： </p><p>1.<code>varchar</code>可指定n，<code>text</code>不能指定，内部存储<code>varchar</code>是存入的实际字符数+1个字节（n&lt;=255）或2个字节(n&gt;255)，<code>text</code>是实际字符数+2个字</p><p>节。 </p><p>2.<code>text</code>类型不能有默认值。 </p><p>3.<code>varchar</code>可直接创建索引，<code>text</code>创建索引要指定前多少个字符。<code>varchar</code>查询速度快于<code>text</code>,在都创建索引的情况下，<code>text</code>的索引似乎不起作用。</p><p>5.二进制数据(_Blob)</p><p>1._BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。</p><p>2._BLOB存储的数据只能整体读出。 </p><p>3._TEXT可以指定字符集，_BLO不用指定字符集。</p><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>日期 ‘2008-12-2’</td></tr><tr><td>time</td><td>时间 ‘12:25:36’</td></tr><tr><td>datetime</td><td>日期时间 ‘2008-12-2 22:06:44’</td></tr><tr><td>timestamp</td><td>自动存储记录修改时间</td></tr></tbody></table><h2 id="数据类型的属性"><a href="#数据类型的属性" class="headerlink" title="数据类型的属性"></a>数据类型的属性</h2><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title=&quot;数据库操作&quot;&gt;&lt;/a&gt;数据库操作&lt;/h2&gt;&lt;p&gt;启动 &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;mac&lt;/code&gt; 可通过 &lt;code&gt;brew&lt;/code&gt; 安装 &lt;code&gt;mysql&lt;/code&gt; 后启动。 &lt;code&gt;window&lt;/code&gt; 需要手动配置&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql.server start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net start mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 登录 -u 用户名 root 超级用户 -p 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql -uroot -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; \q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 切换到 learn 数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql &amp;gt; use learn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://gershonv.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://gershonv.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>随笔 - 如何用es6+写出优雅的js代码</title>
    <link href="https://gershonv.github.io/2018/12/12/%E9%9A%8F%E7%AC%94-%E5%A6%82%E4%BD%95%E7%94%A8es6+%E5%86%99%E5%87%BA%E4%BC%98%E9%9B%85%E7%9A%84js%E4%BB%A3%E7%A0%81/"/>
    <id>https://gershonv.github.io/2018/12/12/随笔-如何用es6+写出优雅的js代码/</id>
    <published>2018-12-12T01:59:21.000Z</published>
    <updated>2019-01-03T15:05:02.621Z</updated>
    
    <content type="html"><![CDATA[<p>兼容 IE ？不存在的好吗。</p><p>其实使用新语法配合 <code>babel</code> 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。</p><p>下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。</p><h2 id="使用-let-const"><a href="#使用-let-const" class="headerlink" title="使用 let / const"></a>使用 let / const</h2><p><code>var</code> 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 <code>undefined</code>。这种现象多多少少是有些奇怪的。</p><p>个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 <code>const</code>, 代码的可读性也会增强很多。</p><ul><li><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。</li><li><code>let</code> 变量指向的内存地址，保存的只是一个指向实际数据的指针</li></ul><p>补充 <code>const</code> 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">person.age = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>详情看 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">let 和 const 命令</a></p><a id="more"></a><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><code>ES6</code> 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（<code>Destructuring</code>）。</p><p>好处就是：解决了访问多层嵌套的对象或数组的命名，减少代码量</p><p>声明多个变量:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(age, name, sex) <span class="comment">// 22, guodada, 1</span></span><br></pre></td></tr></table></figure><p>使用在对象中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    firstName: <span class="string">'guo'</span>,</span><br><span class="line">    lastName: <span class="string">'dada'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们多处使用 firstName， 那就不必要每个地方都写 obj.name.firstName, 这样极大提升coding效率</span></span><br><span class="line"><span class="keyword">const</span> &#123; firstName, lastName &#125; = obj.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> firstName = obj.name.firstName</span><br><span class="line"><span class="keyword">const</span> lastName = obj.name.lastName</span><br></pre></td></tr></table></figure><p>使用在函数中:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在参数中结构赋值，获取参数, 当参数多的使用时候十分方便</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Destructuring</span>(<span class="params">&#123; name, age &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; name, age &#125; <span class="comment">// 相当于 &#123; name: name, age: age &#125; , 可以简写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line">Destructuring(params)</span><br></pre></td></tr></table></figure><p>更多用法见 <a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">变量的解构赋值</a></p><p>ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">x</span>: x, <span class="attr">y</span>: y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// Object &#123;x: 1, y: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="扩展符的运用"><a href="#扩展符的运用" class="headerlink" title="扩展符的运用"></a>扩展符的运用</h2><p>es6 扩展符有很多用法，他可以使你的代码更加简洁，易懂。这里就举例常用的用法</p><p>在对象中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'guodada'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  sex: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制对象。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> copy = &#123; ...obj &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改对象属性值(生成新对象) 相当于 Object.assgin(&#123;&#125;, obj, &#123; age: 18 &#125;)</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合结构赋值</span></span><br><span class="line"><span class="keyword">let</span> &#123; sex, ...z &#125; = obj</span><br><span class="line">z <span class="comment">// &#123; name: 'guodada', age: 22 &#125;</span></span><br></pre></td></tr></table></figure><p>在数组中的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制数组。扩展符为浅复制！！！</span></span><br><span class="line"><span class="keyword">const</span> newArr = [...arr] <span class="comment">// ...[1, 2, 3] =&gt; 相当于展开数组：1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> conbineArr = [...arr, ...arr2]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合求最大值函数</span></span><br><span class="line"><span class="built_in">Math</span>.max(...arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合 Set 实现数组去重。注意：json 等对象数组不可用</span></span><br><span class="line">[...new <span class="built_in">Set</span>(arr2)] <span class="comment">// [4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>扩展符的其他用法请自行查资料。</p><h2 id="数组用法"><a href="#数组用法" class="headerlink" title="数组用法"></a>数组用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(arr) <span class="comment">// 判断是否为数组</span></span><br><span class="line"></span><br><span class="line">arr.includes(<span class="number">2</span>) <span class="comment">// true 判断数组中是否包含某项</span></span><br><span class="line"></span><br><span class="line">arr.findIndex(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 2 找出第一个符合条件的数组成员并返回数组下标, 找不到返回 -1</span></span><br><span class="line"></span><br><span class="line">arr.find(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="number">3</span>) <span class="comment">// 3 找出第一个符合条件的数组成员并返回, 找不到返回 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es5 其他还有 filter map forEach 等，这里不做举例。</span></span><br><span class="line">arr.every(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// false 每一项都满足条件则返回 true</span></span><br><span class="line"></span><br><span class="line">arr.some(<span class="function"><span class="params">d</span> =&gt;</span> d &gt; <span class="number">2</span>) <span class="comment">// true 只要有一项满足条件则返回 true</span></span><br></pre></td></tr></table></figure><p><code>find/findIndex</code> : 找出第一个符合条件的数组成员之后不再匹配，一定程度下优化查找。<br><code>includes</code>: 返回 <code>true/false</code>, 相较于 <code>indexOf</code>, 实用多了</p><ul><li><p><code>flat()</code> : 扁平化数组，常用于将数组转化为一维数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line">arr.flat() <span class="comment">// [1, 2, 3, 4] 扁平化数组, 默认展开一层。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"></span><br><span class="line">arr2.flat() <span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line">arr2.flat(<span class="number">2</span>) <span class="comment">// [1, 2, 3, 4, 5, 6] flat(3) 也是展开两层...</span></span><br></pre></td></tr></table></figure></li><li><p><code>flatMap()</code>: 在数组执行 <code>map</code> 方法后执行 <code>flat</code>, 用的不多，其实可以写 <code>map</code> 后写 <code>flat</code> 更好懂点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]) <span class="comment">//  [ 2, 4, 3, 6, 4, 8 ]</span></span><br><span class="line"><span class="comment">// 1. [2, 3, 4].map(d =&gt; [d, d * 2]) =&gt; [[2, 4], [3, 6], [4, 8]]</span></span><br><span class="line"><span class="comment">// 2. [[2, 4], [3, 6], [4, 8]].flat()</span></span><br></pre></td></tr></table></figure></li></ul><p>补充常用的对象转数组的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ['name']</span></span><br><span class="line"><span class="built_in">Object</span>.values(obj) <span class="comment">// ['guodada']</span></span><br><span class="line"><span class="built_in">Object</span>.entries(obj) <span class="comment">// [['name', 'guodada']]</span></span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>用的挺多的，注意不兼容 <code>IE</code> !</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'guodada'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">`welcome <span class="subst">$&#123;name&#125;</span>`</span> <span class="comment">// welcome guodada</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the same as</span></span><br><span class="line"><span class="keyword">const</span> newStr = <span class="string">'welcome '</span> + name</span><br></pre></td></tr></table></figure><h2 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async / await"></a>使用 async / await</h2><p><code>async/await</code> 实际上就是 <code>generator</code> 的语法糖, 主要用来解决异步问题，具体网上很多文章都有介绍，这里就不做多的解释吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  axios.get(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res)) <span class="comment">// axios 也是 promise 对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合try/catch</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> axios.get(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps 虽然好用，但是有时候适用场景不好，比如我们在拉取列表和用户信息需要同时进行时，<code>await</code> 后才执行下一条语句，这不是我们希望看到的。解决方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Promise.all</span></span><br><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([anAsyncCall(), thisIsAlsoAsync(), oneMore()])</span><br></pre></td></tr></table></figure><p>传送门：<a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">async 函数</a></p><h2 id="利用-class-封装代码"><a href="#利用-class-封装代码" class="headerlink" title="利用 class 封装代码"></a>利用 class 封装代码</h2><p>主要是抽离代码逻辑，使得代复用性加强。同时，<code>class</code> 的形式会让结构变得更加清晰，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyForm</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func defaultLimit - 默认表单输入限制条件, value 为空时返回 true</span></span><br><span class="line"><span class="comment">   * @param &#123;Number&#125; type - 代表表单类型的节点！</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; value - 需要被验证的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment">   * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment">   * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment">   * 3 1≤x 整数</span></span><br><span class="line"><span class="comment">   * 4 0≤x≤10</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> defaultLimit(type, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> typeLimitMap = &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">      <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span>,</span><br><span class="line">      <span class="number">4</span>: <span class="function"><span class="params">value</span> =&gt;</span> value &lt;= <span class="number">10</span> &amp;&amp; value &gt;= <span class="number">0</span> <span class="comment">// 0≤ x ≤ 10 可以为小数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!typeLimitMap[type] || !value) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> typeLimitMap[type] === <span class="string">'function'</span>) <span class="keyword">return</span> typeLimitMap[type](value)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> typeLimitMap[type].test(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @func translateLimit - 转换操作符</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; operator - 运算符</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; value - 被匹配的值</span></span><br><span class="line"><span class="comment">   * @param &#123;*&#125; compareValue - 匹配的值</span></span><br><span class="line"><span class="comment">   * @return Boolean</span></span><br><span class="line"><span class="comment">   * 'eq': '='</span></span><br><span class="line"><span class="comment">   * 'ne': '≠'</span></span><br><span class="line"><span class="comment">   * 'gt': '&gt;'</span></span><br><span class="line"><span class="comment">   * 'lt': '&lt;'</span></span><br><span class="line"><span class="comment">   * 'ge': '≥'</span></span><br><span class="line"><span class="comment">   * 'le': '≤'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> translateLimit(operator, value, compareValue) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = &#123;</span><br><span class="line">      eq: value === compareValue,</span><br><span class="line">      ne: value !== compareValue,</span><br><span class="line">      gt: value &gt; compareValue,</span><br><span class="line">      lt: value &lt; compareValue,</span><br><span class="line">      ge: value &gt;= compareValue,</span><br><span class="line">      le: value &lt;= compareValue</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Object</span>.keys(type).includes(operator) || !value || value === <span class="string">'-'</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> type[operator]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyForm</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyForm <span class="keyword">from</span> <span class="string">'./MyForm'</span></span><br><span class="line"></span><br><span class="line">MyForm.defaultLimit(<span class="number">1</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><ul><li><code>static</code> ：静态属性，类可以直接调用</li><li><code>constructor</code> : 实例化类的时候调用，即 <code>new MyForm()</code>, 这里没用到</li></ul><p>更多知识请阅 <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">Class 的基本语法</a></p><h2 id="优化-if-else-语句"><a href="#优化-if-else-语句" class="headerlink" title="优化 if/else 语句"></a>优化 if/else 语句</h2><blockquote><p>当逻辑或<code>||</code>时，找到为 <code>true</code> 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。</p><p>当逻辑与<code>&amp;&amp;</code>时，找到为 <code>false</code> 的分项就停止处理，并返回该分项的值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span> || <span class="literal">null</span> || <span class="number">3</span> || <span class="number">4</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">3</span> &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>减少 <code>if / else</code>地狱般的调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [age, name, sex] = [<span class="number">22</span>, <span class="string">'guodada'</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'guodada'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp;</span></span><br><span class="line"><span class="keyword">if</span> (age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者(太长了不推荐)</span></span><br><span class="line">age &gt; <span class="number">10</span> &amp;&amp; name === <span class="string">'guodada'</span> &amp;&amp; sex &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">'all right'</span>)</span><br></pre></td></tr></table></figure><p>提一下 <code>react</code> 的坑点, 在 <code>render</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">return</span> arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染出 0 ！</span></span><br><span class="line"><span class="comment">// Boolean / undefind / null / NaN 等才不会渲染。我们可以使用 !! 强制转化为 boolean 解决这个问题</span></span><br><span class="line"><span class="keyword">return</span> !!arr.length &amp;&amp; <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 &amp;&amp; 控制组件的渲染</span></span><br><span class="line"><span class="keyword">this</span>.state.visible &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Modal</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用 <code>Array.includes</code> 来处理多重条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">18</span>, <span class="number">20</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">18</span> || age === <span class="number">12</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="number">18</span>, <span class="number">12</span>].includes(age)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'match'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是较少的判断逻辑则可以使用三元运算符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">22</span></span><br><span class="line"><span class="keyword">const</span> isAdult = age &gt;= <span class="number">18</span> ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">// 这里可以简写为 const isAdult = age &gt; 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> type = age &gt;= <span class="number">18</span> ? <span class="string">'adult'</span> : <span class="string">'child'</span></span><br></pre></td></tr></table></figure><h2 id="优化-switch-case-语句"><a href="#优化-switch-case-语句" class="headerlink" title="优化 switch/case 语句"></a>优化 switch/case 语句</h2><p><code>switch/case</code> 比 <code>if/else</code> 代码结构好点，但也和它一样有时十分冗长。</p><p>这里以自己实际项目中代码举例：<br>有时我们可能需要对不同类型的字段进行不一样的正则验证，防止用户错误地输入。譬如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [type, value] = [<span class="number">1</span>, <span class="string">'20'</span>]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 type 属性对输出进行验证</span></span><br><span class="line"><span class="comment"> * 1 0≤x≤50 整数</span></span><br><span class="line"><span class="comment"> * 2 -1000≤x≤2000 整数</span></span><br><span class="line"><span class="comment"> * 3 1≤x 整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func1(type, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 switch/case</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(\d|[1-4]\d|50)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>.test(value)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^[1-9]\d*$/</span>.test(value)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func2(type, value)</span><br></pre></td></tr></table></figure><p>我们如何巧妙的解决这个代码冗长的问题呢，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> limitMap = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="regexp">/^(\d|[1-4]\d|50)$/g</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="regexp">/^-?(\d&#123;1,3&#125;|1000)$|^(-|1\d&#123;3&#125;|2000)$/</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="regexp">/^[1-9]\d*$/</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> limitMap[type].test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用对象去匹配属性值，可以减少你的代码量，也使你的代码看起来更加简洁。你也可以使用 <code>Map</code> 对象去匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params">type, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapArr = [[<span class="number">1</span>, /^(\d|[<span class="number">1</span><span class="number">-4</span>]\d|<span class="number">50</span>)$/g], [<span class="number">2</span>, /^-?(\d&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|<span class="number">1000</span>)$|^(-|<span class="number">1</span>\d&#123;<span class="number">3</span>&#125;|<span class="number">2000</span>)$/], [<span class="number">3</span>, /^[<span class="number">1</span><span class="number">-9</span>]\d*$/]]</span><br><span class="line">  <span class="keyword">const</span> limitMap = <span class="keyword">new</span> <span class="built_in">Map</span>(mapArr)</span><br><span class="line">  <span class="keyword">return</span> limitMap.get(type).test(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Map</code> 是一种键值对的数据结构对象，它的匹配更加严格。它会区分开你传递的是字符串还是数字，譬如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limitMap.get(<span class="number">1</span>) <span class="comment">// /^(\d|[1-4]\d|50)$/g</span></span><br><span class="line">limitMap.get(<span class="string">'1'</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>更多详见 <a href="http://es6.ruanyifeng.com/#docs/set-map" target="_blank" rel="noopener">Set 和 Map 数据结构</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>函数参数默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age = <span class="number">22</span></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  age = age || <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>===</code> 代替 <code>==</code>。其实大家都懂这个的。。。</p></li><li>箭头函数，es6 最常用的语法。</li><li>return boolean<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="comment">// 多此一举了，其实就等于</span></span><br><span class="line"><span class="keyword">return</span> a === <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p>敬请各位补充。交流才能进步，相视一笑，嘿嘿。</p><ul><li><a href="https://github.com/gershonv/my-code-store" target="_blank" rel="noopener">github</a> - star 一下人生更美好</li><li><a href="https://gershonv.github.io/categories/">blog</a> - 欢迎交流</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兼容 IE ？不存在的好吗。&lt;/p&gt;
&lt;p&gt;其实使用新语法配合 &lt;code&gt;babel&lt;/code&gt; 的转码，已经可以解决这一些问题了。既然如此，那就多使用新语法去探索一下怎么更好的去写代码吧。&lt;/p&gt;
&lt;p&gt;下面分享个人开发中常用的 js 写法技巧，希望对各位有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;使用-let-const&quot;&gt;&lt;a href=&quot;#使用-let-const&quot; class=&quot;headerlink&quot; title=&quot;使用 let / const&quot;&gt;&lt;/a&gt;使用 let / const&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; 命令会发生”变量提升“现象，即变量可以在声明之前使用，值为 &lt;code&gt;undefined&lt;/code&gt;。这种现象多多少少是有些奇怪的。&lt;/p&gt;
&lt;p&gt;个人认为，对声明的变量确定后面不会发生更改时，即使性能上没有太大提升差异在，但使用 &lt;code&gt;const&lt;/code&gt;, 代码的可读性也会增强很多。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; 变量指向的内存地址，保存的只是一个指向实际数据的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补充 &lt;code&gt;const&lt;/code&gt; 定义的变量不是数据不可变，而是保存的引用地址不能发生改变。例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123; &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person.age = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.age) &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;详情看 &lt;a href=&quot;http://es6.ruanyifeng.com/#docs/let&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;let 和 const 命令&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发随笔" scheme="https://gershonv.github.io/categories/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>react - hooks(v16.7)</title>
    <link href="https://gershonv.github.io/2018/12/03/react-hooks/"/>
    <id>https://gershonv.github.io/2018/12/03/react-hooks/</id>
    <published>2018-12-03T07:30:32.000Z</published>
    <updated>2019-01-03T15:05:20.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文不做概念性的解析，旨在实操 <code>hooks</code>，相关资源可以自行谷歌。以下提供相关参考资料：</p><ul><li><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Introducing Hooks</a></li><li><a href="https://juejin.im/post/5be409696fb9a049b13db042" target="_blank" rel="noopener">理解 React Hooks</a></li><li><a href="https://juejin.im/post/5bffc271e51d454dca3547b1#heading-0" target="_blank" rel="noopener">React Hooks 实用指南</a> - 大都借鉴这篇文章</li><li><a href="https://juejin.im/post/5bd53d6a51882528382d8108" target="_blank" rel="noopener">Hooks 一览</a></li></ul><a id="more"></a><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><blockquote><p><code>useState</code> 可以让您的函数组件也具备类组件的 <code>state</code> 功能。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @state - state的值</span></span><br><span class="line"><span class="comment"> * @setState - 更新state的函数, 接受一个参数值来更新 state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> [state, setState] = useState(initialState)</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Base</span></span><br></pre></td></tr></table></figure><p>值得注意的是，<code>state</code> 是对象的话， <code>setState</code> 接收什么参数，就更新对象下的所有属性，而不是更新单个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [info, setInfo] = useState(&#123;</span><br><span class="line">    name: <span class="string">'guodada'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;name: &#123;info.name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;age: &#123;info.age&#125;&lt;/</span>p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setInfo(&#123; <span class="attr">name</span>: <span class="string">'Sam'</span> &#125;)&#125;&gt;setInfo&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>click button</code> =&gt; <code>info = { name: &#39;Sam&#39; }</code>，<code>age</code> 丢失。</p><p>根据业务需求，我们可以在函数组件中使用多个 <code>useState</code>，这里不再进行演示。</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><code>Effect Hook</code>: 它与 <code>React Class</code> 中的 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 具有相同的用途。模拟的是生命周期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @didUpdate - function</span></span><br><span class="line"><span class="comment"> * @[] - 参数2为数组，不加参数或者不写的话任何state 的变化都会执行 didUpdate 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">useEffect(didUpdate, [])</span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">          Click me</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>添加第二个参数进行控制<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [count2, setCount2] = useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'run useEffect'</span>)</span><br><span class="line">  &#125;, [count])  <span class="comment">// 只有count 变化时才执行这个 useEffect 函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count2&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount2(count2 + 1)&#125;&gt;Click me&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><blockquote><p><code>useReducer</code> 是 <code>useState</code> 的代提方案。当你有一些更负责的数据时可以使用它。（组件本地的redux）</p></blockquote><p>使用语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @state =&gt; your state</span></span><br><span class="line"><span class="comment"> * @dispatch</span></span><br><span class="line"><span class="comment"> *  @param &#123;state&#125; </span></span><br><span class="line"><span class="comment"> *  @param &#123;action&#125;  </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState)</span><br></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseReducer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(</span><br><span class="line">    (state, action) =&gt; &#123;</span><br><span class="line">      <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'update'</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">name</span>: action.payload &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> state</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">''</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleNameChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">'update'</span>, <span class="attr">payload</span>: e.target.value &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;你好：&#123;state.name&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input onChange=&#123;handleNameChange&#125; /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className="App"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;Hello&lt;/</span>h1&gt;</span><br><span class="line">        &lt;h2&gt;Start editing to see some magic happen!<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        &lt;TestUseReducer /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h2><blockquote><p><code>useCallback</code> 和 <code>useMemo</code> 有些相似。它接收一个内联函数和一个数组，它返回的是一个记忆化版本的函数。</p></blockquote><p>使用语法如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> computeExpensiveValue(a), [a])</span><br></pre></td></tr></table></figure><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, useCallback &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseCallback</span>(<span class="params">&#123; num &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memoizedCallback = useCallback(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'这里监听 num 值的更新重新做一些操作和计算'</span>)</span><br><span class="line">      num.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item++ )</span><br><span class="line">      <span class="keyword">return</span> num</span><br><span class="line">    &#125;,</span><br><span class="line">    [num]</span><br><span class="line">  )</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'记忆 num &gt; '</span>, memoizedCallback())</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'原始 num &gt; '</span>, num)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">num</span>: num1, <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">        count: state.count + <span class="number">1</span></span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChangeNum = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: num2 &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; num &#125; = <span class="keyword">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;h1&gt;Hello&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;Start editing to see some magic happen!&lt;/</span>h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleChangeNum&#125;&gt;修改传入的Num值&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TestUseCallback num=&#123;num&#125; /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TestUseRef</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    inputEl.current.focus() <span class="comment">// 设置useRef返回对象的值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;TestUseRef&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;input ref=&#123;inputEl&#125; type="text" /</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;onButtonClick&#125;&gt;input聚焦&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TestUseRef</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文不做概念性的解析，旨在实操 &lt;code&gt;hooks&lt;/code&gt;，相关资源可以自行谷歌。以下提供相关参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introducing Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5be409696fb9a049b13db042&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解 React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5bffc271e51d454dca3547b1#heading-0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Hooks 实用指南&lt;/a&gt; - 大都借鉴这篇文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5bd53d6a51882528382d8108&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hooks 一览&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - lazy(v16.6)</title>
    <link href="https://gershonv.github.io/2018/11/26/react-lazy/"/>
    <id>https://gershonv.github.io/2018/11/26/react-lazy/</id>
    <published>2018-11-26T09:31:09.000Z</published>
    <updated>2019-01-03T15:05:50.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import"></a>动态 import</h2><p>在 <a href="https://reactjs.org/docs/code-splitting.html#import" target="_blank" rel="noopener">Code-Splitting</a> 部分，提出拆分组件的最佳方式（best way） 是使用动态的 import 方式。</p><p>比如下面两种使用方式的对比：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./math'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">16</span>, <span class="number">26</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">'./math'</span>).then(<span class="function"><span class="params">math</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">16</span>, <span class="number">26</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以发现动态 <code>import</code> 提供了 <code>Promise</code> 规范的 API，比如 <code>.then()</code></p><a id="more"></a><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>动态 <code>import</code> 主要应用场景是延迟加载方法，对于组件来说，并不是很适用，但是 <code>React.lazy</code> 对于组件的加载则是有比较大的帮助。</p><blockquote><p><code>React.lazy</code> 和 <code>suspense</code> 并不适用于服务端渲染</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, lazy, Suspense &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./MyComponent'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// lazy 需要配合 Suspense 使用</span></span><br><span class="line">    <span class="comment">// Suspense 使用的时候，fallback 一定是存在且有内容的， 否则会报错。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &lt;MyComponent /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="实现-lazy-load"><a href="#实现-lazy-load" class="headerlink" title="实现 lazy-load"></a>实现 lazy-load</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> loadComponent =&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123; <span class="attr">Component</span>: <span class="literal">null</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.Component !== <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">      NProgress.start()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">default</span>: Component &#125; = <span class="keyword">await</span> loadComponent()</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; Component &#125;)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`Cannot load component in &lt;AsyncComponent /&gt;`</span>)</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; Component &#125; = <span class="keyword">this</span>.state</span><br><span class="line">      <span class="keyword">return</span> Component ? <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span> : null</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br></pre></td></tr></table></figure><h2 id="react-loadable-（router4-推荐）"><a href="#react-loadable-（router4-推荐）" class="headerlink" title="react-loadable （router4 推荐）"></a>react-loadable （router4 推荐）</h2><p><a href="https://gershonv.github.io/2018/11/07/react-router-3/">react-router - [译] Code Splitting</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NoFound = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./components/NoFound'</span>),</span><br><span class="line">  loading: <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/"</span> component=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">          &lt;Route component=&#123;NoFound&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Router&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态-import&quot;&gt;&lt;a href=&quot;#动态-import&quot; class=&quot;headerlink&quot; title=&quot;动态 import&quot;&gt;&lt;/a&gt;动态 import&lt;/h2&gt;&lt;p&gt;在 &lt;a href=&quot;https://reactjs.org/docs/code-splitting.html#import&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code-Splitting&lt;/a&gt; 部分，提出拆分组件的最佳方式（best way） 是使用动态的 import 方式。&lt;/p&gt;
&lt;p&gt;比如下面两种使用方式的对比：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 之前&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; add &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./math&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(add(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 之后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./math&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;math&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(math.add(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现动态 &lt;code&gt;import&lt;/code&gt; 提供了 &lt;code&gt;Promise&lt;/code&gt; 规范的 API，比如 &lt;code&gt;.then()&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - Portals</title>
    <link href="https://gershonv.github.io/2018/11/26/react-Portals/"/>
    <id>https://gershonv.github.io/2018/11/26/react-Portals/</id>
    <published>2018-11-26T09:00:32.000Z</published>
    <updated>2019-01-03T15:06:20.228Z</updated>
    
    <content type="html"><![CDATA[<p><code>Portals</code> 指定挂载组件到某个节点，适用于 <code>modal</code>、<code>toolTip</code>…</p><p>我们不希望 <code>modal</code> 组件的节点出现在 <code>root</code> 根节点中。。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createPortal(child, container)</span><br></pre></td></tr></table></figure><ul><li><code>child</code> : The first argument (child) is any renderable React child，such as an element, string, or fragment<br>即可渲染的 react 组件</li><li><code>container</code> : a DOM element</li></ul><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>通常，如果你的组件的 render 方法返回一个元素时，它作为最接近的父节点的子节点挂载到 DOM 中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React mounts a new div and renders the children into it</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>但是，有时候要把子节点插入 DOM 中的不同位置时，是有用的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// React does *not* create a new div. It renders the children into `domNode`.</span></span><br><span class="line">  <span class="comment">// `domNode` is any valid DOM node, regardless of its location in the DOM.</span></span><br><span class="line">  <span class="keyword">return</span> ReactDOM.createPortal(</span><br><span class="line">    <span class="keyword">this</span>.props.children,</span><br><span class="line">    domNode,</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>portals</code> 的典型场景是如果一个父组件有一个 <code>overflow:hidden</code> 或者是 <code>z-index</code> 的样式，但是你需要子节点在视觉上 <code>break out</code> （打破）这个父容器，比如 对话框，选项卡或者提示工具等</p><p>下面代码实现一个 <code>model</code> 组件</p><h2 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">'./Modal'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">  showModal = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: !<span class="keyword">this</span>.state.show &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  closeModal = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123; <span class="attr">show</span>: <span class="literal">true</span> &#125;)&#125;&gt;open Modal&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;Modal show=&#123;this.state.show&#125; onClose=&#123;this.closeModal&#125;&gt;</span></span><br><span class="line"><span class="regexp">          This message is from Modal</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Modal&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="Modal-jsx"><a href="#Modal-jsx" class="headerlink" title="Modal.jsx"></a>Modal.jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdropStyle = &#123;</span><br><span class="line">  position: <span class="string">'fixed'</span>,</span><br><span class="line">  top: <span class="number">0</span>,</span><br><span class="line">  bottom: <span class="number">0</span>,</span><br><span class="line">  left: <span class="number">0</span>,</span><br><span class="line">  right: <span class="number">0</span>,</span><br><span class="line">  backgroundColor: <span class="string">'rgba(0, 0, 0, 0.3)'</span>,</span><br><span class="line">  padding: <span class="number">50</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modalStyle = &#123;</span><br><span class="line">  backgroundColor: <span class="string">'#fff'</span>,</span><br><span class="line">  borderRadius: <span class="number">5</span>,</span><br><span class="line">  border: <span class="string">'1px solid #eee'</span>,</span><br><span class="line">  maxWidth: <span class="number">500</span>,</span><br><span class="line">  minHeight: <span class="number">300</span>,</span><br><span class="line">  maring: <span class="string">'0 auto'</span>,</span><br><span class="line">  padding: <span class="number">30</span>,</span><br><span class="line">  position: <span class="string">'relative'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> footerStyle = &#123;</span><br><span class="line">  position: <span class="string">'absolute'</span>,</span><br><span class="line">  bottom: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此前，页面需要创建一个 dom 元素 其中 id 为modal-root</span></span><br><span class="line"><span class="keyword">const</span> modalRoot = <span class="built_in">document</span>.getElementById(<span class="string">'modal-root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onKeyUp = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 鼠标信息 http://keycode.info/</span></span><br><span class="line">    <span class="comment">// 按下 esc</span></span><br><span class="line">    <span class="keyword">if</span> (e.which === <span class="number">27</span> &amp;&amp; <span class="keyword">this</span>.props.show) &#123;</span><br><span class="line">      <span class="keyword">this</span>.props.onClose()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="keyword">this</span>.onKeyUp)</span><br><span class="line">    modalRoot.appendChild(<span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'keyup'</span>, <span class="keyword">this</span>.onKeyUp)</span><br><span class="line">    modalRoot.removeChild(<span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.show) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> modalUI = (</span><br><span class="line">      &lt;div style=&#123;backdropStyle&#125;&gt;</span><br><span class="line">        &lt;div style=&#123;modalStyle&#125;&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line"></span><br><span class="line">          &lt;div style=&#123;footerStyle&#125;&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.props.onClose&#125;&gt;Close&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// createPortal 挂载到 this.el 的元素中</span></span><br><span class="line">    <span class="keyword">return</span> ReactDOM.createPortal(modalUI, <span class="keyword">this</span>.el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Modal</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Portals&lt;/code&gt; 指定挂载组件到某个节点，适用于 &lt;code&gt;modal&lt;/code&gt;、&lt;code&gt;toolTip&lt;/code&gt;…&lt;/p&gt;
&lt;p&gt;我们不希望 &lt;code&gt;modal&lt;/code&gt; 组件的节点出现在 &lt;code&gt;root&lt;/code&gt; 根节点中。。。。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.createPortal(child, container)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;child&lt;/code&gt; : The first argument (child) is any renderable React child，such as an element, string, or fragment&lt;br&gt;即可渲染的 react 组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt; : a DOM element&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - PureComponent 和 memo</title>
    <link href="https://gershonv.github.io/2018/11/26/react-purecomponent%20&amp;&amp;%20memo/"/>
    <id>https://gershonv.github.io/2018/11/26/react-purecomponent &amp;&amp; memo/</id>
    <published>2018-11-26T07:58:36.000Z</published>
    <updated>2019-01-03T15:06:40.897Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setState-数据无改变，-组件会重新-render"><a href="#setState-数据无改变，-组件会重新-render" class="headerlink" title="setState 数据无改变， 组件会重新 render"></a>setState 数据无改变， 组件会重新 render</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">num</span>: <span class="number">1</span> &#125;) <span class="comment">// setState 但是不改变 num</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;MyComponent num=&#123;<span class="keyword">this</span>.state.num&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>点击按钮，<code>setState</code> 后 <code>num</code> 并未发生改变， 但是组件 <code>MyComponent</code> 仍然会重新渲染，这就会导致一部分性能的消耗。</p><p>我们可以使用 <code>shouldComponentUpdate(nextProps, nextState)</code> 来决定组件的渲染与否，也可以使用 react 提供的两个 API</p><a id="more"></a><h2 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a>React.PureComponent</h2><p><code>pure</code> 是纯的意思， <code>PureComponent</code> 也就是纯组件, 只要把继承类从 <code>Component</code> 换成 <code>PureComponent</code> 即可，可以减少不必要的 <code>render</code> 操作的次数，从而提高性能。</p><p><code>PureComponent</code> 主要作用于类组件，而 <code>memo</code> 主要作用于函数组件。</p><blockquote><p><code>React.PureComponent</code> 使用 <code>prop</code> 和 <code>state</code> 的浅比较来决定是否 <code>render</code> 组件。（我们就不需要在 <code>shouldComponentUpdate</code> 中写一大段代码了！）</p></blockquote><p>使用方法极其简单（以上面的代码为例）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... App</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>在不可变数据类型（数组、对象等等）<code>PureComponent</code> 是不生效的！因为它的引用地址并未发生改变。做一个 demo:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">nums</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; nums &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    nums.pop()</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; nums &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;MyComponent nums=&#123;<span class="keyword">this</span>.state.nums&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><p>这里无论如何点击按钮，<code>MyComponent</code> 也不会重新渲染。具体比较过程是这样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">    <span class="comment">// nums 引用是一样的，所以 this.props.nums 等于 nextProps.nums，结果永远返回 false，组件不会重新渲染！</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums !== nextProps.nums</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.nums</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h2><p><code>React.memo</code> 是一个高阶组件。它与 <code>React.PureComponent</code> 类似，但是对于函数组件而不是类。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, memo &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyComponent = memo(<span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'redner'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... App</span></span><br></pre></td></tr></table></figure><p>如果你的函数组件在给定相同的道具的情况下呈现相同的结果，则可以 <code>React.memo</code> 通过记忆结果将其包装在一些调用中以提高性能。这意味着 <code>React</code> 将跳过渲染组件，并重用最后渲染的结果。</p><p>默认情况下，它只会浅显比较 <code>props</code> 对象中的复杂对象。如果要控制比较，还可以提供自定义比较功能作为第二个参数。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* render using props */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  return true if passing nextProps to render would return</span></span><br><span class="line"><span class="comment">  the same result as passing prevProps to render,</span></span><br><span class="line"><span class="comment">  otherwise return false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual)</span><br></pre></td></tr></table></figure><p>此方法仅作为性能优化存在。不要依赖它来“防止”渲染，因为这可能导致错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;setState-数据无改变，-组件会重新-render&quot;&gt;&lt;a href=&quot;#setState-数据无改变，-组件会重新-render&quot; class=&quot;headerlink&quot; title=&quot;setState 数据无改变， 组件会重新 render&quot;&gt;&lt;/a&gt;setState 数据无改变， 组件会重新 render&lt;/h2&gt;&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; Component &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyComponent&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;render&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state = &amp;#123; &lt;span class=&quot;attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  handleClick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123; &lt;span class=&quot;attr&quot;&gt;num&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// setState 但是不改变 num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;MyComponent num=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.num&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;button onClick=&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.handleClick&amp;#125;&amp;gt;click&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;      &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; App&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;点击按钮，&lt;code&gt;setState&lt;/code&gt; 后 &lt;code&gt;num&lt;/code&gt; 并未发生改变， 但是组件 &lt;code&gt;MyComponent&lt;/code&gt; 仍然会重新渲染，这就会导致一部分性能的消耗。&lt;/p&gt;
&lt;p&gt;我们可以使用 &lt;code&gt;shouldComponentUpdate(nextProps, nextState)&lt;/code&gt; 来决定组件的渲染与否，也可以使用 react 提供的两个 API&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - Ref</title>
    <link href="https://gershonv.github.io/2018/11/26/react-ref/"/>
    <id>https://gershonv.github.io/2018/11/26/react-ref/</id>
    <published>2018-11-26T05:36:56.000Z</published>
    <updated>2019-01-03T15:07:07.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么时候使用-Refs"><a href="#什么时候使用-Refs" class="headerlink" title="什么时候使用 Refs"></a>什么时候使用 Refs</h2><p>下面是几个使用 <code>Refs</code> 的示例：</p><ul><li>管理焦点状态(focus)、文本选择(text selection)、或者是媒体播放(media)</li><li>强制触发动画</li><li>与第三方的 DOM 库集成</li></ul><p>在任何能够通过直接声明完成的事情中应当避免使用 <code>Refs</code>。<br>例如，对于一个 <code>Dialog</code> 组件，应当提供一个 <code>isOpen</code> 的 <code>prop</code> 来控制它，而不是暴露<code>open()</code>和 <code>close()</code>两个方法去操作。</p><p>使用方法：</p><p><code>Refs</code> 是使用 <code>React.createRef()</code> 创建的，并通过 <code>ref</code> 属性附加到 <code>React</code> 元素。在构造组件时，通常将 <code>Refs</code> 分配给实例属性，以便可以在整个组件中引用它们。</p><a id="more"></a><h2 id="在-DOM-元素中使用"><a href="#在-DOM-元素中使用" class="headerlink" title="在 DOM 元素中使用"></a>在 DOM 元素中使用</h2><blockquote><p>当在 <code>refHTML</code> 元素上使用该属性时，<code>ref</code> 在构造函数中创建的属性将 <code>React.createRef()</code>接收底层 <code>DOM</code> 元素作为其 <code>current</code> 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputRef.current.focus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ref</span>=<span class="string">&#123;this.inputRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default App</span></span><br></pre></td></tr></table></figure><h2 id="在类组件中使用"><a href="#在类组件中使用" class="headerlink" title="在类组件中使用"></a>在类组件中使用</h2><blockquote><p>在 <code>ref</code> 自定义类组件上使用该属性时，该 <code>ref</code> 对象将接收组件的已安装实例作为其 <code>current</code>。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.myRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> MyComponent = <span class="keyword">this</span>.myRef.current <span class="comment">// MyComponent 实例 : MyComponent.state = &#123; name: 'guodada' &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default App</span></span><br></pre></td></tr></table></figure><h2 id="在函数组件中使用"><a href="#在函数组件中使用" class="headerlink" title="在函数组件中使用"></a>在函数组件中使用</h2><blockquote><p>您可能无法 <code>ref</code> 在函数组件上使用该属性，因为它们没有实例。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunctionComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  constructor(props) &#123;</span></span><br><span class="line"><span class="xml">    super(props)</span></span><br><span class="line"><span class="xml">    this.textInput = React.createRef()</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  render() &#123;</span></span><br><span class="line"><span class="xml">    // This will *not* work!</span></span><br><span class="line">    return &lt;MyFunctionComponent ref=&#123;this.textInput&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent</span><br></pre></td></tr></table></figure><p>但是，只要引用 <code>DOM</code> 元素或类组件，就可以在函数组件中使用该 <code>ref</code> 属性：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFunctionComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> textInput = React.createRef()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    textInput.current.focus()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;textInput&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;focus&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyFunctionComponent</span><br></pre></td></tr></table></figure><h2 id="Callback-Refs-（推荐使用）"><a href="#Callback-Refs-（推荐使用）" class="headerlink" title="Callback Refs （推荐使用）"></a>Callback Refs （推荐使用）</h2><blockquote><p><code>React</code> 还支持另一种设置名为 <code>callback refs</code> 的引用的方法，它可以在设置和取消设置引用时提供更细粒度的控制。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.inputRef.focus() <span class="comment">// 注意 这里没使用 current</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.myRef.state) <span class="comment">// 同理这里也不使用 current</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;el =&gt; <span class="keyword">this</span>.inputRef = el&#125; /&gt;</span><br><span class="line">        &lt;MyComponent ref=&#123;el =&gt; <span class="keyword">this</span>.myRef = el&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App</span></span><br></pre></td></tr></table></figure><h2 id="Ref-forwarding（转发-ref）"><a href="#Ref-forwarding（转发-ref）" class="headerlink" title="Ref forwarding（转发 ref）"></a>Ref forwarding（转发 ref）</h2><blockquote><p><code>Ref forwarding</code> 是一种自动将 <code>ref</code> 通过组件传递给其子节点的技术。对于应用程序中的大多数组件，这通常不是必需的。但是，它对某些类型的组件很有用，特别是在可重用的组件库中。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FancyButton = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  &lt;button ref=&#123;ref&#125; className=<span class="string">"FancyButton"</span>&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props) &#123;</span></span><br><span class="line"><span class="regexp">    super(props)</span></span><br><span class="line"><span class="regexp">    this.buttonRef = React.createRef()</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  componentDidMount() &#123;</span></span><br><span class="line"><span class="regexp">    const FancyButton = this.buttonRef.current /</span><span class="regexp">/ 访问到 button 的 dom</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return &lt;FancyButton ref=&#123;this.buttonRef&#125;&gt;click&lt;/</span>FancyButton&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote><p>第二个 <code>ref</code> 参数仅在使用 <code>React.forwardRef</code> 调用定义组件时才存在。常规函数或类组件不接收 <code>ref</code> 参数，并且在 <code>props</code> 中也不提供 <code>ref</code>。<br><code>Ref</code> 转发不仅限于 <code>DOM</code> 组件。您也可以将 <code>refs</code> 转发给类组件实例。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么时候使用-Refs&quot;&gt;&lt;a href=&quot;#什么时候使用-Refs&quot; class=&quot;headerlink&quot; title=&quot;什么时候使用 Refs&quot;&gt;&lt;/a&gt;什么时候使用 Refs&lt;/h2&gt;&lt;p&gt;下面是几个使用 &lt;code&gt;Refs&lt;/code&gt; 的示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理焦点状态(focus)、文本选择(text selection)、或者是媒体播放(media)&lt;/li&gt;
&lt;li&gt;强制触发动画&lt;/li&gt;
&lt;li&gt;与第三方的 DOM 库集成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在任何能够通过直接声明完成的事情中应当避免使用 &lt;code&gt;Refs&lt;/code&gt;。&lt;br&gt;例如，对于一个 &lt;code&gt;Dialog&lt;/code&gt; 组件，应当提供一个 &lt;code&gt;isOpen&lt;/code&gt; 的 &lt;code&gt;prop&lt;/code&gt; 来控制它，而不是暴露&lt;code&gt;open()&lt;/code&gt;和 &lt;code&gt;close()&lt;/code&gt;两个方法去操作。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Refs&lt;/code&gt; 是使用 &lt;code&gt;React.createRef()&lt;/code&gt; 创建的，并通过 &lt;code&gt;ref&lt;/code&gt; 属性附加到 &lt;code&gt;React&lt;/code&gt; 元素。在构造组件时，通常将 &lt;code&gt;Refs&lt;/code&gt; 分配给实例属性，以便可以在整个组件中引用它们。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react - PropTypes</title>
    <link href="https://gershonv.github.io/2018/11/26/react-proptypes/"/>
    <id>https://gershonv.github.io/2018/11/26/react-proptypes/</id>
    <published>2018-11-26T02:30:00.000Z</published>
    <updated>2019-01-03T14:17:53.528Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// static propTypes = &#123;&#125; 第二种写法</span></span><br><span class="line">  <span class="comment">// static defaultProps = &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default props</span></span><br><span class="line">MyComponent.defaultProps = &#123;</span><br><span class="line">  name: <span class="string">'Stranger'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyComponent.PropTypes = &#123;</span><br><span class="line">  <span class="comment">// 声明的prop可以是一个特殊的JS基础变量，默认情况下，下面都是可选的</span></span><br><span class="line">  optionalArray: PropTypes.array,</span><br><span class="line">  optionalBool: PropTypes.bool,</span><br><span class="line">  optionalFunc: PropTypes.func,</span><br><span class="line">  optionalNumber: PropTypes.number,</span><br><span class="line">  optionalObject: PropTypes.object,</span><br><span class="line">  optionalString: PropTypes.string,</span><br><span class="line">  optionalSymbol: PropTypes.symbol,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下面示例能够渲染任何元素: numbers, strings, elements ，array, fragment</span></span><br><span class="line">  optionalNode: PropTypes.node,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要是 React 元素</span></span><br><span class="line">  optionalElement: PropTypes.element,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以声明 prop 是某个类的示例</span></span><br><span class="line">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以声明 prop 在某个 enum 中的一个</span></span><br><span class="line">  optionalEnum: PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来验证prop对象中的每一个属性</span></span><br><span class="line">  optionalUnion: PropTypes.oneOfType([</span><br><span class="line">    PropTypes.string,</span><br><span class="line">    PropTypes.number,</span><br><span class="line">    PropTypes.instanceOf(Message)</span><br><span class="line">  ]),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证 prop 数组的每个子元素的类型</span></span><br><span class="line">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查 prop 对象的属性的类型</span></span><br><span class="line">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来检查 prop 对象的每个属性的类型</span></span><br><span class="line">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class="line">    color: PropTypes.string,</span><br><span class="line">    fontSize: PropTypes.number</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查 prop 是必须存在的（required）</span></span><br><span class="line">  requiredFunc: PropTypes.func.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用来检查任意的数值都必须存在</span></span><br><span class="line">  requiredAny: PropTypes.any.isRequired,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你可以通过自定义验证器的方法来进行验证。</span></span><br><span class="line">  <span class="comment">// 自定义验证器应当返回一个抛出错误的Error对象。</span></span><br><span class="line">  <span class="comment">// 不要使用`console.warn`或者throw抛出错误，因为无法再 oneOfType 中使用</span></span><br><span class="line">  customProp: <span class="function"><span class="keyword">function</span>(<span class="params">props, propName, componentName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你也可以为'arrayOf'和'objectOf'提供自定义验证器</span></span><br><span class="line">  <span class="comment">// 如果验证失败，应该返回一个Error对象</span></span><br><span class="line">  <span class="comment">// 数组或者对象的每一个key都会被调用这个验证器。</span></span><br><span class="line">  <span class="comment">// 此验证器的前面两个参数是数组或者是对象本身以及当前遍历的index(如数组下标或对象属性key)</span></span><br><span class="line">  customArrayProp: PropTypes.arrayOf(<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</span><br><span class="line">        <span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="React" scheme="https://gershonv.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://gershonv.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 浏览器输入 url 后 http 请求返回的完整过程</title>
    <link href="https://gershonv.github.io/2018/11/23/http-url-to-render/"/>
    <id>https://gershonv.github.io/2018/11/23/http-url-to-render/</id>
    <published>2018-11-23T08:08:53.000Z</published>
    <updated>2019-01-03T15:11:54.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/20/167306e21f25ced5?w=1234&amp;h=443&amp;f=png&amp;s=181984" alt=""></p><h2 id="检查缓存"><a href="#检查缓存" class="headerlink" title="检查缓存"></a>检查缓存</h2><blockquote><p>缓存就是把你之前访问的 web 资源，比如一些 js，css，图片什么的保存在你本机的内存或者磁盘当中。</p></blockquote><p>浏览器获取了这个 <code>url</code>，当然就去解析了，它先去缓存当中看看有没有，从 浏览器缓存-系统缓存-路由器缓存 当中查看，<br>如果有从缓存当中显示页面， 如果没有缓存则进行 <code>DNS</code> 解析</p><p>浏览器缓存相关链接：<a href="https://gershonv.github.io/2018/11/23/http-cache/">HTTP - 缓存机制</a></p><p>这里重点介绍 浏览器中 <a href="https://gershonv.github.io/2018/11/23/http-cache/">HTTP - 缓存机制</a>， 因为个人对系统缓存以及路由器缓存认识较少</p><p><img src="https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li>缓存是否到时: <code>Cache-Control: max-age=xxx</code></li><li>缓存是否过期：<code>Expires</code> （如果设置）</li><li>资源是否发生修改: <code>ETag</code><ul><li><code>If-None-Match</code> =&gt; 304 未修改</li></ul></li><li>文件的修改时间: <code>Last-Modified</code><ul><li><code>If-Modified-Since</code> =&gt; 304 未修改</li></ul></li></ul><a id="more"></a><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><blockquote><p>在发送 <code>http</code> 之前，需要进行 <code>DNS</code> 解析即域名解析。<br><code>DNS</code> 解析:域名到 <code>IP</code> 地址的转换过程。域名的解析工作由 <code>DNS</code> 服务器完成。解析后可以获取域名相应的 <code>IP</code> 地址</p></blockquote><p>根据 URL 找到对应的 IP 地址。这一步通常被称为 DNS 轮询，这里面是有缓存机制的。缓存的顺序依次为：浏览器缓存-&gt;操作系统缓存-&gt;路由器缓存-&gt;DNS 提供商缓存-&gt;DNS 提供商轮询。</p><h2 id="创建-TCP-链接"><a href="#创建-TCP-链接" class="headerlink" title="创建 TCP 链接"></a>创建 TCP 链接</h2><p><a href="https://gershonv.github.io/2018/11/21/http-TCP/">TCP 三次握手四次挥手</a></p><ul><li>第一次握手： <code>client</code> =&gt; <code>server</code><ul><li><code>SYN = 1</code> （SYN 代表发起一个新连接）； <code>Sequence Number</code> = 1 （请求的标记）</li></ul></li><li>第二次握手：<code>server</code> =&gt; <code>client</code><ul><li><code>SYN = 1</code> （SYN 代表发起一个新连接）；<code>Sequence Number</code> = Y （请求的标记）</li><li><code>acknowledgment number</code> = 1 （确认序号，只有 <code>ACK</code> 标志位为 1 时，确认序号字段才有效）</li><li><code>ACK</code> = 1 确认序号字段有效</li></ul></li><li>第三次握手：<code>client</code> =&gt; <code>server</code><ul><li><code>acknowledgment number</code> = Y + 1 =&gt; 确认序号为 Y + 1</li><li><code>ACK</code> = 1 确认序号字段有效</li></ul></li></ul><p>这样 TCP 连接就建立了。<br>在此之后，浏览器开始向服务器发送 <code>http</code> 请求，请求数据包。请求信息包含一个头部和一个请求体。</p><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><p>相关链接：<a href="https://gershonv.github.io/2018/11/20/http-导学/">HTTP - 导学</a></p><h2 id="响应请求"><a href="#响应请求" class="headerlink" title="响应请求"></a>响应请求</h2><p>浏览器对于每一种请求类型的处理方式是不一样的，像 <code>text/html</code>、<code>application/JavaScript</code>、<code>text/plain</code> 等等这些是可以直接呈现的，而对于不能呈现的类型，浏览器会将该资源下载到本地。</p><p>那么浏览器在确认这个 response 的状态不是 301（跳转）或者 401（未授权）或其它需要做特殊处理的状态，之后开始进入呈现过程。</p><p><code>Renderer</code> 进程开始解析 <code>css rule tree</code> 和 <code>dom tree</code>，这两个过程是并行的，所以一般我会把 link 标签放在页面顶部。</p><p>解析绘制过程中，当浏览器遇到 <code>link</code> 标签或者 <code>script`</code>、img ` 等标签，浏览器会去下载这些内容，遇到时候缓存的使用缓存，不适用缓存的重新下载资源。</p><p><code>css rule tree</code> 和 <code>dom tree</code> 生成完了之后，开始合成 <code>render tree</code>，这个时候浏览器会进行 <code>layout</code>，开始计算每一个节点的位置，然后进行绘制。</p><p>绘制结束后，关闭 <code>TCP</code> 连接，过程有四次挥手。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;示意图&quot;&gt;&lt;a href=&quot;#示意图&quot; class=&quot;headerlink&quot; title=&quot;示意图&quot;&gt;&lt;/a&gt;示意图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/20/167306e21f25ced5?w=1234&amp;amp;h=443&amp;amp;f=png&amp;amp;s=181984&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;检查缓存&quot;&gt;&lt;a href=&quot;#检查缓存&quot; class=&quot;headerlink&quot; title=&quot;检查缓存&quot;&gt;&lt;/a&gt;检查缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;缓存就是把你之前访问的 web 资源，比如一些 js，css，图片什么的保存在你本机的内存或者磁盘当中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;浏览器获取了这个 &lt;code&gt;url&lt;/code&gt;，当然就去解析了，它先去缓存当中看看有没有，从 浏览器缓存-系统缓存-路由器缓存 当中查看，&lt;br&gt;如果有从缓存当中显示页面， 如果没有缓存则进行 &lt;code&gt;DNS&lt;/code&gt; 解析&lt;/p&gt;
&lt;p&gt;浏览器缓存相关链接：&lt;a href=&quot;https://gershonv.github.io/2018/11/23/http-cache/&quot;&gt;HTTP - 缓存机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里重点介绍 浏览器中 &lt;a href=&quot;https://gershonv.github.io/2018/11/23/http-cache/&quot;&gt;HTTP - 缓存机制&lt;/a&gt;， 因为个人对系统缓存以及路由器缓存认识较少&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存是否到时: &lt;code&gt;Cache-Control: max-age=xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;缓存是否过期：&lt;code&gt;Expires&lt;/code&gt; （如果设置）&lt;/li&gt;
&lt;li&gt;资源是否发生修改: &lt;code&gt;ETag&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;If-None-Match&lt;/code&gt; =&amp;gt; 304 未修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文件的修改时间: &lt;code&gt;Last-Modified&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;If-Modified-Since&lt;/code&gt; =&amp;gt; 304 未修改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - keep-alive</title>
    <link href="https://gershonv.github.io/2018/11/23/http-%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    <id>https://gershonv.github.io/2018/11/23/http-长连接/</id>
    <published>2018-11-23T06:16:16.000Z</published>
    <updated>2019-01-03T15:11:26.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-协议是无状态的"><a href="#HTTP-协议是无状态的" class="headerlink" title="HTTP 协议是无状态的"></a>HTTP 协议是无状态的</h2><p><code>HTTP</code> 协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<code>HTTP</code> 是一个无状态的面向连接的协议，无状态不代表 <code>HTTP</code> 不能保持 <code>TCP</code> 连接，更不能代表 <code>HTTP</code> 使用的是 <code>UDP</code> 协议（无连接）。</p><h2 id="什么是长连接、短连接？"><a href="#什么是长连接、短连接？" class="headerlink" title="什么是长连接、短连接？"></a>什么是长连接、短连接？</h2><p>在 <code>HTTP/1.0</code> 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 <code>HTTP</code> 操作，就要经过<a href="https://gershonv.github.io/2018/11/21/http-TCP/">三次握手</a>建立一次连接，但任务结束就中断连接。</p><p>客户端浏览器访问的某个 <code>HTML</code> 或其他类型的 <code>Web</code> 页中包含有其他的 <code>Web</code> 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。但从  <code>HTTP/1.1</code> 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Connection'</span>: <span class="string">'keep-alive'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><ul><li><code>test.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test11.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test12.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test13.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test14.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test15.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test16.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test17.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test111.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test112.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test113.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test114.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test115.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/test116.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>server.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    <span class="keyword">const</span> img = fs.readFileSync(<span class="string">'test.jpg'</span>)</span><br><span class="line">    <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(html)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'image/jpg'</span>,</span><br><span class="line">        Connection: <span class="string">'keep-alive'</span> <span class="comment">// or close HTTP/1.1 起 默认 keep-alive</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(img)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-协议是无状态的&quot;&gt;&lt;a href=&quot;#HTTP-协议是无状态的&quot; class=&quot;headerlink&quot; title=&quot;HTTP 协议是无状态的&quot;&gt;&lt;/a&gt;HTTP 协议是无状态的&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 协议是无状态的，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。也就是说，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。&lt;code&gt;HTTP&lt;/code&gt; 是一个无状态的面向连接的协议，无状态不代表 &lt;code&gt;HTTP&lt;/code&gt; 不能保持 &lt;code&gt;TCP&lt;/code&gt; 连接，更不能代表 &lt;code&gt;HTTP&lt;/code&gt; 使用的是 &lt;code&gt;UDP&lt;/code&gt; 协议（无连接）。&lt;/p&gt;
&lt;h2 id=&quot;什么是长连接、短连接？&quot;&gt;&lt;a href=&quot;#什么是长连接、短连接？&quot; class=&quot;headerlink&quot; title=&quot;什么是长连接、短连接？&quot;&gt;&lt;/a&gt;什么是长连接、短连接？&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;HTTP/1.0&lt;/code&gt; 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 &lt;code&gt;HTTP&lt;/code&gt; 操作，就要经过&lt;a href=&quot;https://gershonv.github.io/2018/11/21/http-TCP/&quot;&gt;三次握手&lt;/a&gt;建立一次连接，但任务结束就中断连接。&lt;/p&gt;
&lt;p&gt;客户端浏览器访问的某个 &lt;code&gt;HTML&lt;/code&gt; 或其他类型的 &lt;code&gt;Web&lt;/code&gt; 页中包含有其他的 &lt;code&gt;Web&lt;/code&gt; 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。但从  &lt;code&gt;HTTP/1.1&lt;/code&gt; 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;Connection&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;keep-alive&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 缓存机制</title>
    <link href="https://gershonv.github.io/2018/11/23/http-cache/"/>
    <id>https://gershonv.github.io/2018/11/23/http-cache/</id>
    <published>2018-11-23T01:23:23.000Z</published>
    <updated>2019-01-03T15:12:14.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存实现的步骤"><a href="#缓存实现的步骤" class="headerlink" title="缓存实现的步骤"></a>缓存实现的步骤</h2><ul><li>首先是当用户请求资源时，会判断是否有缓存，如果没有，则会向原服务器请求资源。</li><li>如果有缓存，则会进入强缓存的范畴，判断缓存是否新鲜<ul><li>如果缓存新鲜，则会直接返回缓存副本给客户端。</li><li>如果缓存不新鲜了，则表示强缓存失败，将会进入到<strong>协商缓存</strong>。</li></ul></li><li>协商缓存将判断是否存在 <code>Etag</code> 和 <code>Last-Modified</code> 首部<ul><li>如果未发生变化，则表示命中了协商缓存，会重定向到缓存副本，将资源返回给客户端</li><li>否则的话表示协商缓存未命中，服务器会返回新的资源。</li></ul></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/11/4/166de9f3ae4b1f20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><blockquote><p>服务端告知客户端缓存时间后，由客户端判断并决定是否使用缓存。</p></blockquote><p>强缓存是通过 <code>Expires</code> 首部或 <code>Cache-Control: max-age</code> 来实现的。</p><ul><li><code>Expires</code>: 响应头，代表该资源的过期时间。</li><li><code>Cache-Control</code>: 请求/响应头，缓存控制字段，精确控制缓存策略。</li></ul><a id="more"></a><p><code>server.js</code> - demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Conche-Control'</span>: <span class="string">'max-age=2000, public'</span> <span class="comment">// 缓存时间 2000s；public: 资源允许被中间服务器缓存</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h3 id="Expires-HTTP-1-0"><a href="#Expires-HTTP-1-0" class="headerlink" title="Expires(HTTP/1.0)"></a>Expires(HTTP/1.0)</h3><p><code>Expires</code> 和 <code>Cache-Control: max-age</code> 都是用来标识资源的过期时间的首部。</p><p>由于 <code>expires</code> 是一个绝对时间，如果人为的更改时间，会对缓存的有效期造成影响，使缓存有效期的设置失去意义。因此在 <code>http1.1</code> 中我们有了 <code>expires</code> 的完全替代首部 <code>cache-control：max-age</code></p><h3 id="Cache-Control-HTTP-1-1"><a href="#Cache-Control-HTTP-1-1" class="headerlink" title="Cache-Control(HTTP/1.1)"></a>Cache-Control(HTTP/1.1)</h3><p>除了可以设置 <code>max-age</code> 相对过期时间以外，还可以设置成如下几种值：</p><ul><li><p><code>public</code>，资源允许被中间服务器缓存。</p><blockquote><p>浏览器请求服务器时，如果缓存时间没到，中间服务器直接返回给浏览器内容，而不必请求源服务器。</p></blockquote></li><li><p><code>private</code>，资源不允许被中间代理服务器缓存</p><blockquote><p>浏览器请求服务器时，中间服务器都要把浏览器的请求透传给服务器。</p></blockquote></li><li><p><code>no-cache</code>，浏览器不做缓存检查。</p><blockquote><p>每次访问资源，浏览器都要向服务器询问，如果文件没变化，服务器只告诉浏览器继续使用缓存（304）。</p></blockquote></li><li><p><code>no-store</code>，浏览器和中间代理服务器都不能缓存资源。</p><blockquote><p>每次访问资源，浏览器都必须请求服务器，并且，服务器不去检查文件是否变化，而是直接返回完整的资源。</p></blockquote></li><li><code>must-revalidate</code>，可以缓存，但是使用之前必须先向源服务器确认。</li><li><code>proxy-revalidate</code>，要求缓存服务器针对缓存资源向源服务器进行确认。</li><li><code>s-maxage</code>：缓存服务器对资源缓存的最大时间。</li></ul><p><code>Cache-Control</code> 对缓存的控制粒度更细，包括缓存代理服务器的缓存控制。</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><blockquote><p>由服务端决定并告知客户端是否使用缓存。</p></blockquote><p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。<br>协商缓存是通过请求头 <code>Last-Modified</code> 或 <code>Etag</code> 来实现的。</p><ul><li><code>Last-Modified</code> 标识的是文档最后修改时间</li><li><code>Etag</code> 则是以文档内容来进行编码的。</li></ul><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><blockquote><p>响应头，资源最近修改时间，由服务器告诉浏览器。</p></blockquote><p><code>Last-Modified</code> （上次修改时间）主要配合 <code>If-Modified-Since</code> 或者 <code>If-Unmodified-Since</code> 使用， 对比上次修改时间以验证资源是否需要更新</p><p>If-Modified-Since: 请求头</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/4/166de151763c87aa?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li>首次请求资源时，服务器在返回资源的同时，会在 <code>Response Headers</code> 中写入 <code>Last-Modified</code> 首部，表示该资源在服务器上的最后修改时间。</li><li>当再次请求该资源时，会在 <code>Request Headers</code> 中写入 <code>If-Modified-Since</code> 首部，此时的 <code>If-Modified-Since</code> 的值是首次请求资源时所返回的 <code>Last-Modified</code> 的值。</li><li>服务器接收到请求后，会根据 <code>If-Modified-Since</code> 的值判断资源在该日期之后是否发生过变化。</li><li>如果没有，则会返回 <code>304 Not Modified</code>;如果变化了，则会返回变化过后的资源，同时更新 <code>Last-Modified</code> 的值。</li></ul><ol><li><p>资源未更新 network 面板截图<br><img src="https://user-gold-cdn.xitu.io/2018/11/23/1673e75620b00e06?w=848&amp;h=520&amp;f=png&amp;s=224745" alt=""></p></li><li><p>资源发生更新 network 面板截图<br><img src="https://user-gold-cdn.xitu.io/2018/11/23/1673e7991fe685a1?w=935&amp;h=484&amp;f=png&amp;s=245226" alt=""><br>可以看到 <code>Last-Modified</code> 和 <code>If-Modified-Since</code> 标识的时间不一样</p></li></ol><ul><li><code>server.js</code> - demo</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Conche-Control'</span>: <span class="string">'max-age=2000, public'</span>, <span class="comment">// 缓存时间 2000s；public: 资源允许被中间服务器缓存</span></span><br><span class="line">      <span class="string">'Last-Modified'</span>: <span class="string">'123'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><blockquote><p>响应头，资源标识，由服务器告诉浏览器。</p></blockquote><p><code>Etag</code> 和 <code>If-None-Match</code> 配合使用， （文件内容对比）对比资源的签名来决定是否使用缓存。</p><ul><li><code>server.js</code> - demo</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> etag = request.headers[<span class="string">'if-none-match'</span>]</span><br><span class="line">    <span class="keyword">if</span> (etag === <span class="string">'777'</span>) &#123;</span><br><span class="line">      response.writeHead(<span class="number">304</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'max-age=120, no-cache'</span>, <span class="comment">// 缓存时间 120s；no-cache: 浏览器不做缓存检查</span></span><br><span class="line">        <span class="string">'Last-Modified'</span>: <span class="string">'123'</span>,</span><br><span class="line">        Etag: <span class="string">'777'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// etag change</span></span><br><span class="line">      response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">        <span class="string">'Conche-Control'</span>: <span class="string">'max-age=120, no-cache'</span>, <span class="comment">// 缓存时间 120s；no-cache: 浏览器不做缓存检查</span></span><br><span class="line">        <span class="string">'Last-Modified'</span>: <span class="string">'123'</span>,</span><br><span class="line">        Etag: <span class="string">'777'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      response.end(<span class="string">"console.log('script loaded')"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3301</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'http://127.0.0.1:3301'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结与缓存方案"><a href="#总结与缓存方案" class="headerlink" title="总结与缓存方案"></a>总结与缓存方案</h2><p><img src="https://user-gold-cdn.xitu.io/2018/8/13/16531214dfa218be?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ol><li>服务器和浏览器约定资源过期时间 <code>Cache-Control: expires=xxx</code></li><li>服务器告诉浏览器资源上次修改时间 <code>Last-Modified</code></li><li>增加相对时间的控制 <code>Cache-Control: max-age=xxx</code></li><li>增加文件内容对比，引入<code>Etag</code></li></ol><p>缓存优先级</p><blockquote><p><code>Pragma</code> &gt; <code>Cache-Control</code> &gt; <code>Expires</code> &gt; <code>ETag</code> &gt; <code>Last-Modified</code></p></blockquote><p>参考与相关链接：</p><ul><li><a href="https://juejin.im/post/5bdeabbbe51d4505466cd741#heading-25" target="_blank" rel="noopener">浅谈 HTTP 缓存</a></li><li><a href="https://juejin.im/post/5b3c87386fb9a04f9a5cb037#heading-0" target="_blank" rel="noopener">面试精选之 http 缓存</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缓存实现的步骤&quot;&gt;&lt;a href=&quot;#缓存实现的步骤&quot; class=&quot;headerlink&quot; title=&quot;缓存实现的步骤&quot;&gt;&lt;/a&gt;缓存实现的步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先是当用户请求资源时，会判断是否有缓存，如果没有，则会向原服务器请求资源。&lt;/li&gt;
&lt;li&gt;如果有缓存，则会进入强缓存的范畴，判断缓存是否新鲜&lt;ul&gt;
&lt;li&gt;如果缓存新鲜，则会直接返回缓存副本给客户端。&lt;/li&gt;
&lt;li&gt;如果缓存不新鲜了，则表示强缓存失败，将会进入到&lt;strong&gt;协商缓存&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协商缓存将判断是否存在 &lt;code&gt;Etag&lt;/code&gt; 和 &lt;code&gt;Last-Modified&lt;/code&gt; 首部&lt;ul&gt;
&lt;li&gt;如果未发生变化，则表示命中了协商缓存，会重定向到缓存副本，将资源返回给客户端&lt;/li&gt;
&lt;li&gt;否则的话表示协商缓存未命中，服务器会返回新的资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/4/166de9f3ae4b1f20?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;强缓存&quot;&gt;&lt;a href=&quot;#强缓存&quot; class=&quot;headerlink&quot; title=&quot;强缓存&quot;&gt;&lt;/a&gt;强缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;服务端告知客户端缓存时间后，由客户端判断并决定是否使用缓存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强缓存是通过 &lt;code&gt;Expires&lt;/code&gt; 首部或 &lt;code&gt;Cache-Control: max-age&lt;/code&gt; 来实现的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;: 响应头，代表该资源的过期时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache-Control&lt;/code&gt;: 请求/响应头，缓存控制字段，精确控制缓存策略。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 跨域</title>
    <link href="https://gershonv.github.io/2018/11/22/http-%E8%B7%A8%E5%9F%9F/"/>
    <id>https://gershonv.github.io/2018/11/22/http-跨域/</id>
    <published>2018-11-22T06:10:57.000Z</published>
    <updated>2019-01-03T15:11:41.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><blockquote><p>跨域，是指浏览器不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对 JavaScript 实施的安全限制。</p></blockquote><p>我们可以简单的重现浏览器的跨域问题：</p><ul><li><code>server.js</code> 模拟客户端：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'demo.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(html)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3300</span>) <span class="comment">// http://127.0.0.1:3300</span></span><br></pre></td></tr></table></figure><ul><li><code>demo.html</code> 展示的页面：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>demo.html<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://127.0.0.1:6060'</span>)</span></span><br><span class="line"><span class="undefined">    xhr.send()</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>server2.js</code> 模拟服务端：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line">    response.end(<span class="string">'server2 response'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">6060</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 6060'</span>)</span><br></pre></td></tr></table></figure><p>打开 <code>http://127.0.0.1:3300</code> 即可看到</p><p>Access to XMLHttpRequest at ‘<code>http://127.0.0.1:6060/</code>‘ from origin ‘<code>http://127.0.0.1:3300</code>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p><p>后续将讲到如何去解决这个问题。</p><a id="more"></a><h2 id="常见的跨域场景"><a href="#常见的跨域场景" class="headerlink" title="常见的跨域场景"></a>常见的跨域场景</h2><blockquote><p>所谓的同源是指，域名、协议、端口均为相同。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">URL                                      说明                    是否允许通信</span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同文件或路径           允许</span><br><span class="line">http://www.domain.com/lab/c.js</span><br><span class="line"></span><br><span class="line">http://www.domain.com:8000/a.js</span><br><span class="line">http://www.domain.com/b.js         同一域名，不同端口                不允许</span><br><span class="line"></span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">https://www.domain.com/b.js        同一域名，不同协议                不允许</span><br><span class="line"></span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://192.168.4.12/b.js           域名和域名对应相同ip              不允许</span><br><span class="line"></span><br><span class="line">http://www.domain.com/a.js</span><br><span class="line">http://x.domain.com/b.js           主域相同，子域不同                不允许</span><br><span class="line">http://domain.com/c.js</span><br><span class="line"></span><br><span class="line">http://www.domain1.com/a.js</span><br><span class="line">http://www.domain2.com/b.js        不同域名                         不允许</span><br></pre></td></tr></table></figure><p>跨域的解决方法如下</p><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><blockquote><p><code>HTML</code> 标签里，一些标签比如 <code>script、img</code> 这样的获取资源的标签是没有跨域限制的</p></blockquote><p><code>jsonp</code> 原生的实现方式（以前面的代码为例）</p><ul><li><code>demo.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>demo.html<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 动态创建 script，并引入地址；2. 插入html中；3.通过callback 回调得到数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span></span><br><span class="line"><span class="javascript">    script.src = <span class="string">'http://127.0.0.1:6060/login?username=guodada&amp;callback=onBack'</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(script)</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">onBack</span>(<span class="params">res</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>server2.js</code> 服务端：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line">    <span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">'guodada'</span> &#125; <span class="comment">// 需要传递的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; callback &#125; = url.parse(request.url, <span class="literal">true</span>).query <span class="comment">// 处理 get 请求, 拿到callback</span></span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> jsonpCallback = callback + <span class="string">`(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span> <span class="comment">// 相当于 onBack(&#123;"name":"guodada"&#125;)</span></span><br><span class="line">    response.end(jsonpCallback)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">6060</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 6060'</span>)</span><br></pre></td></tr></table></figure><p>虽然这种方式非常好用，但是一个最大的缺陷是，只能够实现 <code>get</code> 请求</p><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>因为是目前主流的跨域解决方案。<code>CORS</code> 是一个 W3C 标准，全称是”跨域资源共享”（<code>Cross-origin resource sharing</code>）。它允许浏览器向跨源服务器，发出 <code>XMLHttpRequest</code> 请求，从而克服了 <code>AJAX</code> 只能同源使用的限制。</p><p><code>CORS</code> 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 <code>IE10</code>。IE8+：IE8/9 需要使用 <code>XDomainRequest</code> 对象来支持 <code>CORS</code>。</p><p>整个 <code>CORS</code> 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，<code>CORS</code> 通信与同源的 <code>AJAX</code> 通信没有差别，代码完全一样。浏览器一旦发现 <code>AJAX</code> 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现 <code>CORS</code> 通信的关键是服务器。只要服务器实现了 <code>CORS</code> 接口，就可以跨源通信。</p><p>浏览器将 <code>CORS</code> 请求分成两类：简单请求（<code>simple request</code>）和非简单请求（<code>not-so-simple request</code>）。<br>只要同时满足以下两大条件，就属于简单请求。</p><ol><li>请求方式为 <code>HEAD</code>、<code>POST</code> 或者 <code>GET</code></li><li>HTTP 的头信息不超出以下几种字段：<ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Last-Event-ID</code></li><li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul></li></ol><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><blockquote><p>对于简单请求，浏览器直接发出 <code>CORS</code> 请求。具体来说，就是在头信息之中，增加一个 <code>Origin</code> 字段。 下面是一个例子，浏览器发现这次跨源 <code>AJAX</code> 请求是简单请求，就自动在头信息之中，添加一个 <code>Origin</code> 字段。</p></blockquote><p><code>server2.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://127.0.0.1:3300'</span>, <span class="comment">// 只有 http://127.0.0.1:3300 才能访问</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="literal">true</span>, <span class="comment">// 允许携带 cookie</span></span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">'hello cors'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">6060</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 6060'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>demo.html</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>demo.html<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="javascript">    xhr.withCredentials = <span class="literal">true</span> <span class="comment">// server: 'Access-Control-Allow-Credentials': true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    xhr.open(<span class="string">'GET'</span>, <span class="string">'http://127.0.0.1:6060'</span>)</span></span><br><span class="line"><span class="javascript">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>)</span></span><br><span class="line"><span class="undefined">    xhr.send()</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Origin</code> : 该字段是必须的。它的值要么是请求时 <code>Origin</code> 字段的值，要么是一个<code>*</code>，表示接受任意域名的请求</li><li><code>Access-Control-Allow-Credentials</code>: 表示是否允许发送 <code>Cookie</code></li><li><code>Access-Control-Expose-Headers</code>: CORS 请求时，<code>XMLHttpRequest</code> 对象的 <code>getResponseHeader()</code>方法只能拿到 6 个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在 <code>Access-Control-Expose-Headers</code> 里面指定。</li></ul><h4 id="withCredentials-属性"><a href="#withCredentials-属性" class="headerlink" title="withCredentials 属性"></a>withCredentials 属性</h4><p>上面说到，CORS 请求默认不发送 <code>Cookie</code> 和 <code>HTTP</code> 认证信息。如果要把 <code>Cookie</code> 发到服务器，一方面要服务器同意，指定 <code>Access-Control-Allow-Credentials</code> 字段。</p><p>否则，即使服务器同意发送 <code>Cookie</code>，浏览器也不会发送。或者，服务器要求设置 <code>Cookie</code>，浏览器也不会处理。 但是，如果省略 <code>withCredentials</code> 设置，有的浏览器还是会一起发送 <code>Cookie</code>。这时，可以显式关闭 <code>withCredentials</code>。</p><p>需要注意的是，如果要发送 <code>Cookie</code>，<code>Access-Control-Allow-Origin</code> 就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，<code>Cookie</code> 依然遵循同源政策，只有用服务器域名设置的 <code>Cookie</code> 才会上传，其他域名的 <code>Cookie</code> 并不会上传，且（跨源）原网页代码中的 <code>document.cookie</code> 也无法读取服务器域名下的 <code>Cookie</code>。</p><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><blockquote><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 <code>PUT</code> 或 <code>DELETE</code>，或者 <code>Content-Type</code> 字段的类型是 <code>application/json</code>。</p></blockquote><p>非简单请求的 <code>CORS</code> 请求，会在正式通信之前，增加一次 <code>HTTP</code> 查询请求，称为”预检”请求（<code>preflight</code>）。</p><p>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 <code>HTTP</code> 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 <code>XMLHttpRequest</code> 请求，否则就报错。</p><ul><li><code>demo.html</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分代码</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span> <span class="comment">// 允许携带 cookie</span></span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://127.0.0.1:6060'</span>) <span class="comment">// 使用 put 请求，server：'Access-Control-Request-Method': 'PUT'</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Test-Cors'</span>, <span class="string">'123'</span>) <span class="comment">// 设置预检头</span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure><ul><li><code>server2.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://127.0.0.1:3300'</span>, <span class="comment">// 只有 http://127.0.0.1:3300 才能访问</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Credentials'</span>: <span class="literal">true</span>, <span class="comment">// 允许携带 cookie</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span>, <span class="comment">// 预检</span></span><br><span class="line">      <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'POST, PUT, DELETE'</span>, <span class="comment">// 支持</span></span><br><span class="line">      <span class="string">'Access-Control-Max-Age'</span>: <span class="string">'1000'</span> <span class="comment">// 指定本次预检请求的有效期，单位为秒</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">'hello cors'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">6060</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 6060'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Methods</code>: 返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次”预检”请求。</li><li><code>Access-Control-Allow-Headers</code>: 如果浏览器请求包括 <code>Access-Control-Request-Headers</code> 字段，则 <code>Access-Control-Allow-Headers</code> 字段是必需的。</li><li><code>Access-Control-Max-Age</code>: 用来指定本次预检请求的有效期，单位为秒。</li></ul><p><code>CORS</code> 与 <code>JSONP</code> 的使用目的相同，但是比 <code>JSONP</code> 更强大。<code>JSONP</code> 只支持 <code>GET</code> 请求，<code>CORS</code> 支持所有类型的 <code>HTTP</code> 请求。<code>JSONP</code> 的优势在于支持老式浏览器，以及可以向不支持 <code>CORS</code> 的网站请求数据。</p><h2 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h2><p>…. 略</p><h2 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h2><p>…. 略</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5a2f92c65188253e2470f16d#heading-5" target="_blank" rel="noopener">正确面对跨域，别慌</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;跨域，是指浏览器不能执行其他网站的脚本。它是由&lt;strong&gt;浏览器的同源策略&lt;/strong&gt;造成的，是浏览器对 JavaScript 实施的安全限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以简单的重现浏览器的跨域问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server.js&lt;/code&gt; 模拟客户端：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;request come&#39;&lt;/span&gt;, request.url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; html = fs.readFileSync(&lt;span class=&quot;string&quot;&gt;&#39;demo.html&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end(html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .listen(&lt;span class=&quot;number&quot;&gt;3300&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// http://127.0.0.1:3300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;demo.html&lt;/code&gt; 展示的页面：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;demo.html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; xhr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;    xhr.open(&lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;http://127.0.0.1:6060&#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;    xhr.send()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server2.js&lt;/code&gt; 模拟服务端：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;request come&#39;&lt;/span&gt;, request.url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response.end(&lt;span class=&quot;string&quot;&gt;&#39;server2 response&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .listen(&lt;span class=&quot;number&quot;&gt;6060&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;server listening on 6060&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开 &lt;code&gt;http://127.0.0.1:3300&lt;/code&gt; 即可看到&lt;/p&gt;
&lt;p&gt;Access to XMLHttpRequest at ‘&lt;code&gt;http://127.0.0.1:6060/&lt;/code&gt;‘ from origin ‘&lt;code&gt;http://127.0.0.1:3300&lt;/code&gt;‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.&lt;/p&gt;
&lt;p&gt;后续将讲到如何去解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
      <category term="跨域" scheme="https://gershonv.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - TCP 三次握手四次挥手</title>
    <link href="https://gershonv.github.io/2018/11/21/http-TCP/"/>
    <id>https://gershonv.github.io/2018/11/21/http-TCP/</id>
    <published>2018-11-21T01:47:17.000Z</published>
    <updated>2019-01-03T15:12:01.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><blockquote><p><code>HTTP</code> 请求与 <code>TCP</code> 链接之间的关系，在客户端向服务端请求和返回的过程中，是需要去创建一个 <code>TCP connection</code>，因为 <code>HTTP</code> 是不存在链接这样一个概念的，它只有请求和响应这样一个概念，请求和响应都是一个数据包，中间要通过一个传输通道，这个传输通道就是在 <code>TCP</code> 里面创建了一个从客户端发起和服务端接收的一个链接，<code>TCP</code> 链接在创建的时候是有一个三次握手(三次网络传输)这样一个消耗在的。</p></blockquote><p>下面是 <code>TCP</code> 报文格式图：</p><p><img src="https://user-gold-cdn.xitu.io/2018/11/21/1673405dad1eced0?w=500&amp;h=380&amp;f=jpeg&amp;s=32339" alt=""><br>↓↓↓↓<br><img src="https://user-gold-cdn.xitu.io/2018/11/21/1673405e30495223?w=1046&amp;h=402&amp;f=png&amp;s=27889" alt=""></p><p>有几个字段需要重点介绍下：</p><ol><li>Seq 序号: <code>sequeence number</code>，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：<code>acknowledgment number</code>，只有 ACK 标志位为 1 时，确认序号字段才有效，<code>Ack=Seq+1</code>。</li><li>标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：<ul><li><code>URG</code>：紧急指针（urgent pointer）有效。</li><li><code>ACK</code>：确认序号有效。</li><li><code>PSH</code>：接收方应该尽快将这个报文交给应用层。</li><li><code>RST</code>：重置连接。</li><li><code>SYN</code>：发起一个新连接。</li><li><code>FIN</code>：释放一个连接。</li></ul></li></ol><a id="more"></a><h3 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h3><blockquote><p>客户端发送一个 <code>TCP</code> 的 <code>SYN</code> 标志位置 1 的包指明客户打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(<code>Sequence Number</code>)字段里。</p></blockquote><ul><li><strong>简单记忆： 建立连接，等待服务器确认</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/6b568a608edadc13bc9be7721b00e48a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>Sequeence Number</code> = X =&gt; 标识字节流字段为 X</li><li><code>SYN</code> = 1 =&gt; 发起一个新连接，序号为 1</li></ul><h3 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h3><blockquote><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为 1 同时，将确认序号(Acknowledgement Number)设置为客户的 I S N 加 1 以.即 X+1。</p></blockquote><ul><li><strong>简单记忆： 服务器收到请求后确认联机</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/02f7809aa0b7b0b5db477e180f408535?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>Sequeence Number</code> = Y =&gt; 标识字节流字段为 Y</li><li><code>acknowledgment number</code> = X + 1 =&gt; 确认序号为 X + 1</li><li><code>SYN</code> = 1 =&gt; 发起一个新连接，序号为 1</li><li><code>ACK</code> = 1 =&gt; 确认序号有效</li></ul><h3 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h3><blockquote><p>客户端再次发送确认包(ACK)SYN 标志位为 0,ACK 标志位为 1.并且把服务器发来 ACK 的序号字段+1,放在确定字段中发送给对方.并且在数据段放写 ISN 的+1</p></blockquote><ul><li><strong>简单记忆：检查 ACK 是否正确, 若正确则建立连接。</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/c052d0061d70d359e1ac0b5fc48d844a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><ul><li><code>acknowledgment number</code> = Y + 1 =&gt; 确认序号为 Y + 1</li><li><code>ACK</code> = 1 =&gt; 确认序号有效</li></ul><h2 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h2><p><code>TCP</code>的连接的拆除需要发送四个包，因此称为四次挥手(<code>four-way handshake</code>)。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 close()操作即可产生挥手操作。</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/9/8c7874fafe233c9278509e40e906055c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h3 id="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>这是因为服务端在 <code>LISTEN</code> 状态下，收到建立连接请求的 <code>SYN</code> 报文后，把 <code>ACK</code> 和 <code>SYN</code> 放在一个报文里发送给客户端。<br>而关闭连接时，当收到对方的 <code>FIN</code> 报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即 <code>close</code>，也可以发送一些数据给对方后，再发送 <code>FIN</code> 报文给对方来表示同意现在关闭连接，因此，己方 <code>ACK</code> 和 <code>FIN</code> 一般都会分开发送。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;TCP-的三次握手&quot;&gt;&lt;a href=&quot;#TCP-的三次握手&quot; class=&quot;headerlink&quot; title=&quot;TCP 的三次握手&quot;&gt;&lt;/a&gt;TCP 的三次握手&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 请求与 &lt;code&gt;TCP&lt;/code&gt; 链接之间的关系，在客户端向服务端请求和返回的过程中，是需要去创建一个 &lt;code&gt;TCP connection&lt;/code&gt;，因为 &lt;code&gt;HTTP&lt;/code&gt; 是不存在链接这样一个概念的，它只有请求和响应这样一个概念，请求和响应都是一个数据包，中间要通过一个传输通道，这个传输通道就是在 &lt;code&gt;TCP&lt;/code&gt; 里面创建了一个从客户端发起和服务端接收的一个链接，&lt;code&gt;TCP&lt;/code&gt; 链接在创建的时候是有一个三次握手(三次网络传输)这样一个消耗在的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是 &lt;code&gt;TCP&lt;/code&gt; 报文格式图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/21/1673405dad1eced0?w=500&amp;amp;h=380&amp;amp;f=jpeg&amp;amp;s=32339&quot; alt=&quot;&quot;&gt;&lt;br&gt;↓↓↓↓&lt;br&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/21/1673405e30495223?w=1046&amp;amp;h=402&amp;amp;f=png&amp;amp;s=27889&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有几个字段需要重点介绍下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seq 序号: &lt;code&gt;sequeence number&lt;/code&gt;，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记。&lt;/li&gt;
&lt;li&gt;确认序号：&lt;code&gt;acknowledgment number&lt;/code&gt;，只有 ACK 标志位为 1 时，确认序号字段才有效，&lt;code&gt;Ack=Seq+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;标志位：共 6 个，即 URG、ACK、PSH、RST、SYN、FIN 等，具体含义如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;URG&lt;/code&gt;：紧急指针（urgent pointer）有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ACK&lt;/code&gt;：确认序号有效。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PSH&lt;/code&gt;：接收方应该尽快将这个报文交给应用层。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RST&lt;/code&gt;：重置连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYN&lt;/code&gt;：发起一个新连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN&lt;/code&gt;：释放一个连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP - 导学</title>
    <link href="https://gershonv.github.io/2018/11/20/http-%E5%AF%BC%E5%AD%A6/"/>
    <id>https://gershonv.github.io/2018/11/20/http-导学/</id>
    <published>2018-11-20T11:31:23.000Z</published>
    <updated>2019-01-03T15:11:49.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典五层网络模型"><a href="#经典五层网络模型" class="headerlink" title="经典五层网络模型"></a>经典五层网络模型</h2><p><img src="https://user-gold-cdn.xitu.io/2018/11/20/16730e533ec09d3a?w=1360&amp;h=947&amp;f=png&amp;s=282764" alt=""></p><p>在每一台电脑，每个服务器都有这这几个网络模型层级来维护整个网络数据传输过程。</p><h3 id="一张图了解-TCP-IP-五层网络模型"><a href="#一张图了解-TCP-IP-五层网络模型" class="headerlink" title="一张图了解 TCP/IP 五层网络模型"></a>一张图了解 TCP/IP 五层网络模型</h3><p><img src="https://user-gold-cdn.xitu.io/2018/11/20/167316845f6dde61?w=1255&amp;h=629&amp;f=jpeg&amp;s=180804" alt=""></p><ul><li><strong>物理层</strong>：将信息编码成电流脉冲或其它信号用于网上传输；（电线、光缆等）</li><li><strong>数据链路层</strong>：数据链路层通过物理网络链路供数据传输。可以简单的理解为：规定了 0 和 1 的分包形式，确定了网络数据包的形式。</li><li><strong>网络层</strong>：网络层负责在源和终点之间建立连接;（路由器等）</li><li><strong>传输层</strong>： 敲重点！<blockquote><p>传输层向用户提供可靠的端对端(<code>End-to-End</code>)服务。 常用的（<code>TCP／IP</code>）协议 、<code>UDP</code> 协议；</p></blockquote></li><li><strong>应用层</strong>：敲重点！<blockquote><p>为应用软件提供了很多服务，帮我们实现了 <code>HTTP</code> 协议，我们只要按照规则去使用 <code>HTTP</code> 协议；它构建于 <code>TCP</code> 协议之上；屏蔽了网络传输相关细节。</p></blockquote></li></ul><p>重点在 <strong>应用层</strong> 和 <strong>传输层</strong> 上：<code>http</code> 是在应用层上去实现的，而 <code>http</code> 协议基于传输层的 <code>TCP</code> <code>UDP</code> 协议。</p><a id="more"></a><h2 id="HTTP-发展历史"><a href="#HTTP-发展历史" class="headerlink" title="HTTP 发展历史"></a>HTTP 发展历史</h2><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><blockquote><ol><li><code>HTTP/0.9</code> 只支持一种方法—— <code>Get</code>，请求只有一行</li><li>没有 <code>header</code> 等描述数据的信息</li><li>服务器发送完毕，就关闭 <code>TCP</code> 连接</li></ol></blockquote><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><blockquote><ol><li>请求与响应支持 <code>header</code>，增加了<code>状态码</code>，响应对象的一开始是一个响应状态行</li><li>协议版本信息需要随着请求一起发送，支持 <code>HEAD</code>，<code>POST</code> 方法</li></ol></blockquote><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>在 <code>HTTP/1.0</code> 上增加了一些功能来优化网络链接的过程：</p><ol><li><strong>持久连接</strong><blockquote><p><code>HTTP/1.0</code> 版本里一个 HTTP 请求就要在客户端和服务端之间创建一次 <code>TCP</code> 连接，在服务器返回完内容后就关闭了。相对来说消耗比较高。</p></blockquote></li><li><strong>pipeline</strong><blockquote><p>我们可以在同个连接里发送多个请求，但是服务端要对这些请求都是要按照顺序进行内容的返回。<br>前一个请求等待时间较长，后一个请求处理较快，后一个请求也不能进行内容响应，需要等前一个请求完成后才可响应下次请求，这也是<strong>串行/并行</strong>的概念，而这个在 <code>HTTP/2.0</code> 中做了优化</p></blockquote></li><li><strong>host 和其他一些命令</strong><blockquote><p>有了 <code>host</code> 之后可以在同一台服务器（物理服务器）同时跑多个不同的 web 服务 ，比如说 <code>node.js</code> 的服务、<code>java</code> 的服务。</p></blockquote></li><li><strong>引入更多缓存控制机制</strong>：如 <code>etag</code>，<code>cache-control</code></li><li>…</li></ol><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><ol><li>使用二进制分帧层<blockquote><p>在 <code>HTTP/1.1</code> 中大部分的数据传输都是以字符串方式进行的，<code>HTTP/2.0</code> 则在应用层与传输层之间增加一个二进制分帧层。<br>同样因为这个好处，<code>pipeline</code> 在同个连接里发送多个请求不再需要按照顺序来返回处理。</p></blockquote></li><li>头部压缩<blockquote><p>头信息压缩：在 <code>HTTP/1.1</code> 里面，我们每次发送和返回请求 <code>http header</code> 都是必须要进行完整的发送和返回的，占用带宽。<br>使用首部表来跟踪和存储之前发送的键值对，对于相同的内容，不会再每次请求和响应时发送。</p></blockquote></li><li>服务端推送<blockquote><p>在 <code>HTTP/2.0</code> 中，服务器可以向客户发送请求之外的内容，比如正在请求一个页面时，服务器会把页面相关的 <code>logo</code>，<code>CSS</code> 等文件直接推送到客户端，而不会等到请求来的时候再发送，因为服务器认为客户端会用到这些东西。这相当于在一个 <code>HTML</code> 文档内集合了所有的资源。</p></blockquote></li><li>…</li></ol><h2 id="HTTP-的三次握手"><a href="#HTTP-的三次握手" class="headerlink" title="HTTP 的三次握手"></a>HTTP 的三次握手</h2><p><a href="https://gershonv.github.io/2018/11/20/http-TCP/">http-tcp 的三次握手四次挥手</a></p><h2 id="URI-URL-和-URN"><a href="#URI-URL-和-URN" class="headerlink" title="URI-URL 和 URN"></a>URI-URL 和 URN</h2><p><img src="http://ww4.sinaimg.cn/mw690/6941baebgw1evu0o8swewj20go0avq3e.jpg" alt=""></p><ul><li><code>URI</code> : <code>Uniform Resource Identifier</code>/统一资源标志符<ul><li><code>URL</code> 和 <code>URN</code> 都是 <code>URI</code> 的子集<blockquote><p>统一资源标识符（<code>URI</code>）提供了一个简单、可扩展的资源标识方式。</p></blockquote></li></ul></li><li><p><code>URL</code> : <code>Uniform Resource Locator</code>/统一资源定位器</p><ul><li>URL 是 Internet 上用来描述信息资源的字符串，主要用在各种 WWW 客户程序和服务器程序上。</li><li>采用 URL 可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">;<span class="string">`http://user:pass@host.com:80/path?query=string#hash`</span> <span class="comment">// @example url 的组成</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http:// ===&gt; 协议，类似的还有 ftp、https 等</span></span><br><span class="line"><span class="comment"> * user:pass@host.com:80 ===&gt; 存有该资源的主机IP地址（有时也包括端口号）</span></span><br><span class="line"><span class="comment"> * /path ===&gt; 主机资源的具体地址。如目录和文件名等。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>URN</code> : 永久统一资源定位符</p><ul><li>在资源移动之后还能被找到</li></ul></li></ul><h2 id="HTTP-报文"><a href="#HTTP-报文" class="headerlink" title="HTTP 报文"></a>HTTP 报文</h2><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><blockquote><p>声明 请求方法 、主机域名、资源路径 &amp; 协议版本</p></blockquote><p>请求行的组成 = 请求方法 + 请求路径 + 协议版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test/hi-there.txt HTTP/<span class="number">1.0</span></span><br><span class="line"><span class="comment">// 请求行的组成 = 请求方法 + 请求路径 + 协议版本</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/9/10/165c0f27ea8bff3b?imageslim" alt=""></p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><blockquote><p>声明 客户端、服务器 / 报文的部分信息</p></blockquote><ol><li>请求和响应报文的通用 Header<br><img src="https://user-gold-cdn.xitu.io/2018/9/10/165c0f27eb051d58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></li><li>常见请求 Header<br><img src="https://user-gold-cdn.xitu.io/2018/9/10/165c0f27ebf1b79f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></li></ol><h3 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h3><blockquote><p>存放 需发送给服务器的数据信息</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/10/165c0f28437eb63d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>除此外还有响应报文，略</p><h2 id="创建一个简单的-http-服务"><a href="#创建一个简单的-http-服务" class="headerlink" title="创建一个简单的 http 服务"></a>创建一个简单的 http 服务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line">    response.end(<span class="string">'123'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8888</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;经典五层网络模型&quot;&gt;&lt;a href=&quot;#经典五层网络模型&quot; class=&quot;headerlink&quot; title=&quot;经典五层网络模型&quot;&gt;&lt;/a&gt;经典五层网络模型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/20/16730e533ec09d3a?w=1360&amp;amp;h=947&amp;amp;f=png&amp;amp;s=282764&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在每一台电脑，每个服务器都有这这几个网络模型层级来维护整个网络数据传输过程。&lt;/p&gt;
&lt;h3 id=&quot;一张图了解-TCP-IP-五层网络模型&quot;&gt;&lt;a href=&quot;#一张图了解-TCP-IP-五层网络模型&quot; class=&quot;headerlink&quot; title=&quot;一张图了解 TCP/IP 五层网络模型&quot;&gt;&lt;/a&gt;一张图了解 TCP/IP 五层网络模型&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/11/20/167316845f6dde61?w=1255&amp;amp;h=629&amp;amp;f=jpeg&amp;amp;s=180804&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理层&lt;/strong&gt;：将信息编码成电流脉冲或其它信号用于网上传输；（电线、光缆等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据链路层&lt;/strong&gt;：数据链路层通过物理网络链路供数据传输。可以简单的理解为：规定了 0 和 1 的分包形式，确定了网络数据包的形式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络层&lt;/strong&gt;：网络层负责在源和终点之间建立连接;（路由器等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传输层&lt;/strong&gt;： 敲重点！&lt;blockquote&gt;
&lt;p&gt;传输层向用户提供可靠的端对端(&lt;code&gt;End-to-End&lt;/code&gt;)服务。 常用的（&lt;code&gt;TCP／IP&lt;/code&gt;）协议 、&lt;code&gt;UDP&lt;/code&gt; 协议；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用层&lt;/strong&gt;：敲重点！&lt;blockquote&gt;
&lt;p&gt;为应用软件提供了很多服务，帮我们实现了 &lt;code&gt;HTTP&lt;/code&gt; 协议，我们只要按照规则去使用 &lt;code&gt;HTTP&lt;/code&gt; 协议；它构建于 &lt;code&gt;TCP&lt;/code&gt; 协议之上；屏蔽了网络传输相关细节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重点在 &lt;strong&gt;应用层&lt;/strong&gt; 和 &lt;strong&gt;传输层&lt;/strong&gt; 上：&lt;code&gt;http&lt;/code&gt; 是在应用层上去实现的，而 &lt;code&gt;http&lt;/code&gt; 协议基于传输层的 &lt;code&gt;TCP&lt;/code&gt; &lt;code&gt;UDP&lt;/code&gt; 协议。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="https://gershonv.github.io/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="https://gershonv.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>[转] JavaScript深入之继承的多种方式和优缺点</title>
    <link href="https://gershonv.github.io/2018/11/15/js-%E6%B7%B1%E5%85%A5%E4%B9%8B%E7%BB%A7%E6%89%BF%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%92%8C%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://gershonv.github.io/2018/11/15/js-深入之继承的多种方式和优缺点/</id>
    <published>2018-11-15T06:18:41.000Z</published>
    <updated>2019-01-03T15:09:17.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文讲解 JavaScript 各种继承方式和优缺点。</p><p>但是注意：</p><p>这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript 高级程序设计》写得真是太好了！</p><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'kevin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.getName()) <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><p>问题：</p><p>1.引用类型的属性被所有实例共享，举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'kevin'</span>, <span class="string">'daisy'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">'yayu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names) <span class="comment">// ["kevin", "daisy", "yayu"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names) <span class="comment">// ["kevin", "daisy", "yayu"]</span></span><br></pre></td></tr></table></figure><p>2.在创建 Child 的实例时，不能向 Parent 传参</p><a id="more"></a><h2 id="2-借用构造函数-经典继承"><a href="#2-借用构造函数-经典继承" class="headerlink" title="2.借用构造函数(经典继承)"></a>2.借用构造函数(经典继承)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'kevin'</span>, <span class="string">'daisy'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">'yayu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names) <span class="comment">// ["kevin", "daisy", "yayu"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names) <span class="comment">// ["kevin", "daisy"]</span></span><br></pre></td></tr></table></figure><p>优点：</p><p>1.避免了引用类型的属性被所有实例共享</p><p>2.可以在 Child 中向 Parent 传参</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'daisy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name) <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><p>缺点：</p><p>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p><h2 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h2><p>原型链继承和经典继承双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>)</span><br><span class="line"></span><br><span class="line">child1.colors.push(<span class="string">'black'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">// kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age) <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors) <span class="comment">// ["red", "blue", "green", "black"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'daisy'</span>, <span class="string">'20'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name) <span class="comment">// daisy</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age) <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors) <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure><p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p><h2 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是 ES5 Object.create 的模拟实现，将传入的对象作为创建的对象的原型。</p><p>缺点：</p><p>包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'kevin'</span>,</span><br><span class="line">  friends: [<span class="string">'daisy'</span>, <span class="string">'kelly'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createObj(person)</span><br><span class="line"><span class="keyword">var</span> person2 = createObj(person)</span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">'person1'</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name) <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.firends.push(<span class="string">'taylor'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person2.friends) <span class="comment">// ["daisy", "kelly", "taylor"]</span></span><br></pre></td></tr></table></figure><p>注意：修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 name 值，而是因为<code>person1.name = &#39;person1&#39;</code>，给<code>person1</code>添加了 name 值，并非修改了原型上的 name 值。</p><h2 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h2><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = object.create(o)</span><br><span class="line">  clone.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h2 id="6-寄生组合式继承"><a href="#6-寄生组合式继承" class="headerlink" title="6. 寄生组合式继承"></a>6. 寄生组合式继承</h2><p>为了方便大家阅读，在这里重复一下组合继承的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1)</span><br></pre></td></tr></table></figure><p>组合继承最大的缺点是会调用两次父构造函数。</p><p>一次是设置子类型实例的原型的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br></pre></td></tr></table></figure><p>一次在创建子类型实例的时候：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>)</span><br></pre></td></tr></table></figure><p>回想下 new 的模拟实现，其实在这句中，我们会执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent.call(<span class="keyword">this</span>, name)</span><br></pre></td></tr></table></figure><p>在这里，我们又会调用了一次 Parent 构造函数。</p><p>所以，在这个例子中，如果我们打印 child1 对象，我们会发现 Child.prototype 和 child1 都有一个属性为<code>colors</code>，属性值为<code>[&#39;red&#39;, &#39;blue&#39;, &#39;green&#39;]</code>。</p><p>那么我们该如何精益求精，避免这一次重复调用呢？</p><p>如果我们不使用 Child.prototype = new Parent() ，而是间接的让 Child.prototype 访问到 Parent.prototype 呢？</p><p>看看如何实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键的三步</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">F.prototype = Parent.prototype</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> F()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1)</span><br></pre></td></tr></table></figure><p>最后我们封装一下这个继承方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(parent.prototype)</span><br><span class="line">  prototype.constructor = child</span><br><span class="line">  child.prototype = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们使用的时候：</span></span><br><span class="line">prototype(Child, Parent)</span><br></pre></td></tr></table></figure><p>引用《JavaScript 高级程序设计》中对寄生组合式继承的夸赞就是：</p><p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">《JavaScript 深入之从原型到原型链》</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">《JavaScript 深入之 call 和 apply 的模拟实现》</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener">《JavaScript 深入之 new 的模拟实现》</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/15" target="_blank" rel="noopener">《JavaScript 深入之创建对象》</a></li></ul><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript 深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript 深入系列预计写十五篇左右，旨在帮大家捋顺 JavaScript 底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;本文讲解 JavaScript 各种继承方式和优缺点。&lt;/p&gt;
&lt;p&gt;但是注意：&lt;/p&gt;
&lt;p&gt;这篇文章更像是笔记，哎，再让我感叹一句：《JavaScript 高级程序设计》写得真是太好了！&lt;/p&gt;
&lt;h2 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1.原型链继承&quot;&gt;&lt;/a&gt;1.原型链继承&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Parent.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child1.getName()) &lt;span class=&quot;comment&quot;&gt;// kevin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;1.引用类型的属性被所有实例共享，举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.names = [&lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;daisy&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Child&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Child.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parent()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child1.names.push(&lt;span class=&quot;string&quot;&gt;&#39;yayu&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child1.names) &lt;span class=&quot;comment&quot;&gt;// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; child2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Child()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(child2.names) &lt;span class=&quot;comment&quot;&gt;// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.在创建 Child 的实例时，不能向 Parent 传参&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://gershonv.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://gershonv.github.io/tags/Javascript/"/>
    
      <category term="Javascript 深入系列" scheme="https://gershonv.github.io/tags/Javascript-%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>[转] JavaScript深入之创建对象的多种方式以及优缺点 </title>
    <link href="https://gershonv.github.io/2018/11/15/js-%E6%B7%B1%E5%85%A5%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>https://gershonv.github.io/2018/11/15/js-深入之创建对象的多种方式以及优缺点/</id>
    <published>2018-11-15T06:16:31.000Z</published>
    <updated>2019-01-03T15:10:05.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这篇文章讲解创建对象的各种方式，以及优缺点。</p><p>但是注意：</p><p>这篇文章更像是笔记，因为《JavaScript 高级程序设计》写得真是太好了！</p><h2 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'kevin'</span>)</span><br></pre></td></tr></table></figure><p>缺点：对象无法识别，因为所有的实例都指向一个原型</p><h2 id="2-构造函数模式"><a href="#2-构造函数模式" class="headerlink" title="2. 构造函数模式"></a>2. 构造函数模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'kevin'</span>)</span><br></pre></td></tr></table></figure><p>优点：实例可以识别为一个特定的类型</p><p>缺点：每次创建实例时，每个方法都要被创建一次</p><a id="more"></a><h2 id="2-1-构造函数模式优化"><a href="#2-1-构造函数模式优化" class="headerlink" title="2.1 构造函数模式优化"></a>2.1 构造函数模式优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.getName = getName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'kevin'</span>)</span><br></pre></td></tr></table></figure><p>优点：解决了每个方法都要被重新创建的问题</p><p>缺点：这叫啥封装……</p><h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3. 原型模式"></a>3. 原型模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'keivn'</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>优点：方法不会重新创建</p><p>缺点：1. 所有的属性和方法都共享 2. 不能初始化参数</p><h2 id="3-1-原型模式优化"><a href="#3-1-原型模式优化" class="headerlink" title="3.1 原型模式优化"></a>3.1 原型模式优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">'kevin'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>优点：封装性好了一点</p><p>缺点：重写了原型，丢失了 constructor 属性</p><h2 id="3-2-原型模式优化"><a href="#3-2-原型模式优化" class="headerlink" title="3.2 原型模式优化"></a>3.2 原型模式优化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  name: 'kevin',</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>优点：实例可以通过 constructor 属性找到所属构造函数</p><p>缺点：原型模式该有的缺点还是有</p><h2 id="4-组合模式"><a href="#4-组合模式" class="headerlink" title="4. 组合模式"></a>4. 组合模式</h2><p>构造函数模式与原型模式双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>优点：该共享的共享，该私有的私有，使用最广泛的方式</p><p>缺点：有的人就是希望全部都写在一起，即更好的封装性</p><h2 id="4-1-动态原型模式"><a href="#4-1-动态原型模式" class="headerlink" title="4.1 动态原型模式"></a>4.1 动态原型模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">'function'</span>) &#123;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br></pre></td></tr></table></figure><p>注意：使用动态原型模式时，不能用对象字面量重写原型</p><p>解释下为什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">'function'</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'kevin'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'daisy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 并没有该方法</span></span><br><span class="line">person1.getName()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释掉上面的代码，这句是可以执行的。</span></span><br><span class="line">person2.getName()</span><br></pre></td></tr></table></figure><p>为了解释这个问题，假设开始执行<code>var person1 = new Person(&#39;kevin&#39;)</code>。</p><p>如果对 new 和 apply 的底层执行过程不是很熟悉，可以阅读底部相关链接中的文章。</p><p>我们回顾下 new 的实现步骤：</p><ol><li>首先新建一个对象</li><li>然后将对象的原型指向 Person.prototype</li><li>然后 Person.apply(obj)</li><li>返回这个对象</li></ol><p>注意这个时候，回顾下 apply 的实现步骤，会执行 obj.Person 方法，这个时候就会执行 if 语句里的内容，注意构造函数的 prototype 属性指向了实例的原型，使用字面量方式直接覆盖 Person.prototype，并不会更改实例的原型的值，person1 依然是指向了以前的原型，而不是 Person.prototype。而之前的原型是没有 getName 方法的，所以就报错了！</p><p>如果你就是想用字面量方式写代码，可以尝试下这种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">'function'</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'kevin'</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'daisy'</span>)</span><br><span class="line"></span><br><span class="line">person1.getName() <span class="comment">// kevin</span></span><br><span class="line">person2.getName() <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><h3 id="5-1-寄生构造函数模式"><a href="#5-1-寄生构造函数模式" class="headerlink" title="5.1 寄生构造函数模式"></a>5.1 寄生构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.name = name</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'kevin'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>寄生构造函数模式，我个人认为应该这样读：</p><p>寄生-构造函数-模式，也就是说寄生在构造函数的一种方法。</p><p>也就是说打着构造函数的幌子挂羊头卖狗肉，你看创建的实例使用 instanceof 都无法指向构造函数！</p><p>这样方法可以在特殊情况下使用。比如我们想创建一个具有额外方法的特殊数组，但是又不想直接修改 Array 构造函数，我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    values.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">'|'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> values</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>)</span><br><span class="line"><span class="keyword">var</span> colors2 = SpecialArray(<span class="string">'red2'</span>, <span class="string">'blue2'</span>, <span class="string">'green2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors)</span><br><span class="line"><span class="built_in">console</span>.log(colors.toPipedString()) <span class="comment">// red|blue|green</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2)</span><br><span class="line"><span class="built_in">console</span>.log(colors2.toPipedString()) <span class="comment">// red2|blue2|green2</span></span><br></pre></td></tr></table></figure><p>你会发现，其实所谓的寄生构造函数模式就是比工厂模式在创建对象的时候，多使用了一个 new，实际上两者的结果是一样的。</p><p>但是作者可能是希望能像使用普通 Array 一样使用 SpecialArray，虽然把 SpecialArray 当成函数也一样能用，但是这并不是作者的本意，也变得不优雅。</p><p>在可以使用其他模式的情况下，不要使用这种模式。</p><p>但是值得一提的是，上面例子中的循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">  values.push(<span class="built_in">arguments</span>[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以替换成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values.push.apply(values, <span class="built_in">arguments</span>)</span><br></pre></td></tr></table></figure><h2 id="5-2-稳妥构造函数模式"><a href="#5-2-稳妥构造函数模式" class="headerlink" title="5.2 稳妥构造函数模式"></a>5.2 稳妥构造函数模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = person(<span class="string">'kevin'</span>)</span><br><span class="line"></span><br><span class="line">person1.sayName() <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">'daisy'</span></span><br><span class="line"></span><br><span class="line">person1.sayName() <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。</p><p>与寄生构造函数模式有两点不同：</p><ol><li>新创建的实例方法不引用 this</li><li>不使用 new 操作符调用构造函数</li></ol><p>稳妥对象最适合在一些安全的环境中。</p><p>稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。</p><h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noopener">JavaScript 深入之继承的多种方式和优缺点</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">《JavaScript 深入之从原型到原型链》</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener">《JavaScript 深入之 new 的模拟实现》</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">《JavaScript 深入之 call 和 apply 的模拟实现》</a></li></ul><h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript 深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog</a>。</p><p>JavaScript 深入系列预计写十五篇左右，旨在帮大家捋顺 JavaScript 底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p><p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎 star，对作者也是一种鼓励。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这篇文章讲解创建对象的各种方式，以及优缺点。&lt;/p&gt;
&lt;p&gt;但是注意：&lt;/p&gt;
&lt;p&gt;这篇文章更像是笔记，因为《JavaScript 高级程序设计》写得真是太好了！&lt;/p&gt;
&lt;h2 id=&quot;1-工厂模式&quot;&gt;&lt;a href=&quot;#1-工厂模式&quot; class=&quot;headerlink&quot; title=&quot;1. 工厂模式&quot;&gt;&lt;/a&gt;1. 工厂模式&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createPerson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  o.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  o.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = createPerson(&lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;缺点：对象无法识别，因为所有的实例都指向一个原型&lt;/p&gt;
&lt;h2 id=&quot;2-构造函数模式&quot;&gt;&lt;a href=&quot;#2-构造函数模式&quot; class=&quot;headerlink&quot; title=&quot;2. 构造函数模式&quot;&gt;&lt;/a&gt;2. 构造函数模式&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&#39;kevin&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优点：实例可以识别为一个特定的类型&lt;/p&gt;
&lt;p&gt;缺点：每次创建实例时，每个方法都要被创建一次&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="https://gershonv.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://gershonv.github.io/tags/Javascript/"/>
    
      <category term="Javascript 深入系列" scheme="https://gershonv.github.io/tags/Javascript-%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
